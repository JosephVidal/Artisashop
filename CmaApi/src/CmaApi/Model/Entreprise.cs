/*
 * API Répertoire National des Métiers
 *
 * Le service d'interrogation de la base du RNM  permet d'obtenir les informations suivantes : * Générer un extrait pdf pour une entreprise en fournissant le SIREN * Renvoyer un fichier json des données de l'entreprise en fournissant le SIREN * Renvoyer la fiche de l'entreprise en fournissant le SIREN (format html) 
 *
 * The version of the OpenAPI document: 2.0.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CmaApi.Client.OpenAPIDateConverter;

namespace CmaApi.Model
{
    /// <summary>
    /// Schema de l&#39;entreprise 
    /// </summary>
    [DataContract(Name = "Entreprise")]
    public partial class Entreprise : IEquatable<Entreprise>, IValidatableObject
    {
        /// <summary>
        /// Cette variable indique la qualification artisanale de l’entrepreneur. ARTISAN MAITRE et ARTISAN MAITRE METIERS D’ART sont spécifiques à l’Alsace et à la Moselle. 
        /// </summary>
        /// <value>Cette variable indique la qualification artisanale de l’entrepreneur. ARTISAN MAITRE et ARTISAN MAITRE METIERS D’ART sont spécifiques à l’Alsace et à la Moselle. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirQaQualificationEnum
        {
            /// <summary>
            /// Enum ARTISAN for value: ARTISAN
            /// </summary>
            [EnumMember(Value = "ARTISAN")]
            ARTISAN = 1,

            /// <summary>
            /// Enum MAITREARTISAN for value: MAITRE ARTISAN
            /// </summary>
            [EnumMember(Value = "MAITRE ARTISAN")]
            MAITREARTISAN = 2,

            /// <summary>
            /// Enum ARTISANDART for value: ARTISAN D’ART
            /// </summary>
            [EnumMember(Value = "ARTISAN D’ART")]
            ARTISANDART = 3,

            /// <summary>
            /// Enum MAITREARTISANDART for value: MAITRE ARTISAN D’ART
            /// </summary>
            [EnumMember(Value = "MAITRE ARTISAN D’ART")]
            MAITREARTISANDART = 4,

            /// <summary>
            /// Enum SANSQUALIFICATION for value: SANS QUALIFICATION
            /// </summary>
            [EnumMember(Value = "SANS QUALIFICATION")]
            SANSQUALIFICATION = 5,

            /// <summary>
            /// Enum ARTISANMAITRE for value: ARTISAN MAITRE
            /// </summary>
            [EnumMember(Value = "ARTISAN MAITRE")]
            ARTISANMAITRE = 6,

            /// <summary>
            /// Enum ARTISANMAITREMETIERSDART for value: ARTISAN MAITRE METIERS D’ART
            /// </summary>
            [EnumMember(Value = "ARTISAN MAITRE METIERS D’ART")]
            ARTISANMAITREMETIERSDART = 7

        }


        /// <summary>
        /// Cette variable indique la qualification artisanale de l’entrepreneur. ARTISAN MAITRE et ARTISAN MAITRE METIERS D’ART sont spécifiques à l’Alsace et à la Moselle. 
        /// </summary>
        /// <value>Cette variable indique la qualification artisanale de l’entrepreneur. ARTISAN MAITRE et ARTISAN MAITRE METIERS D’ART sont spécifiques à l’Alsace et à la Moselle. </value>
        [DataMember(Name = "dir_qa_qualification", EmitDefaultValue = false)]
        public DirQaQualificationEnum? DirQaQualification { get; set; }
        /// <summary>
        /// pp pour personne physique et pm pour personne morale
        /// </summary>
        /// <value>pp pour personne physique et pm pour personne morale</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GestCategorieEnum
        {
            /// <summary>
            /// Enum Pp for value: pp
            /// </summary>
            [EnumMember(Value = "pp")]
            Pp = 1,

            /// <summary>
            /// Enum Pm for value: pm
            /// </summary>
            [EnumMember(Value = "pm")]
            Pm = 2

        }


        /// <summary>
        /// pp pour personne physique et pm pour personne morale
        /// </summary>
        /// <value>pp pour personne physique et pm pour personne morale</value>
        [DataMember(Name = "gest_categorie", EmitDefaultValue = false)]
        public GestCategorieEnum? GestCategorie { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Entreprise" /> class.
        /// </summary>
        /// <param name="id">Identifiant interne de l’entreprise.</param>
        /// <param name="entIdNumGestion">Ce numéro de gestion se décompose en trois parties, selon le schéma suivant : En partant de la droite, les trois premiers caractères donnent le code du département Les deux caractères suivants donnent l’année à laquelle le numéro a été attribué  Et les six derniers sont dédiés au numéro incrémenté .</param>
        /// <param name="entIdSiren">Le numéro SIREN est l’identifiant de l’unité légale. Il est composé de huit chiffres et d’un chiffre de contrôle qui permet de vérifier la validité du numéro. Pour le secteur privé, le numéro SIREN n’est pas significatif, il ne contient aucun code caractérisant l’activité ou la localisation des entreprises. Un numéro SIREN qui a été attribué à une unité légale ne sera plus jamais utilisé pour immatriculer une autre unité légale. .</param>
        /// <param name="entIdOrigine">Cette variable reprend l’origine de l’établissement déclarée sur les liasses de type 0 ou 2.  | Modalité | intitulé                | | - -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -| | 1        |Création                 | | 3        |Achat                    | | 4        |Apport                   | | 6        |Prise en location gérance| | 7        |Partage                  | | 8        |Reprise                  | | F        |Gérance - mandat         | .</param>
        /// <param name="entAdrNumeroVoie">Numéro dans la voie.</param>
        /// <param name="entAdrIndiceRepetition">Indice de répétition dans la voie.</param>
        /// <param name="entAdrTypeVoie">Type de voie.</param>
        /// <param name="entAdrAdresse">Libellé de voie ou lieu-dit.</param>
        /// <param name="entAdrAdresseComplement">Complément d’adresse.</param>
        /// <param name="entAdrCodePostal">Code postal.</param>
        /// <param name="entAdrCommune">Libellé de localité.</param>
        /// <param name="entAdrCommuneCog">Identifiant de localisation COG.</param>
        /// <param name="entActCodeNafaPrincipal">C’est le code issu de la Nomenclature des Activités Françaises de l’Artisanat (NAFA Rèv2) pour l’activité principale au RM..</param>
        /// <param name="entActCodeNafaSecondaire1">C’est le code issu de la Nomenclature des Activités Françaises de l’Artisanat (NAFA Rèv2) pour l’activité principale au RM..</param>
        /// <param name="entActCodeNafaSecondaire2">C’est le code issu de la Nomenclature des Activités Françaises de l’Artisanat (NAFA Rèv2) pour l’activité principale au RM..</param>
        /// <param name="entActCodeNafaSecondaire3">C’est le code issu de la Nomenclature des Activités Françaises de l’Artisanat (NAFA Rèv2) pour l’activité principale au RM..</param>
        /// <param name="entActDateImmatRm">Cette variable est la date d’immatriculation au Répertoire des Métiers..</param>
        /// <param name="entActDateRadiation">Cette variable est la date de radiation du Répertoire des Métiers. Cette date est soit déclarative ou d’office..</param>
        /// <param name="entActDateDebutActivite">Cette variable est la date de début d’activité déclarée par le dirigeant lors de son immatriculation..</param>
        /// <param name="entActDateCessationActivite">Cette variable est la date de cessation d’activité de la personne morale hors dissolution, appelée mise en sommeil..</param>
        /// <param name="entActDateClotureLiquidation">Cette variable est la date de clôture de la liquidation déclarée lors de la dissolution de la personne morale..</param>
        /// <param name="entActDateTransfertPatrimoine">Cette variable est la date de transfert de patrimoine  à l&#39;associé unique restant. Cette dissolution de la personne morale résulte du rassemblement de toutes les parts en une seule main..</param>
        /// <param name="entActDateDissolution">Cette variable est la date de dissolution de la personne morale..</param>
        /// <param name="entActModaliteExercice">Cette variable indique si l’entreprise a une activité permanente ou saisonnière. L’activité est dite saisonnière si chaque année, l’entreprise cesse totalement ses activités pendant plus de 3 mois consécutifs.  | Modalité | intitulé      | | - -- -- -- - | - -- -- -- -- -- -- -| | P        |Permanente     | | S        |Saisonnière    | | NR       |Non renseignée | .</param>
        /// <param name="entActNonSedentaire">Cette variable indique si l’entreprise a une activité ambulante..</param>
        /// <param name="entActActiviteArtisanalesDeclarees">C’est l’activité pour laquelle l’entreprise a demandé son inscription au répertoire des métiers. Cette variable présente la déclaration libre des activités principales NB : Source d’information : la variable est reprise à l’identique de la liasse déclarative (variable E71 selon la norme d’échange).  .</param>
        /// <param name="entActDenominationSociale">C’est la désignation qui permet d’identifier une société qui possède la personnalité morale et qui permet de la distinguer des autres personnes morales et de ses associés. Toutes les sociétés commerciales, sociétés en nom collectif, sociétés en commandite simple ou par actions, sociétés à responsabilité limitée, sociétés anonymes, sociétés par actions simplifiées, sont désignées par une dénomination sociale donnée au vu de la nature de l’activité commerciale exercée ou de toute autre caractéristique, géographique par exemple, ou d’après un nom de fantaisie. La société civile est désignée par une raison sociale qui comporte tous les (ou une partie) noms des associés indéfiniment responsables qui la composent. La dénomination sociale comme la raison sociale figure dans les statuts de la société. La société en participation qui ne possède pas la personnalité morale ne peut avoir ni dénomination sociale, ni raison sociale au sens du code du commerce. Par convention, elle sera identifiée dans le répertoire avec le sigle SEP suivi soit de la dénomination d’une ou plusieurs sociétés la composant, soit d’une indication de localisation, soit d’une activité. Par convention également, les  entités  du secteur public sont identifiées par la dénomination complète de l’organisme telle qu’elle figure dans le texte (loi, décret, arrêté) actant la création. .</param>
        /// <param name="entActSigle">Un sigle est une forme réduite de la raison sociale ou de la dénomination d’une personne morale ou d’un organisme public. Il est habituellement constitué des initiales de certains des mots de la dénomination. Afin d’en faciliter la prononciation, il arrive qu’on retienne les deux ou trois premières lettres de certains mots : il s’agit alors, au sens strict, d’un acronyme ; mais l’usage a étendu à ce cas l’utilisation du terme sigle. .</param>
        /// <param name="entActFormeJuridique">Pour les personnes morales de droit privé, on détermine la Catégorie Juridique à partir de la rubrique « Forme Juridique » de la norme fonctionnelle d’échanges (Fiche 31)..</param>
        /// <param name="entEffSalarie">entEffSalarie.</param>
        /// <param name="entEffApprenti">entEffApprenti.</param>
        /// <param name="entJugProcedures">Cette variable présente : *  les déclarations de cessation des paiements et les décisions intervenues dans les procédures de règlement judiciaire et de liquidation des biens en application de la loi n° 67-563 du 13 juillet 1967 *  les déclarations intervenues dans les procédures ouvertes en application de l&#39;ordonnance n° 67-820 du 23 septembre 1967 tendant à faciliter le redressement économique et financier. *  les déclarations de cessation des paiements et les décisions suivantes intervenues dans les procédures de redressement ou de liquidation judiciaires des entreprises ouvertes avant le 1er janvier 2006 en application du code de commerce. *  les déclarations intervenues dans les procédures de sauvegarde, de redressement judiciaire ou de liquidation judiciaire ouvertes à compter du 1er janvier 2006. .</param>
        /// <param name="gestMajFichier">Cette variable est la date d’import des données dans la base de l’API..</param>
        /// <param name="gestDateMaj">Cette variable est la date de la dernière mise à jour de l’entreprise..</param>
        /// <param name="dirQaQualification">Cette variable indique la qualification artisanale de l’entrepreneur. ARTISAN MAITRE et ARTISAN MAITRE METIERS D’ART sont spécifiques à l’Alsace et à la Moselle. .</param>
        /// <param name="dirIdNomNaissance">C’est le nom de famille dévolu à la personne le jour de la déclaration de sa naissance. Ce peut être soit le nom du père, soit le nom de la mère, soit leurs deux noms accolés dans l’ordre choisi par eux dans la limite d’un nom de famille pour chacun d’eux (Article 311-21 du code civil). C’est le nom qui figure au registre de l’état civil. Cette législation est récente et a pris effet au 1er  septembre 2003. Avant cette date, le nom de la personne pouvait être qualifié de nom de naissance ou nom patronymique. .</param>
        /// <param name="dirIdNomUsage">Le nom d’usage est celui que la personne a choisi d’utiliser. *  Toute personne majeure peut ajouter à son nom, le nom de celui de ses parents qui ne lui a pas transmis le sien, *  Toute personne mariée (homme ou femme) peut ajouter à son nom celui du conjoint ou faire précéder son nom du nom du conjoint ou utiliser le seul nom de son conjoint. C’est l’article 43 de la loi n° 85-1372 du 23 décembre 1985, relative à l’égalité des époux dans les régimes matrimoniaux et des parents dans la gestion des biens des enfants mineurs, qui définit le nom d’usage. Le nom d’usage ne figure ni à l’état civil ni sur le livret de famille, l’intéressé doit informer ses interlocuteurs de sa volonté d’être identifié de cette manière en présentant les pièces justificatives nécessaires. .</param>
        /// <param name="dirIdPrenom1">C’est le (ou les) prénom(s) qui figure(nt) au registre de l’état civil..</param>
        /// <param name="dirIdPrenom2">C’est le (ou les) prénom(s) qui figure(nt) au registre de l’état civil..</param>
        /// <param name="dirIdPrenom3">C’est le (ou les) prénom(s) qui figure(nt) au registre de l’état civil..</param>
        /// <param name="dirIdPseudonyme">C’est le nom qu’une personne utilise pour se désigner dans l’exercice de son activité, généralement littéraire ou artistique. Le pseudonyme est protégé, comme le nom de famille, contre l’usurpation venant d’un tiers..</param>
        /// <param name="dirIdDateNaissance">Cette variable est la date de naissance de la personne physique..</param>
        /// <param name="dirIdLieuNaissance">C’est le libellé en clair de la commune/pays de naissance..</param>
        /// <param name="eirlInitNomRegistre">En cas de double immatriculation, cette variable indique le choix du registre où est déposée la déclaration d’affectation de patrimoine  |Modalité|Intitulé| |- -- -- -- -|- -- -- -- -| |1       |RCS     | |2       |RM      | .</param>
        /// <param name="eirlDenomination">C’est la dénomination de l’EIRL. Elle incorpore le nom de l’entrepreneur précédé ou suivi immédiatement des mots : « Entrepreneur Individuel à Responsabilité Limitée » ou des initiales : « EIRL ». .</param>
        /// <param name="eirlObjetDap">C’est l’objet de l’activité professionnelle à laquelle le patrimoine est affecté..</param>
        /// <param name="eirlDateDepot">Cette variable correspond à la date d’effet du dépôt de la déclaration d’affectation de patrimoine..</param>
        /// <param name="gestNar4">Cette variable est l’intitulé du secteur d’activité selon le code NAR 4..</param>
        /// <param name="gestNar20">Cette variable est l’intitulé du secteur d’activité selon le code NAR 20..</param>
        /// <param name="gestLibelleCodeNafa">Cette variable est le libellé du code NAFA..</param>
        /// <param name="gestDept">Département de l’entreprise..</param>
        /// <param name="gestReg">Région de l’entreprise..</param>
        /// <param name="gestEmetteur">Code du CFE qui a inscrit l’entreprise..</param>
        /// <param name="gestCategorie">pp pour personne physique et pm pour personne morale.</param>
        /// <param name="gestLabelFormeJuridique">Intitulé de la forme juridique.</param>
        /// <param name="epci">Libellé de l’établissement public de coopération intercommunale correspondant au code officiel géographique de l’entreprise..</param>
        /// <param name="entActCodeApen">C’est le code issu de la Norme des Activités des Entreprises de l’INSEE, définissant l’Activité Principale de l’Entreprise..</param>
        public Entreprise(long id = default(long), string entIdNumGestion = default(string), string entIdSiren = default(string), string entIdOrigine = default(string), string entAdrNumeroVoie = default(string), string entAdrIndiceRepetition = default(string), string entAdrTypeVoie = default(string), string entAdrAdresse = default(string), string entAdrAdresseComplement = default(string), string entAdrCodePostal = default(string), string entAdrCommune = default(string), string entAdrCommuneCog = default(string), string entActCodeNafaPrincipal = default(string), string entActCodeNafaSecondaire1 = default(string), string entActCodeNafaSecondaire2 = default(string), string entActCodeNafaSecondaire3 = default(string), DateTime? entActDateImmatRm = default(DateTime?), DateTime? entActDateRadiation = default(DateTime?), DateTime? entActDateDebutActivite = default(DateTime?), DateTime? entActDateCessationActivite = default(DateTime?), DateTime? entActDateClotureLiquidation = default(DateTime?), DateTime? entActDateTransfertPatrimoine = default(DateTime?), DateTime? entActDateDissolution = default(DateTime?), string entActModaliteExercice = default(string), string entActNonSedentaire = default(string), string entActActiviteArtisanalesDeclarees = default(string), string entActDenominationSociale = default(string), string entActSigle = default(string), string entActFormeJuridique = default(string), long entEffSalarie = default(long), long entEffApprenti = default(long), string entJugProcedures = default(string), DateTime? gestMajFichier = default(DateTime?), DateTime? gestDateMaj = default(DateTime?), DirQaQualificationEnum? dirQaQualification = default(DirQaQualificationEnum?), string dirIdNomNaissance = default(string), string dirIdNomUsage = default(string), string dirIdPrenom1 = default(string), string dirIdPrenom2 = default(string), string dirIdPrenom3 = default(string), string dirIdPseudonyme = default(string), DateTime? dirIdDateNaissance = default(DateTime?), string dirIdLieuNaissance = default(string), string eirlInitNomRegistre = default(string), string eirlDenomination = default(string), string eirlObjetDap = default(string), DateTime? eirlDateDepot = default(DateTime?), string gestNar4 = default(string), string gestNar20 = default(string), string gestLibelleCodeNafa = default(string), string gestDept = default(string), string gestReg = default(string), string gestEmetteur = default(string), GestCategorieEnum? gestCategorie = default(GestCategorieEnum?), string gestLabelFormeJuridique = default(string), string epci = default(string), string entActCodeApen = default(string))
        {
            this.Id = id;
            this.EntIdNumGestion = entIdNumGestion;
            this.EntIdSiren = entIdSiren;
            this.EntIdOrigine = entIdOrigine;
            this.EntAdrNumeroVoie = entAdrNumeroVoie;
            this.EntAdrIndiceRepetition = entAdrIndiceRepetition;
            this.EntAdrTypeVoie = entAdrTypeVoie;
            this.EntAdrAdresse = entAdrAdresse;
            this.EntAdrAdresseComplement = entAdrAdresseComplement;
            this.EntAdrCodePostal = entAdrCodePostal;
            this.EntAdrCommune = entAdrCommune;
            this.EntAdrCommuneCog = entAdrCommuneCog;
            this.EntActCodeNafaPrincipal = entActCodeNafaPrincipal;
            this.EntActCodeNafaSecondaire1 = entActCodeNafaSecondaire1;
            this.EntActCodeNafaSecondaire2 = entActCodeNafaSecondaire2;
            this.EntActCodeNafaSecondaire3 = entActCodeNafaSecondaire3;
            this.EntActDateImmatRm = entActDateImmatRm;
            this.EntActDateRadiation = entActDateRadiation;
            this.EntActDateDebutActivite = entActDateDebutActivite;
            this.EntActDateCessationActivite = entActDateCessationActivite;
            this.EntActDateClotureLiquidation = entActDateClotureLiquidation;
            this.EntActDateTransfertPatrimoine = entActDateTransfertPatrimoine;
            this.EntActDateDissolution = entActDateDissolution;
            this.EntActModaliteExercice = entActModaliteExercice;
            this.EntActNonSedentaire = entActNonSedentaire;
            this.EntActActiviteArtisanalesDeclarees = entActActiviteArtisanalesDeclarees;
            this.EntActDenominationSociale = entActDenominationSociale;
            this.EntActSigle = entActSigle;
            this.EntActFormeJuridique = entActFormeJuridique;
            this.EntEffSalarie = entEffSalarie;
            this.EntEffApprenti = entEffApprenti;
            this.EntJugProcedures = entJugProcedures;
            this.GestMajFichier = gestMajFichier;
            this.GestDateMaj = gestDateMaj;
            this.DirQaQualification = dirQaQualification;
            this.DirIdNomNaissance = dirIdNomNaissance;
            this.DirIdNomUsage = dirIdNomUsage;
            this.DirIdPrenom1 = dirIdPrenom1;
            this.DirIdPrenom2 = dirIdPrenom2;
            this.DirIdPrenom3 = dirIdPrenom3;
            this.DirIdPseudonyme = dirIdPseudonyme;
            this.DirIdDateNaissance = dirIdDateNaissance;
            this.DirIdLieuNaissance = dirIdLieuNaissance;
            this.EirlInitNomRegistre = eirlInitNomRegistre;
            this.EirlDenomination = eirlDenomination;
            this.EirlObjetDap = eirlObjetDap;
            this.EirlDateDepot = eirlDateDepot;
            this.GestNar4 = gestNar4;
            this.GestNar20 = gestNar20;
            this.GestLibelleCodeNafa = gestLibelleCodeNafa;
            this.GestDept = gestDept;
            this.GestReg = gestReg;
            this.GestEmetteur = gestEmetteur;
            this.GestCategorie = gestCategorie;
            this.GestLabelFormeJuridique = gestLabelFormeJuridique;
            this.Epci = epci;
            this.EntActCodeApen = entActCodeApen;
        }

        /// <summary>
        /// Identifiant interne de l’entreprise
        /// </summary>
        /// <value>Identifiant interne de l’entreprise</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Ce numéro de gestion se décompose en trois parties, selon le schéma suivant : En partant de la droite, les trois premiers caractères donnent le code du département Les deux caractères suivants donnent l’année à laquelle le numéro a été attribué  Et les six derniers sont dédiés au numéro incrémenté 
        /// </summary>
        /// <value>Ce numéro de gestion se décompose en trois parties, selon le schéma suivant : En partant de la droite, les trois premiers caractères donnent le code du département Les deux caractères suivants donnent l’année à laquelle le numéro a été attribué  Et les six derniers sont dédiés au numéro incrémenté </value>
        [DataMember(Name = "ent_id_num_gestion", EmitDefaultValue = false)]
        public string EntIdNumGestion { get; set; }

        /// <summary>
        /// Le numéro SIREN est l’identifiant de l’unité légale. Il est composé de huit chiffres et d’un chiffre de contrôle qui permet de vérifier la validité du numéro. Pour le secteur privé, le numéro SIREN n’est pas significatif, il ne contient aucun code caractérisant l’activité ou la localisation des entreprises. Un numéro SIREN qui a été attribué à une unité légale ne sera plus jamais utilisé pour immatriculer une autre unité légale. 
        /// </summary>
        /// <value>Le numéro SIREN est l’identifiant de l’unité légale. Il est composé de huit chiffres et d’un chiffre de contrôle qui permet de vérifier la validité du numéro. Pour le secteur privé, le numéro SIREN n’est pas significatif, il ne contient aucun code caractérisant l’activité ou la localisation des entreprises. Un numéro SIREN qui a été attribué à une unité légale ne sera plus jamais utilisé pour immatriculer une autre unité légale. </value>
        [DataMember(Name = "ent_id_siren", EmitDefaultValue = false)]
        public string EntIdSiren { get; set; }

        /// <summary>
        /// Cette variable reprend l’origine de l’établissement déclarée sur les liasses de type 0 ou 2.  | Modalité | intitulé                | | - -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -| | 1        |Création                 | | 3        |Achat                    | | 4        |Apport                   | | 6        |Prise en location gérance| | 7        |Partage                  | | 8        |Reprise                  | | F        |Gérance - mandat         | 
        /// </summary>
        /// <value>Cette variable reprend l’origine de l’établissement déclarée sur les liasses de type 0 ou 2.  | Modalité | intitulé                | | - -- -- -- - | - -- -- -- -- -- -- -- -- -- -- -- -| | 1        |Création                 | | 3        |Achat                    | | 4        |Apport                   | | 6        |Prise en location gérance| | 7        |Partage                  | | 8        |Reprise                  | | F        |Gérance - mandat         | </value>
        [DataMember(Name = "ent_id_origine", EmitDefaultValue = false)]
        public string EntIdOrigine { get; set; }

        /// <summary>
        /// Numéro dans la voie
        /// </summary>
        /// <value>Numéro dans la voie</value>
        [DataMember(Name = "ent_adr_numero_voie", EmitDefaultValue = true)]
        public string EntAdrNumeroVoie { get; set; }

        /// <summary>
        /// Indice de répétition dans la voie
        /// </summary>
        /// <value>Indice de répétition dans la voie</value>
        [DataMember(Name = "ent_adr_indice_repetition", EmitDefaultValue = false)]
        public string EntAdrIndiceRepetition { get; set; }

        /// <summary>
        /// Type de voie
        /// </summary>
        /// <value>Type de voie</value>
        [DataMember(Name = "ent_adr_type_voie", EmitDefaultValue = false)]
        public string EntAdrTypeVoie { get; set; }

        /// <summary>
        /// Libellé de voie ou lieu-dit
        /// </summary>
        /// <value>Libellé de voie ou lieu-dit</value>
        [DataMember(Name = "ent_adr_adresse", EmitDefaultValue = false)]
        public string EntAdrAdresse { get; set; }

        /// <summary>
        /// Complément d’adresse
        /// </summary>
        /// <value>Complément d’adresse</value>
        [DataMember(Name = "ent_adr_adresse_complement", EmitDefaultValue = false)]
        public string EntAdrAdresseComplement { get; set; }

        /// <summary>
        /// Code postal
        /// </summary>
        /// <value>Code postal</value>
        [DataMember(Name = "ent_adr_code_postal", EmitDefaultValue = false)]
        public string EntAdrCodePostal { get; set; }

        /// <summary>
        /// Libellé de localité
        /// </summary>
        /// <value>Libellé de localité</value>
        [DataMember(Name = "ent_adr_commune", EmitDefaultValue = false)]
        public string EntAdrCommune { get; set; }

        /// <summary>
        /// Identifiant de localisation COG
        /// </summary>
        /// <value>Identifiant de localisation COG</value>
        [DataMember(Name = "ent_adr_commune_cog", EmitDefaultValue = false)]
        public string EntAdrCommuneCog { get; set; }

        /// <summary>
        /// C’est le code issu de la Nomenclature des Activités Françaises de l’Artisanat (NAFA Rèv2) pour l’activité principale au RM.
        /// </summary>
        /// <value>C’est le code issu de la Nomenclature des Activités Françaises de l’Artisanat (NAFA Rèv2) pour l’activité principale au RM.</value>
        [DataMember(Name = "ent_act_code_nafa_principal", EmitDefaultValue = false)]
        public string EntActCodeNafaPrincipal { get; set; }

        /// <summary>
        /// C’est le code issu de la Nomenclature des Activités Françaises de l’Artisanat (NAFA Rèv2) pour l’activité principale au RM.
        /// </summary>
        /// <value>C’est le code issu de la Nomenclature des Activités Françaises de l’Artisanat (NAFA Rèv2) pour l’activité principale au RM.</value>
        [DataMember(Name = "ent_act_code_nafa_secondaire_1", EmitDefaultValue = true)]
        public string EntActCodeNafaSecondaire1 { get; set; }

        /// <summary>
        /// C’est le code issu de la Nomenclature des Activités Françaises de l’Artisanat (NAFA Rèv2) pour l’activité principale au RM.
        /// </summary>
        /// <value>C’est le code issu de la Nomenclature des Activités Françaises de l’Artisanat (NAFA Rèv2) pour l’activité principale au RM.</value>
        [DataMember(Name = "ent_act_code_nafa_secondaire_2", EmitDefaultValue = true)]
        public string EntActCodeNafaSecondaire2 { get; set; }

        /// <summary>
        /// C’est le code issu de la Nomenclature des Activités Françaises de l’Artisanat (NAFA Rèv2) pour l’activité principale au RM.
        /// </summary>
        /// <value>C’est le code issu de la Nomenclature des Activités Françaises de l’Artisanat (NAFA Rèv2) pour l’activité principale au RM.</value>
        [DataMember(Name = "ent_act_code_nafa_secondaire_3", EmitDefaultValue = true)]
        public string EntActCodeNafaSecondaire3 { get; set; }

        /// <summary>
        /// Cette variable est la date d’immatriculation au Répertoire des Métiers.
        /// </summary>
        /// <value>Cette variable est la date d’immatriculation au Répertoire des Métiers.</value>
        [DataMember(Name = "ent_act_date_immat_rm", EmitDefaultValue = true)]
        public DateTime? EntActDateImmatRm { get; set; }

        /// <summary>
        /// Cette variable est la date de radiation du Répertoire des Métiers. Cette date est soit déclarative ou d’office.
        /// </summary>
        /// <value>Cette variable est la date de radiation du Répertoire des Métiers. Cette date est soit déclarative ou d’office.</value>
        [DataMember(Name = "ent_act_date_radiation", EmitDefaultValue = true)]
        public DateTime? EntActDateRadiation { get; set; }

        /// <summary>
        /// Cette variable est la date de début d’activité déclarée par le dirigeant lors de son immatriculation.
        /// </summary>
        /// <value>Cette variable est la date de début d’activité déclarée par le dirigeant lors de son immatriculation.</value>
        [DataMember(Name = "ent_act_date_debut_activite", EmitDefaultValue = true)]
        public DateTime? EntActDateDebutActivite { get; set; }

        /// <summary>
        /// Cette variable est la date de cessation d’activité de la personne morale hors dissolution, appelée mise en sommeil.
        /// </summary>
        /// <value>Cette variable est la date de cessation d’activité de la personne morale hors dissolution, appelée mise en sommeil.</value>
        [DataMember(Name = "ent_act_date_cessation_activite", EmitDefaultValue = true)]
        public DateTime? EntActDateCessationActivite { get; set; }

        /// <summary>
        /// Cette variable est la date de clôture de la liquidation déclarée lors de la dissolution de la personne morale.
        /// </summary>
        /// <value>Cette variable est la date de clôture de la liquidation déclarée lors de la dissolution de la personne morale.</value>
        [DataMember(Name = "ent_act_date_cloture_liquidation", EmitDefaultValue = true)]
        public DateTime? EntActDateClotureLiquidation { get; set; }

        /// <summary>
        /// Cette variable est la date de transfert de patrimoine  à l&#39;associé unique restant. Cette dissolution de la personne morale résulte du rassemblement de toutes les parts en une seule main.
        /// </summary>
        /// <value>Cette variable est la date de transfert de patrimoine  à l&#39;associé unique restant. Cette dissolution de la personne morale résulte du rassemblement de toutes les parts en une seule main.</value>
        [DataMember(Name = "ent_act_date_transfert_patrimoine", EmitDefaultValue = true)]
        public DateTime? EntActDateTransfertPatrimoine { get; set; }

        /// <summary>
        /// Cette variable est la date de dissolution de la personne morale.
        /// </summary>
        /// <value>Cette variable est la date de dissolution de la personne morale.</value>
        [DataMember(Name = "ent_act_date_dissolution", EmitDefaultValue = true)]
        public DateTime? EntActDateDissolution { get; set; }

        /// <summary>
        /// Cette variable indique si l’entreprise a une activité permanente ou saisonnière. L’activité est dite saisonnière si chaque année, l’entreprise cesse totalement ses activités pendant plus de 3 mois consécutifs.  | Modalité | intitulé      | | - -- -- -- - | - -- -- -- -- -- -- -| | P        |Permanente     | | S        |Saisonnière    | | NR       |Non renseignée | 
        /// </summary>
        /// <value>Cette variable indique si l’entreprise a une activité permanente ou saisonnière. L’activité est dite saisonnière si chaque année, l’entreprise cesse totalement ses activités pendant plus de 3 mois consécutifs.  | Modalité | intitulé      | | - -- -- -- - | - -- -- -- -- -- -- -| | P        |Permanente     | | S        |Saisonnière    | | NR       |Non renseignée | </value>
        [DataMember(Name = "ent_act_modalite_exercice", EmitDefaultValue = false)]
        public string EntActModaliteExercice { get; set; }

        /// <summary>
        /// Cette variable indique si l’entreprise a une activité ambulante.
        /// </summary>
        /// <value>Cette variable indique si l’entreprise a une activité ambulante.</value>
        [DataMember(Name = "ent_act_non_sedentaire", EmitDefaultValue = true)]
        public string EntActNonSedentaire { get; set; }

        /// <summary>
        /// C’est l’activité pour laquelle l’entreprise a demandé son inscription au répertoire des métiers. Cette variable présente la déclaration libre des activités principales NB : Source d’information : la variable est reprise à l’identique de la liasse déclarative (variable E71 selon la norme d’échange).  
        /// </summary>
        /// <value>C’est l’activité pour laquelle l’entreprise a demandé son inscription au répertoire des métiers. Cette variable présente la déclaration libre des activités principales NB : Source d’information : la variable est reprise à l’identique de la liasse déclarative (variable E71 selon la norme d’échange).  </value>
        [DataMember(Name = "ent_act_activite_artisanales_declarees", EmitDefaultValue = true)]
        public string EntActActiviteArtisanalesDeclarees { get; set; }

        /// <summary>
        /// C’est la désignation qui permet d’identifier une société qui possède la personnalité morale et qui permet de la distinguer des autres personnes morales et de ses associés. Toutes les sociétés commerciales, sociétés en nom collectif, sociétés en commandite simple ou par actions, sociétés à responsabilité limitée, sociétés anonymes, sociétés par actions simplifiées, sont désignées par une dénomination sociale donnée au vu de la nature de l’activité commerciale exercée ou de toute autre caractéristique, géographique par exemple, ou d’après un nom de fantaisie. La société civile est désignée par une raison sociale qui comporte tous les (ou une partie) noms des associés indéfiniment responsables qui la composent. La dénomination sociale comme la raison sociale figure dans les statuts de la société. La société en participation qui ne possède pas la personnalité morale ne peut avoir ni dénomination sociale, ni raison sociale au sens du code du commerce. Par convention, elle sera identifiée dans le répertoire avec le sigle SEP suivi soit de la dénomination d’une ou plusieurs sociétés la composant, soit d’une indication de localisation, soit d’une activité. Par convention également, les  entités  du secteur public sont identifiées par la dénomination complète de l’organisme telle qu’elle figure dans le texte (loi, décret, arrêté) actant la création. 
        /// </summary>
        /// <value>C’est la désignation qui permet d’identifier une société qui possède la personnalité morale et qui permet de la distinguer des autres personnes morales et de ses associés. Toutes les sociétés commerciales, sociétés en nom collectif, sociétés en commandite simple ou par actions, sociétés à responsabilité limitée, sociétés anonymes, sociétés par actions simplifiées, sont désignées par une dénomination sociale donnée au vu de la nature de l’activité commerciale exercée ou de toute autre caractéristique, géographique par exemple, ou d’après un nom de fantaisie. La société civile est désignée par une raison sociale qui comporte tous les (ou une partie) noms des associés indéfiniment responsables qui la composent. La dénomination sociale comme la raison sociale figure dans les statuts de la société. La société en participation qui ne possède pas la personnalité morale ne peut avoir ni dénomination sociale, ni raison sociale au sens du code du commerce. Par convention, elle sera identifiée dans le répertoire avec le sigle SEP suivi soit de la dénomination d’une ou plusieurs sociétés la composant, soit d’une indication de localisation, soit d’une activité. Par convention également, les  entités  du secteur public sont identifiées par la dénomination complète de l’organisme telle qu’elle figure dans le texte (loi, décret, arrêté) actant la création. </value>
        [DataMember(Name = "ent_act_denomination_sociale", EmitDefaultValue = true)]
        public string EntActDenominationSociale { get; set; }

        /// <summary>
        /// Un sigle est une forme réduite de la raison sociale ou de la dénomination d’une personne morale ou d’un organisme public. Il est habituellement constitué des initiales de certains des mots de la dénomination. Afin d’en faciliter la prononciation, il arrive qu’on retienne les deux ou trois premières lettres de certains mots : il s’agit alors, au sens strict, d’un acronyme ; mais l’usage a étendu à ce cas l’utilisation du terme sigle. 
        /// </summary>
        /// <value>Un sigle est une forme réduite de la raison sociale ou de la dénomination d’une personne morale ou d’un organisme public. Il est habituellement constitué des initiales de certains des mots de la dénomination. Afin d’en faciliter la prononciation, il arrive qu’on retienne les deux ou trois premières lettres de certains mots : il s’agit alors, au sens strict, d’un acronyme ; mais l’usage a étendu à ce cas l’utilisation du terme sigle. </value>
        [DataMember(Name = "ent_act_sigle", EmitDefaultValue = true)]
        public string EntActSigle { get; set; }

        /// <summary>
        /// Pour les personnes morales de droit privé, on détermine la Catégorie Juridique à partir de la rubrique « Forme Juridique » de la norme fonctionnelle d’échanges (Fiche 31).
        /// </summary>
        /// <value>Pour les personnes morales de droit privé, on détermine la Catégorie Juridique à partir de la rubrique « Forme Juridique » de la norme fonctionnelle d’échanges (Fiche 31).</value>
        [DataMember(Name = "ent_act_forme_juridique", EmitDefaultValue = true)]
        public string EntActFormeJuridique { get; set; }

        /// <summary>
        /// Gets or Sets EntEffSalarie
        /// </summary>
        [DataMember(Name = "ent_eff_salarie", EmitDefaultValue = false)]
        public long EntEffSalarie { get; set; }

        /// <summary>
        /// Gets or Sets EntEffApprenti
        /// </summary>
        [DataMember(Name = "ent_eff_apprenti", EmitDefaultValue = false)]
        public long EntEffApprenti { get; set; }

        /// <summary>
        /// Cette variable présente : *  les déclarations de cessation des paiements et les décisions intervenues dans les procédures de règlement judiciaire et de liquidation des biens en application de la loi n° 67-563 du 13 juillet 1967 *  les déclarations intervenues dans les procédures ouvertes en application de l&#39;ordonnance n° 67-820 du 23 septembre 1967 tendant à faciliter le redressement économique et financier. *  les déclarations de cessation des paiements et les décisions suivantes intervenues dans les procédures de redressement ou de liquidation judiciaires des entreprises ouvertes avant le 1er janvier 2006 en application du code de commerce. *  les déclarations intervenues dans les procédures de sauvegarde, de redressement judiciaire ou de liquidation judiciaire ouvertes à compter du 1er janvier 2006. 
        /// </summary>
        /// <value>Cette variable présente : *  les déclarations de cessation des paiements et les décisions intervenues dans les procédures de règlement judiciaire et de liquidation des biens en application de la loi n° 67-563 du 13 juillet 1967 *  les déclarations intervenues dans les procédures ouvertes en application de l&#39;ordonnance n° 67-820 du 23 septembre 1967 tendant à faciliter le redressement économique et financier. *  les déclarations de cessation des paiements et les décisions suivantes intervenues dans les procédures de redressement ou de liquidation judiciaires des entreprises ouvertes avant le 1er janvier 2006 en application du code de commerce. *  les déclarations intervenues dans les procédures de sauvegarde, de redressement judiciaire ou de liquidation judiciaire ouvertes à compter du 1er janvier 2006. </value>
        [DataMember(Name = "ent_jug_procedures", EmitDefaultValue = true)]
        public string EntJugProcedures { get; set; }

        /// <summary>
        /// Cette variable est la date d’import des données dans la base de l’API.
        /// </summary>
        /// <value>Cette variable est la date d’import des données dans la base de l’API.</value>
        [DataMember(Name = "gest_maj_fichier", EmitDefaultValue = true)]
        public DateTime? GestMajFichier { get; set; }

        /// <summary>
        /// Cette variable est la date de la dernière mise à jour de l’entreprise.
        /// </summary>
        /// <value>Cette variable est la date de la dernière mise à jour de l’entreprise.</value>
        [DataMember(Name = "gest_date_maj", EmitDefaultValue = true)]
        public DateTime? GestDateMaj { get; set; }

        /// <summary>
        /// C’est le nom de famille dévolu à la personne le jour de la déclaration de sa naissance. Ce peut être soit le nom du père, soit le nom de la mère, soit leurs deux noms accolés dans l’ordre choisi par eux dans la limite d’un nom de famille pour chacun d’eux (Article 311-21 du code civil). C’est le nom qui figure au registre de l’état civil. Cette législation est récente et a pris effet au 1er  septembre 2003. Avant cette date, le nom de la personne pouvait être qualifié de nom de naissance ou nom patronymique. 
        /// </summary>
        /// <value>C’est le nom de famille dévolu à la personne le jour de la déclaration de sa naissance. Ce peut être soit le nom du père, soit le nom de la mère, soit leurs deux noms accolés dans l’ordre choisi par eux dans la limite d’un nom de famille pour chacun d’eux (Article 311-21 du code civil). C’est le nom qui figure au registre de l’état civil. Cette législation est récente et a pris effet au 1er  septembre 2003. Avant cette date, le nom de la personne pouvait être qualifié de nom de naissance ou nom patronymique. </value>
        [DataMember(Name = "dir_id_nom_naissance", EmitDefaultValue = false)]
        public string DirIdNomNaissance { get; set; }

        /// <summary>
        /// Le nom d’usage est celui que la personne a choisi d’utiliser. *  Toute personne majeure peut ajouter à son nom, le nom de celui de ses parents qui ne lui a pas transmis le sien, *  Toute personne mariée (homme ou femme) peut ajouter à son nom celui du conjoint ou faire précéder son nom du nom du conjoint ou utiliser le seul nom de son conjoint. C’est l’article 43 de la loi n° 85-1372 du 23 décembre 1985, relative à l’égalité des époux dans les régimes matrimoniaux et des parents dans la gestion des biens des enfants mineurs, qui définit le nom d’usage. Le nom d’usage ne figure ni à l’état civil ni sur le livret de famille, l’intéressé doit informer ses interlocuteurs de sa volonté d’être identifié de cette manière en présentant les pièces justificatives nécessaires. 
        /// </summary>
        /// <value>Le nom d’usage est celui que la personne a choisi d’utiliser. *  Toute personne majeure peut ajouter à son nom, le nom de celui de ses parents qui ne lui a pas transmis le sien, *  Toute personne mariée (homme ou femme) peut ajouter à son nom celui du conjoint ou faire précéder son nom du nom du conjoint ou utiliser le seul nom de son conjoint. C’est l’article 43 de la loi n° 85-1372 du 23 décembre 1985, relative à l’égalité des époux dans les régimes matrimoniaux et des parents dans la gestion des biens des enfants mineurs, qui définit le nom d’usage. Le nom d’usage ne figure ni à l’état civil ni sur le livret de famille, l’intéressé doit informer ses interlocuteurs de sa volonté d’être identifié de cette manière en présentant les pièces justificatives nécessaires. </value>
        [DataMember(Name = "dir_id_nom_usage", EmitDefaultValue = false)]
        public string DirIdNomUsage { get; set; }

        /// <summary>
        /// C’est le (ou les) prénom(s) qui figure(nt) au registre de l’état civil.
        /// </summary>
        /// <value>C’est le (ou les) prénom(s) qui figure(nt) au registre de l’état civil.</value>
        [DataMember(Name = "dir_id_prenom_1", EmitDefaultValue = false)]
        public string DirIdPrenom1 { get; set; }

        /// <summary>
        /// C’est le (ou les) prénom(s) qui figure(nt) au registre de l’état civil.
        /// </summary>
        /// <value>C’est le (ou les) prénom(s) qui figure(nt) au registre de l’état civil.</value>
        [DataMember(Name = "dir_id_prenom_2", EmitDefaultValue = false)]
        public string DirIdPrenom2 { get; set; }

        /// <summary>
        /// C’est le (ou les) prénom(s) qui figure(nt) au registre de l’état civil.
        /// </summary>
        /// <value>C’est le (ou les) prénom(s) qui figure(nt) au registre de l’état civil.</value>
        [DataMember(Name = "dir_id_prenom_3", EmitDefaultValue = false)]
        public string DirIdPrenom3 { get; set; }

        /// <summary>
        /// C’est le nom qu’une personne utilise pour se désigner dans l’exercice de son activité, généralement littéraire ou artistique. Le pseudonyme est protégé, comme le nom de famille, contre l’usurpation venant d’un tiers.
        /// </summary>
        /// <value>C’est le nom qu’une personne utilise pour se désigner dans l’exercice de son activité, généralement littéraire ou artistique. Le pseudonyme est protégé, comme le nom de famille, contre l’usurpation venant d’un tiers.</value>
        [DataMember(Name = "dir_id_pseudonyme", EmitDefaultValue = false)]
        public string DirIdPseudonyme { get; set; }

        /// <summary>
        /// Cette variable est la date de naissance de la personne physique.
        /// </summary>
        /// <value>Cette variable est la date de naissance de la personne physique.</value>
        [DataMember(Name = "dir_id_date_naissance", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? DirIdDateNaissance { get; set; }

        /// <summary>
        /// C’est le libellé en clair de la commune/pays de naissance.
        /// </summary>
        /// <value>C’est le libellé en clair de la commune/pays de naissance.</value>
        [DataMember(Name = "dir_id_lieu_naissance", EmitDefaultValue = false)]
        public string DirIdLieuNaissance { get; set; }

        /// <summary>
        /// En cas de double immatriculation, cette variable indique le choix du registre où est déposée la déclaration d’affectation de patrimoine  |Modalité|Intitulé| |- -- -- -- -|- -- -- -- -| |1       |RCS     | |2       |RM      | 
        /// </summary>
        /// <value>En cas de double immatriculation, cette variable indique le choix du registre où est déposée la déclaration d’affectation de patrimoine  |Modalité|Intitulé| |- -- -- -- -|- -- -- -- -| |1       |RCS     | |2       |RM      | </value>
        [DataMember(Name = "eirl_init_nom_registre", EmitDefaultValue = true)]
        public string EirlInitNomRegistre { get; set; }

        /// <summary>
        /// C’est la dénomination de l’EIRL. Elle incorpore le nom de l’entrepreneur précédé ou suivi immédiatement des mots : « Entrepreneur Individuel à Responsabilité Limitée » ou des initiales : « EIRL ». 
        /// </summary>
        /// <value>C’est la dénomination de l’EIRL. Elle incorpore le nom de l’entrepreneur précédé ou suivi immédiatement des mots : « Entrepreneur Individuel à Responsabilité Limitée » ou des initiales : « EIRL ». </value>
        [DataMember(Name = "eirl_denomination", EmitDefaultValue = true)]
        public string EirlDenomination { get; set; }

        /// <summary>
        /// C’est l’objet de l’activité professionnelle à laquelle le patrimoine est affecté.
        /// </summary>
        /// <value>C’est l’objet de l’activité professionnelle à laquelle le patrimoine est affecté.</value>
        [DataMember(Name = "eirl_objet_dap", EmitDefaultValue = true)]
        public string EirlObjetDap { get; set; }

        /// <summary>
        /// Cette variable correspond à la date d’effet du dépôt de la déclaration d’affectation de patrimoine.
        /// </summary>
        /// <value>Cette variable correspond à la date d’effet du dépôt de la déclaration d’affectation de patrimoine.</value>
        [DataMember(Name = "eirl_date_depot", EmitDefaultValue = true)]
        public DateTime? EirlDateDepot { get; set; }

        /// <summary>
        /// Cette variable est l’intitulé du secteur d’activité selon le code NAR 4.
        /// </summary>
        /// <value>Cette variable est l’intitulé du secteur d’activité selon le code NAR 4.</value>
        [DataMember(Name = "gest_nar_4", EmitDefaultValue = false)]
        public string GestNar4 { get; set; }

        /// <summary>
        /// Cette variable est l’intitulé du secteur d’activité selon le code NAR 20.
        /// </summary>
        /// <value>Cette variable est l’intitulé du secteur d’activité selon le code NAR 20.</value>
        [DataMember(Name = "gest_nar_20", EmitDefaultValue = false)]
        public string GestNar20 { get; set; }

        /// <summary>
        /// Cette variable est le libellé du code NAFA.
        /// </summary>
        /// <value>Cette variable est le libellé du code NAFA.</value>
        [DataMember(Name = "gest_libelle_code_nafa", EmitDefaultValue = false)]
        public string GestLibelleCodeNafa { get; set; }

        /// <summary>
        /// Département de l’entreprise.
        /// </summary>
        /// <value>Département de l’entreprise.</value>
        [DataMember(Name = "gest_dept", EmitDefaultValue = false)]
        public string GestDept { get; set; }

        /// <summary>
        /// Région de l’entreprise.
        /// </summary>
        /// <value>Région de l’entreprise.</value>
        [DataMember(Name = "gest_reg", EmitDefaultValue = false)]
        public string GestReg { get; set; }

        /// <summary>
        /// Code du CFE qui a inscrit l’entreprise.
        /// </summary>
        /// <value>Code du CFE qui a inscrit l’entreprise.</value>
        [DataMember(Name = "gest_emetteur", EmitDefaultValue = false)]
        public string GestEmetteur { get; set; }

        /// <summary>
        /// Intitulé de la forme juridique
        /// </summary>
        /// <value>Intitulé de la forme juridique</value>
        [DataMember(Name = "gest_label_forme_juridique", EmitDefaultValue = false)]
        public string GestLabelFormeJuridique { get; set; }

        /// <summary>
        /// Libellé de l’établissement public de coopération intercommunale correspondant au code officiel géographique de l’entreprise.
        /// </summary>
        /// <value>Libellé de l’établissement public de coopération intercommunale correspondant au code officiel géographique de l’entreprise.</value>
        [DataMember(Name = "epci", EmitDefaultValue = false)]
        public string Epci { get; set; }

        /// <summary>
        /// C’est le code issu de la Norme des Activités des Entreprises de l’INSEE, définissant l’Activité Principale de l’Entreprise.
        /// </summary>
        /// <value>C’est le code issu de la Norme des Activités des Entreprises de l’INSEE, définissant l’Activité Principale de l’Entreprise.</value>
        [DataMember(Name = "ent_act_code_apen", EmitDefaultValue = false)]
        public string EntActCodeApen { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Entreprise {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EntIdNumGestion: ").Append(EntIdNumGestion).Append("\n");
            sb.Append("  EntIdSiren: ").Append(EntIdSiren).Append("\n");
            sb.Append("  EntIdOrigine: ").Append(EntIdOrigine).Append("\n");
            sb.Append("  EntAdrNumeroVoie: ").Append(EntAdrNumeroVoie).Append("\n");
            sb.Append("  EntAdrIndiceRepetition: ").Append(EntAdrIndiceRepetition).Append("\n");
            sb.Append("  EntAdrTypeVoie: ").Append(EntAdrTypeVoie).Append("\n");
            sb.Append("  EntAdrAdresse: ").Append(EntAdrAdresse).Append("\n");
            sb.Append("  EntAdrAdresseComplement: ").Append(EntAdrAdresseComplement).Append("\n");
            sb.Append("  EntAdrCodePostal: ").Append(EntAdrCodePostal).Append("\n");
            sb.Append("  EntAdrCommune: ").Append(EntAdrCommune).Append("\n");
            sb.Append("  EntAdrCommuneCog: ").Append(EntAdrCommuneCog).Append("\n");
            sb.Append("  EntActCodeNafaPrincipal: ").Append(EntActCodeNafaPrincipal).Append("\n");
            sb.Append("  EntActCodeNafaSecondaire1: ").Append(EntActCodeNafaSecondaire1).Append("\n");
            sb.Append("  EntActCodeNafaSecondaire2: ").Append(EntActCodeNafaSecondaire2).Append("\n");
            sb.Append("  EntActCodeNafaSecondaire3: ").Append(EntActCodeNafaSecondaire3).Append("\n");
            sb.Append("  EntActDateImmatRm: ").Append(EntActDateImmatRm).Append("\n");
            sb.Append("  EntActDateRadiation: ").Append(EntActDateRadiation).Append("\n");
            sb.Append("  EntActDateDebutActivite: ").Append(EntActDateDebutActivite).Append("\n");
            sb.Append("  EntActDateCessationActivite: ").Append(EntActDateCessationActivite).Append("\n");
            sb.Append("  EntActDateClotureLiquidation: ").Append(EntActDateClotureLiquidation).Append("\n");
            sb.Append("  EntActDateTransfertPatrimoine: ").Append(EntActDateTransfertPatrimoine).Append("\n");
            sb.Append("  EntActDateDissolution: ").Append(EntActDateDissolution).Append("\n");
            sb.Append("  EntActModaliteExercice: ").Append(EntActModaliteExercice).Append("\n");
            sb.Append("  EntActNonSedentaire: ").Append(EntActNonSedentaire).Append("\n");
            sb.Append("  EntActActiviteArtisanalesDeclarees: ").Append(EntActActiviteArtisanalesDeclarees).Append("\n");
            sb.Append("  EntActDenominationSociale: ").Append(EntActDenominationSociale).Append("\n");
            sb.Append("  EntActSigle: ").Append(EntActSigle).Append("\n");
            sb.Append("  EntActFormeJuridique: ").Append(EntActFormeJuridique).Append("\n");
            sb.Append("  EntEffSalarie: ").Append(EntEffSalarie).Append("\n");
            sb.Append("  EntEffApprenti: ").Append(EntEffApprenti).Append("\n");
            sb.Append("  EntJugProcedures: ").Append(EntJugProcedures).Append("\n");
            sb.Append("  GestMajFichier: ").Append(GestMajFichier).Append("\n");
            sb.Append("  GestDateMaj: ").Append(GestDateMaj).Append("\n");
            sb.Append("  DirQaQualification: ").Append(DirQaQualification).Append("\n");
            sb.Append("  DirIdNomNaissance: ").Append(DirIdNomNaissance).Append("\n");
            sb.Append("  DirIdNomUsage: ").Append(DirIdNomUsage).Append("\n");
            sb.Append("  DirIdPrenom1: ").Append(DirIdPrenom1).Append("\n");
            sb.Append("  DirIdPrenom2: ").Append(DirIdPrenom2).Append("\n");
            sb.Append("  DirIdPrenom3: ").Append(DirIdPrenom3).Append("\n");
            sb.Append("  DirIdPseudonyme: ").Append(DirIdPseudonyme).Append("\n");
            sb.Append("  DirIdDateNaissance: ").Append(DirIdDateNaissance).Append("\n");
            sb.Append("  DirIdLieuNaissance: ").Append(DirIdLieuNaissance).Append("\n");
            sb.Append("  EirlInitNomRegistre: ").Append(EirlInitNomRegistre).Append("\n");
            sb.Append("  EirlDenomination: ").Append(EirlDenomination).Append("\n");
            sb.Append("  EirlObjetDap: ").Append(EirlObjetDap).Append("\n");
            sb.Append("  EirlDateDepot: ").Append(EirlDateDepot).Append("\n");
            sb.Append("  GestNar4: ").Append(GestNar4).Append("\n");
            sb.Append("  GestNar20: ").Append(GestNar20).Append("\n");
            sb.Append("  GestLibelleCodeNafa: ").Append(GestLibelleCodeNafa).Append("\n");
            sb.Append("  GestDept: ").Append(GestDept).Append("\n");
            sb.Append("  GestReg: ").Append(GestReg).Append("\n");
            sb.Append("  GestEmetteur: ").Append(GestEmetteur).Append("\n");
            sb.Append("  GestCategorie: ").Append(GestCategorie).Append("\n");
            sb.Append("  GestLabelFormeJuridique: ").Append(GestLabelFormeJuridique).Append("\n");
            sb.Append("  Epci: ").Append(Epci).Append("\n");
            sb.Append("  EntActCodeApen: ").Append(EntActCodeApen).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Entreprise);
        }

        /// <summary>
        /// Returns true if Entreprise instances are equal
        /// </summary>
        /// <param name="input">Instance of Entreprise to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Entreprise input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.EntIdNumGestion == input.EntIdNumGestion ||
                    (this.EntIdNumGestion != null &&
                    this.EntIdNumGestion.Equals(input.EntIdNumGestion))
                ) && 
                (
                    this.EntIdSiren == input.EntIdSiren ||
                    (this.EntIdSiren != null &&
                    this.EntIdSiren.Equals(input.EntIdSiren))
                ) && 
                (
                    this.EntIdOrigine == input.EntIdOrigine ||
                    (this.EntIdOrigine != null &&
                    this.EntIdOrigine.Equals(input.EntIdOrigine))
                ) && 
                (
                    this.EntAdrNumeroVoie == input.EntAdrNumeroVoie ||
                    (this.EntAdrNumeroVoie != null &&
                    this.EntAdrNumeroVoie.Equals(input.EntAdrNumeroVoie))
                ) && 
                (
                    this.EntAdrIndiceRepetition == input.EntAdrIndiceRepetition ||
                    (this.EntAdrIndiceRepetition != null &&
                    this.EntAdrIndiceRepetition.Equals(input.EntAdrIndiceRepetition))
                ) && 
                (
                    this.EntAdrTypeVoie == input.EntAdrTypeVoie ||
                    (this.EntAdrTypeVoie != null &&
                    this.EntAdrTypeVoie.Equals(input.EntAdrTypeVoie))
                ) && 
                (
                    this.EntAdrAdresse == input.EntAdrAdresse ||
                    (this.EntAdrAdresse != null &&
                    this.EntAdrAdresse.Equals(input.EntAdrAdresse))
                ) && 
                (
                    this.EntAdrAdresseComplement == input.EntAdrAdresseComplement ||
                    (this.EntAdrAdresseComplement != null &&
                    this.EntAdrAdresseComplement.Equals(input.EntAdrAdresseComplement))
                ) && 
                (
                    this.EntAdrCodePostal == input.EntAdrCodePostal ||
                    (this.EntAdrCodePostal != null &&
                    this.EntAdrCodePostal.Equals(input.EntAdrCodePostal))
                ) && 
                (
                    this.EntAdrCommune == input.EntAdrCommune ||
                    (this.EntAdrCommune != null &&
                    this.EntAdrCommune.Equals(input.EntAdrCommune))
                ) && 
                (
                    this.EntAdrCommuneCog == input.EntAdrCommuneCog ||
                    (this.EntAdrCommuneCog != null &&
                    this.EntAdrCommuneCog.Equals(input.EntAdrCommuneCog))
                ) && 
                (
                    this.EntActCodeNafaPrincipal == input.EntActCodeNafaPrincipal ||
                    (this.EntActCodeNafaPrincipal != null &&
                    this.EntActCodeNafaPrincipal.Equals(input.EntActCodeNafaPrincipal))
                ) && 
                (
                    this.EntActCodeNafaSecondaire1 == input.EntActCodeNafaSecondaire1 ||
                    (this.EntActCodeNafaSecondaire1 != null &&
                    this.EntActCodeNafaSecondaire1.Equals(input.EntActCodeNafaSecondaire1))
                ) && 
                (
                    this.EntActCodeNafaSecondaire2 == input.EntActCodeNafaSecondaire2 ||
                    (this.EntActCodeNafaSecondaire2 != null &&
                    this.EntActCodeNafaSecondaire2.Equals(input.EntActCodeNafaSecondaire2))
                ) && 
                (
                    this.EntActCodeNafaSecondaire3 == input.EntActCodeNafaSecondaire3 ||
                    (this.EntActCodeNafaSecondaire3 != null &&
                    this.EntActCodeNafaSecondaire3.Equals(input.EntActCodeNafaSecondaire3))
                ) && 
                (
                    this.EntActDateImmatRm == input.EntActDateImmatRm ||
                    (this.EntActDateImmatRm != null &&
                    this.EntActDateImmatRm.Equals(input.EntActDateImmatRm))
                ) && 
                (
                    this.EntActDateRadiation == input.EntActDateRadiation ||
                    (this.EntActDateRadiation != null &&
                    this.EntActDateRadiation.Equals(input.EntActDateRadiation))
                ) && 
                (
                    this.EntActDateDebutActivite == input.EntActDateDebutActivite ||
                    (this.EntActDateDebutActivite != null &&
                    this.EntActDateDebutActivite.Equals(input.EntActDateDebutActivite))
                ) && 
                (
                    this.EntActDateCessationActivite == input.EntActDateCessationActivite ||
                    (this.EntActDateCessationActivite != null &&
                    this.EntActDateCessationActivite.Equals(input.EntActDateCessationActivite))
                ) && 
                (
                    this.EntActDateClotureLiquidation == input.EntActDateClotureLiquidation ||
                    (this.EntActDateClotureLiquidation != null &&
                    this.EntActDateClotureLiquidation.Equals(input.EntActDateClotureLiquidation))
                ) && 
                (
                    this.EntActDateTransfertPatrimoine == input.EntActDateTransfertPatrimoine ||
                    (this.EntActDateTransfertPatrimoine != null &&
                    this.EntActDateTransfertPatrimoine.Equals(input.EntActDateTransfertPatrimoine))
                ) && 
                (
                    this.EntActDateDissolution == input.EntActDateDissolution ||
                    (this.EntActDateDissolution != null &&
                    this.EntActDateDissolution.Equals(input.EntActDateDissolution))
                ) && 
                (
                    this.EntActModaliteExercice == input.EntActModaliteExercice ||
                    (this.EntActModaliteExercice != null &&
                    this.EntActModaliteExercice.Equals(input.EntActModaliteExercice))
                ) && 
                (
                    this.EntActNonSedentaire == input.EntActNonSedentaire ||
                    (this.EntActNonSedentaire != null &&
                    this.EntActNonSedentaire.Equals(input.EntActNonSedentaire))
                ) && 
                (
                    this.EntActActiviteArtisanalesDeclarees == input.EntActActiviteArtisanalesDeclarees ||
                    (this.EntActActiviteArtisanalesDeclarees != null &&
                    this.EntActActiviteArtisanalesDeclarees.Equals(input.EntActActiviteArtisanalesDeclarees))
                ) && 
                (
                    this.EntActDenominationSociale == input.EntActDenominationSociale ||
                    (this.EntActDenominationSociale != null &&
                    this.EntActDenominationSociale.Equals(input.EntActDenominationSociale))
                ) && 
                (
                    this.EntActSigle == input.EntActSigle ||
                    (this.EntActSigle != null &&
                    this.EntActSigle.Equals(input.EntActSigle))
                ) && 
                (
                    this.EntActFormeJuridique == input.EntActFormeJuridique ||
                    (this.EntActFormeJuridique != null &&
                    this.EntActFormeJuridique.Equals(input.EntActFormeJuridique))
                ) && 
                (
                    this.EntEffSalarie == input.EntEffSalarie ||
                    this.EntEffSalarie.Equals(input.EntEffSalarie)
                ) && 
                (
                    this.EntEffApprenti == input.EntEffApprenti ||
                    this.EntEffApprenti.Equals(input.EntEffApprenti)
                ) && 
                (
                    this.EntJugProcedures == input.EntJugProcedures ||
                    (this.EntJugProcedures != null &&
                    this.EntJugProcedures.Equals(input.EntJugProcedures))
                ) && 
                (
                    this.GestMajFichier == input.GestMajFichier ||
                    (this.GestMajFichier != null &&
                    this.GestMajFichier.Equals(input.GestMajFichier))
                ) && 
                (
                    this.GestDateMaj == input.GestDateMaj ||
                    (this.GestDateMaj != null &&
                    this.GestDateMaj.Equals(input.GestDateMaj))
                ) && 
                (
                    this.DirQaQualification == input.DirQaQualification ||
                    this.DirQaQualification.Equals(input.DirQaQualification)
                ) && 
                (
                    this.DirIdNomNaissance == input.DirIdNomNaissance ||
                    (this.DirIdNomNaissance != null &&
                    this.DirIdNomNaissance.Equals(input.DirIdNomNaissance))
                ) && 
                (
                    this.DirIdNomUsage == input.DirIdNomUsage ||
                    (this.DirIdNomUsage != null &&
                    this.DirIdNomUsage.Equals(input.DirIdNomUsage))
                ) && 
                (
                    this.DirIdPrenom1 == input.DirIdPrenom1 ||
                    (this.DirIdPrenom1 != null &&
                    this.DirIdPrenom1.Equals(input.DirIdPrenom1))
                ) && 
                (
                    this.DirIdPrenom2 == input.DirIdPrenom2 ||
                    (this.DirIdPrenom2 != null &&
                    this.DirIdPrenom2.Equals(input.DirIdPrenom2))
                ) && 
                (
                    this.DirIdPrenom3 == input.DirIdPrenom3 ||
                    (this.DirIdPrenom3 != null &&
                    this.DirIdPrenom3.Equals(input.DirIdPrenom3))
                ) && 
                (
                    this.DirIdPseudonyme == input.DirIdPseudonyme ||
                    (this.DirIdPseudonyme != null &&
                    this.DirIdPseudonyme.Equals(input.DirIdPseudonyme))
                ) && 
                (
                    this.DirIdDateNaissance == input.DirIdDateNaissance ||
                    (this.DirIdDateNaissance != null &&
                    this.DirIdDateNaissance.Equals(input.DirIdDateNaissance))
                ) && 
                (
                    this.DirIdLieuNaissance == input.DirIdLieuNaissance ||
                    (this.DirIdLieuNaissance != null &&
                    this.DirIdLieuNaissance.Equals(input.DirIdLieuNaissance))
                ) && 
                (
                    this.EirlInitNomRegistre == input.EirlInitNomRegistre ||
                    (this.EirlInitNomRegistre != null &&
                    this.EirlInitNomRegistre.Equals(input.EirlInitNomRegistre))
                ) && 
                (
                    this.EirlDenomination == input.EirlDenomination ||
                    (this.EirlDenomination != null &&
                    this.EirlDenomination.Equals(input.EirlDenomination))
                ) && 
                (
                    this.EirlObjetDap == input.EirlObjetDap ||
                    (this.EirlObjetDap != null &&
                    this.EirlObjetDap.Equals(input.EirlObjetDap))
                ) && 
                (
                    this.EirlDateDepot == input.EirlDateDepot ||
                    (this.EirlDateDepot != null &&
                    this.EirlDateDepot.Equals(input.EirlDateDepot))
                ) && 
                (
                    this.GestNar4 == input.GestNar4 ||
                    (this.GestNar4 != null &&
                    this.GestNar4.Equals(input.GestNar4))
                ) && 
                (
                    this.GestNar20 == input.GestNar20 ||
                    (this.GestNar20 != null &&
                    this.GestNar20.Equals(input.GestNar20))
                ) && 
                (
                    this.GestLibelleCodeNafa == input.GestLibelleCodeNafa ||
                    (this.GestLibelleCodeNafa != null &&
                    this.GestLibelleCodeNafa.Equals(input.GestLibelleCodeNafa))
                ) && 
                (
                    this.GestDept == input.GestDept ||
                    (this.GestDept != null &&
                    this.GestDept.Equals(input.GestDept))
                ) && 
                (
                    this.GestReg == input.GestReg ||
                    (this.GestReg != null &&
                    this.GestReg.Equals(input.GestReg))
                ) && 
                (
                    this.GestEmetteur == input.GestEmetteur ||
                    (this.GestEmetteur != null &&
                    this.GestEmetteur.Equals(input.GestEmetteur))
                ) && 
                (
                    this.GestCategorie == input.GestCategorie ||
                    this.GestCategorie.Equals(input.GestCategorie)
                ) && 
                (
                    this.GestLabelFormeJuridique == input.GestLabelFormeJuridique ||
                    (this.GestLabelFormeJuridique != null &&
                    this.GestLabelFormeJuridique.Equals(input.GestLabelFormeJuridique))
                ) && 
                (
                    this.Epci == input.Epci ||
                    (this.Epci != null &&
                    this.Epci.Equals(input.Epci))
                ) && 
                (
                    this.EntActCodeApen == input.EntActCodeApen ||
                    (this.EntActCodeApen != null &&
                    this.EntActCodeApen.Equals(input.EntActCodeApen))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.EntIdNumGestion != null)
                {
                    hashCode = (hashCode * 59) + this.EntIdNumGestion.GetHashCode();
                }
                if (this.EntIdSiren != null)
                {
                    hashCode = (hashCode * 59) + this.EntIdSiren.GetHashCode();
                }
                if (this.EntIdOrigine != null)
                {
                    hashCode = (hashCode * 59) + this.EntIdOrigine.GetHashCode();
                }
                if (this.EntAdrNumeroVoie != null)
                {
                    hashCode = (hashCode * 59) + this.EntAdrNumeroVoie.GetHashCode();
                }
                if (this.EntAdrIndiceRepetition != null)
                {
                    hashCode = (hashCode * 59) + this.EntAdrIndiceRepetition.GetHashCode();
                }
                if (this.EntAdrTypeVoie != null)
                {
                    hashCode = (hashCode * 59) + this.EntAdrTypeVoie.GetHashCode();
                }
                if (this.EntAdrAdresse != null)
                {
                    hashCode = (hashCode * 59) + this.EntAdrAdresse.GetHashCode();
                }
                if (this.EntAdrAdresseComplement != null)
                {
                    hashCode = (hashCode * 59) + this.EntAdrAdresseComplement.GetHashCode();
                }
                if (this.EntAdrCodePostal != null)
                {
                    hashCode = (hashCode * 59) + this.EntAdrCodePostal.GetHashCode();
                }
                if (this.EntAdrCommune != null)
                {
                    hashCode = (hashCode * 59) + this.EntAdrCommune.GetHashCode();
                }
                if (this.EntAdrCommuneCog != null)
                {
                    hashCode = (hashCode * 59) + this.EntAdrCommuneCog.GetHashCode();
                }
                if (this.EntActCodeNafaPrincipal != null)
                {
                    hashCode = (hashCode * 59) + this.EntActCodeNafaPrincipal.GetHashCode();
                }
                if (this.EntActCodeNafaSecondaire1 != null)
                {
                    hashCode = (hashCode * 59) + this.EntActCodeNafaSecondaire1.GetHashCode();
                }
                if (this.EntActCodeNafaSecondaire2 != null)
                {
                    hashCode = (hashCode * 59) + this.EntActCodeNafaSecondaire2.GetHashCode();
                }
                if (this.EntActCodeNafaSecondaire3 != null)
                {
                    hashCode = (hashCode * 59) + this.EntActCodeNafaSecondaire3.GetHashCode();
                }
                if (this.EntActDateImmatRm != null)
                {
                    hashCode = (hashCode * 59) + this.EntActDateImmatRm.GetHashCode();
                }
                if (this.EntActDateRadiation != null)
                {
                    hashCode = (hashCode * 59) + this.EntActDateRadiation.GetHashCode();
                }
                if (this.EntActDateDebutActivite != null)
                {
                    hashCode = (hashCode * 59) + this.EntActDateDebutActivite.GetHashCode();
                }
                if (this.EntActDateCessationActivite != null)
                {
                    hashCode = (hashCode * 59) + this.EntActDateCessationActivite.GetHashCode();
                }
                if (this.EntActDateClotureLiquidation != null)
                {
                    hashCode = (hashCode * 59) + this.EntActDateClotureLiquidation.GetHashCode();
                }
                if (this.EntActDateTransfertPatrimoine != null)
                {
                    hashCode = (hashCode * 59) + this.EntActDateTransfertPatrimoine.GetHashCode();
                }
                if (this.EntActDateDissolution != null)
                {
                    hashCode = (hashCode * 59) + this.EntActDateDissolution.GetHashCode();
                }
                if (this.EntActModaliteExercice != null)
                {
                    hashCode = (hashCode * 59) + this.EntActModaliteExercice.GetHashCode();
                }
                if (this.EntActNonSedentaire != null)
                {
                    hashCode = (hashCode * 59) + this.EntActNonSedentaire.GetHashCode();
                }
                if (this.EntActActiviteArtisanalesDeclarees != null)
                {
                    hashCode = (hashCode * 59) + this.EntActActiviteArtisanalesDeclarees.GetHashCode();
                }
                if (this.EntActDenominationSociale != null)
                {
                    hashCode = (hashCode * 59) + this.EntActDenominationSociale.GetHashCode();
                }
                if (this.EntActSigle != null)
                {
                    hashCode = (hashCode * 59) + this.EntActSigle.GetHashCode();
                }
                if (this.EntActFormeJuridique != null)
                {
                    hashCode = (hashCode * 59) + this.EntActFormeJuridique.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EntEffSalarie.GetHashCode();
                hashCode = (hashCode * 59) + this.EntEffApprenti.GetHashCode();
                if (this.EntJugProcedures != null)
                {
                    hashCode = (hashCode * 59) + this.EntJugProcedures.GetHashCode();
                }
                if (this.GestMajFichier != null)
                {
                    hashCode = (hashCode * 59) + this.GestMajFichier.GetHashCode();
                }
                if (this.GestDateMaj != null)
                {
                    hashCode = (hashCode * 59) + this.GestDateMaj.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DirQaQualification.GetHashCode();
                if (this.DirIdNomNaissance != null)
                {
                    hashCode = (hashCode * 59) + this.DirIdNomNaissance.GetHashCode();
                }
                if (this.DirIdNomUsage != null)
                {
                    hashCode = (hashCode * 59) + this.DirIdNomUsage.GetHashCode();
                }
                if (this.DirIdPrenom1 != null)
                {
                    hashCode = (hashCode * 59) + this.DirIdPrenom1.GetHashCode();
                }
                if (this.DirIdPrenom2 != null)
                {
                    hashCode = (hashCode * 59) + this.DirIdPrenom2.GetHashCode();
                }
                if (this.DirIdPrenom3 != null)
                {
                    hashCode = (hashCode * 59) + this.DirIdPrenom3.GetHashCode();
                }
                if (this.DirIdPseudonyme != null)
                {
                    hashCode = (hashCode * 59) + this.DirIdPseudonyme.GetHashCode();
                }
                if (this.DirIdDateNaissance != null)
                {
                    hashCode = (hashCode * 59) + this.DirIdDateNaissance.GetHashCode();
                }
                if (this.DirIdLieuNaissance != null)
                {
                    hashCode = (hashCode * 59) + this.DirIdLieuNaissance.GetHashCode();
                }
                if (this.EirlInitNomRegistre != null)
                {
                    hashCode = (hashCode * 59) + this.EirlInitNomRegistre.GetHashCode();
                }
                if (this.EirlDenomination != null)
                {
                    hashCode = (hashCode * 59) + this.EirlDenomination.GetHashCode();
                }
                if (this.EirlObjetDap != null)
                {
                    hashCode = (hashCode * 59) + this.EirlObjetDap.GetHashCode();
                }
                if (this.EirlDateDepot != null)
                {
                    hashCode = (hashCode * 59) + this.EirlDateDepot.GetHashCode();
                }
                if (this.GestNar4 != null)
                {
                    hashCode = (hashCode * 59) + this.GestNar4.GetHashCode();
                }
                if (this.GestNar20 != null)
                {
                    hashCode = (hashCode * 59) + this.GestNar20.GetHashCode();
                }
                if (this.GestLibelleCodeNafa != null)
                {
                    hashCode = (hashCode * 59) + this.GestLibelleCodeNafa.GetHashCode();
                }
                if (this.GestDept != null)
                {
                    hashCode = (hashCode * 59) + this.GestDept.GetHashCode();
                }
                if (this.GestReg != null)
                {
                    hashCode = (hashCode * 59) + this.GestReg.GetHashCode();
                }
                if (this.GestEmetteur != null)
                {
                    hashCode = (hashCode * 59) + this.GestEmetteur.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GestCategorie.GetHashCode();
                if (this.GestLabelFormeJuridique != null)
                {
                    hashCode = (hashCode * 59) + this.GestLabelFormeJuridique.GetHashCode();
                }
                if (this.Epci != null)
                {
                    hashCode = (hashCode * 59) + this.Epci.GetHashCode();
                }
                if (this.EntActCodeApen != null)
                {
                    hashCode = (hashCode * 59) + this.EntActCodeApen.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // EntIdNumGestion (string) maxLength
            if (this.EntIdNumGestion != null && this.EntIdNumGestion.Length > 11)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntIdNumGestion, length must be less than 11.", new [] { "EntIdNumGestion" });
            }

            // EntIdSiren (string) maxLength
            if (this.EntIdSiren != null && this.EntIdSiren.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntIdSiren, length must be less than 9.", new [] { "EntIdSiren" });
            }

            // EntIdSiren (string) minLength
            if (this.EntIdSiren != null && this.EntIdSiren.Length < 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntIdSiren, length must be greater than 9.", new [] { "EntIdSiren" });
            }

            // EntIdOrigine (string) maxLength
            if (this.EntIdOrigine != null && this.EntIdOrigine.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntIdOrigine, length must be less than 1.", new [] { "EntIdOrigine" });
            }

            // EntIdOrigine (string) minLength
            if (this.EntIdOrigine != null && this.EntIdOrigine.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntIdOrigine, length must be greater than 1.", new [] { "EntIdOrigine" });
            }

            // EntAdrIndiceRepetition (string) maxLength
            if (this.EntAdrIndiceRepetition != null && this.EntAdrIndiceRepetition.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntAdrIndiceRepetition, length must be less than 1.", new [] { "EntAdrIndiceRepetition" });
            }

            // EntAdrIndiceRepetition (string) minLength
            if (this.EntAdrIndiceRepetition != null && this.EntAdrIndiceRepetition.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntAdrIndiceRepetition, length must be greater than 1.", new [] { "EntAdrIndiceRepetition" });
            }

            // EntAdrTypeVoie (string) maxLength
            if (this.EntAdrTypeVoie != null && this.EntAdrTypeVoie.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntAdrTypeVoie, length must be less than 4.", new [] { "EntAdrTypeVoie" });
            }

            // EntAdrTypeVoie (string) minLength
            if (this.EntAdrTypeVoie != null && this.EntAdrTypeVoie.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntAdrTypeVoie, length must be greater than 0.", new [] { "EntAdrTypeVoie" });
            }

            // EntAdrAdresse (string) maxLength
            if (this.EntAdrAdresse != null && this.EntAdrAdresse.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntAdrAdresse, length must be less than 32.", new [] { "EntAdrAdresse" });
            }

            // EntAdrAdresse (string) minLength
            if (this.EntAdrAdresse != null && this.EntAdrAdresse.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntAdrAdresse, length must be greater than 1.", new [] { "EntAdrAdresse" });
            }

            // EntAdrAdresseComplement (string) maxLength
            if (this.EntAdrAdresseComplement != null && this.EntAdrAdresseComplement.Length > 38)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntAdrAdresseComplement, length must be less than 38.", new [] { "EntAdrAdresseComplement" });
            }

            // EntAdrAdresseComplement (string) minLength
            if (this.EntAdrAdresseComplement != null && this.EntAdrAdresseComplement.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntAdrAdresseComplement, length must be greater than 0.", new [] { "EntAdrAdresseComplement" });
            }

            // EntAdrCodePostal (string) maxLength
            if (this.EntAdrCodePostal != null && this.EntAdrCodePostal.Length > 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntAdrCodePostal, length must be less than 9.", new [] { "EntAdrCodePostal" });
            }

            // EntAdrCodePostal (string) minLength
            if (this.EntAdrCodePostal != null && this.EntAdrCodePostal.Length < 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntAdrCodePostal, length must be greater than 9.", new [] { "EntAdrCodePostal" });
            }

            // EntAdrCommune (string) maxLength
            if (this.EntAdrCommune != null && this.EntAdrCommune.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntAdrCommune, length must be less than 32.", new [] { "EntAdrCommune" });
            }

            // EntAdrCommune (string) minLength
            if (this.EntAdrCommune != null && this.EntAdrCommune.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntAdrCommune, length must be greater than 1.", new [] { "EntAdrCommune" });
            }

            // EntAdrCommuneCog (string) maxLength
            if (this.EntAdrCommuneCog != null && this.EntAdrCommuneCog.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntAdrCommuneCog, length must be less than 5.", new [] { "EntAdrCommuneCog" });
            }

            // EntAdrCommuneCog (string) minLength
            if (this.EntAdrCommuneCog != null && this.EntAdrCommuneCog.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntAdrCommuneCog, length must be greater than 5.", new [] { "EntAdrCommuneCog" });
            }

            // EntActCodeNafaPrincipal (string) maxLength
            if (this.EntActCodeNafaPrincipal != null && this.EntActCodeNafaPrincipal.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntActCodeNafaPrincipal, length must be less than 6.", new [] { "EntActCodeNafaPrincipal" });
            }

            // EntActCodeNafaPrincipal (string) minLength
            if (this.EntActCodeNafaPrincipal != null && this.EntActCodeNafaPrincipal.Length < 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntActCodeNafaPrincipal, length must be greater than 6.", new [] { "EntActCodeNafaPrincipal" });
            }

            // EntActCodeNafaSecondaire1 (string) maxLength
            if (this.EntActCodeNafaSecondaire1 != null && this.EntActCodeNafaSecondaire1.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntActCodeNafaSecondaire1, length must be less than 6.", new [] { "EntActCodeNafaSecondaire1" });
            }

            // EntActCodeNafaSecondaire2 (string) maxLength
            if (this.EntActCodeNafaSecondaire2 != null && this.EntActCodeNafaSecondaire2.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntActCodeNafaSecondaire2, length must be less than 6.", new [] { "EntActCodeNafaSecondaire2" });
            }

            // EntActCodeNafaSecondaire3 (string) maxLength
            if (this.EntActCodeNafaSecondaire3 != null && this.EntActCodeNafaSecondaire3.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntActCodeNafaSecondaire3, length must be less than 6.", new [] { "EntActCodeNafaSecondaire3" });
            }

            // EntActModaliteExercice (string) maxLength
            if (this.EntActModaliteExercice != null && this.EntActModaliteExercice.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntActModaliteExercice, length must be less than 2.", new [] { "EntActModaliteExercice" });
            }

            // EntActModaliteExercice (string) minLength
            if (this.EntActModaliteExercice != null && this.EntActModaliteExercice.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntActModaliteExercice, length must be greater than 1.", new [] { "EntActModaliteExercice" });
            }

            // EntActActiviteArtisanalesDeclarees (string) maxLength
            if (this.EntActActiviteArtisanalesDeclarees != null && this.EntActActiviteArtisanalesDeclarees.Length > 420)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntActActiviteArtisanalesDeclarees, length must be less than 420.", new [] { "EntActActiviteArtisanalesDeclarees" });
            }

            // EntActActiviteArtisanalesDeclarees (string) minLength
            if (this.EntActActiviteArtisanalesDeclarees != null && this.EntActActiviteArtisanalesDeclarees.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntActActiviteArtisanalesDeclarees, length must be greater than 0.", new [] { "EntActActiviteArtisanalesDeclarees" });
            }

            // EntActDenominationSociale (string) maxLength
            if (this.EntActDenominationSociale != null && this.EntActDenominationSociale.Length > 120)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntActDenominationSociale, length must be less than 120.", new [] { "EntActDenominationSociale" });
            }

            // EntActDenominationSociale (string) minLength
            if (this.EntActDenominationSociale != null && this.EntActDenominationSociale.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntActDenominationSociale, length must be greater than 0.", new [] { "EntActDenominationSociale" });
            }

            // EntActSigle (string) maxLength
            if (this.EntActSigle != null && this.EntActSigle.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntActSigle, length must be less than 20.", new [] { "EntActSigle" });
            }

            // EntActSigle (string) minLength
            if (this.EntActSigle != null && this.EntActSigle.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntActSigle, length must be greater than 0.", new [] { "EntActSigle" });
            }

            // EntActFormeJuridique (string) maxLength
            if (this.EntActFormeJuridique != null && this.EntActFormeJuridique.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntActFormeJuridique, length must be less than 4.", new [] { "EntActFormeJuridique" });
            }

            // EntActFormeJuridique (string) minLength
            if (this.EntActFormeJuridique != null && this.EntActFormeJuridique.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntActFormeJuridique, length must be greater than 0.", new [] { "EntActFormeJuridique" });
            }

            // EntJugProcedures (string) maxLength
            if (this.EntJugProcedures != null && this.EntJugProcedures.Length > 3000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntJugProcedures, length must be less than 3000.", new [] { "EntJugProcedures" });
            }

            // EntJugProcedures (string) minLength
            if (this.EntJugProcedures != null && this.EntJugProcedures.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntJugProcedures, length must be greater than 0.", new [] { "EntJugProcedures" });
            }

            // DirIdNomNaissance (string) maxLength
            if (this.DirIdNomNaissance != null && this.DirIdNomNaissance.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirIdNomNaissance, length must be less than 100.", new [] { "DirIdNomNaissance" });
            }

            // DirIdNomNaissance (string) minLength
            if (this.DirIdNomNaissance != null && this.DirIdNomNaissance.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirIdNomNaissance, length must be greater than 0.", new [] { "DirIdNomNaissance" });
            }

            // DirIdNomUsage (string) maxLength
            if (this.DirIdNomUsage != null && this.DirIdNomUsage.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirIdNomUsage, length must be less than 100.", new [] { "DirIdNomUsage" });
            }

            // DirIdNomUsage (string) minLength
            if (this.DirIdNomUsage != null && this.DirIdNomUsage.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirIdNomUsage, length must be greater than 0.", new [] { "DirIdNomUsage" });
            }

            // DirIdPrenom1 (string) maxLength
            if (this.DirIdPrenom1 != null && this.DirIdPrenom1.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirIdPrenom1, length must be less than 20.", new [] { "DirIdPrenom1" });
            }

            // DirIdPrenom1 (string) minLength
            if (this.DirIdPrenom1 != null && this.DirIdPrenom1.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirIdPrenom1, length must be greater than 0.", new [] { "DirIdPrenom1" });
            }

            // DirIdPrenom2 (string) maxLength
            if (this.DirIdPrenom2 != null && this.DirIdPrenom2.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirIdPrenom2, length must be less than 20.", new [] { "DirIdPrenom2" });
            }

            // DirIdPrenom2 (string) minLength
            if (this.DirIdPrenom2 != null && this.DirIdPrenom2.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirIdPrenom2, length must be greater than 0.", new [] { "DirIdPrenom2" });
            }

            // DirIdPrenom3 (string) maxLength
            if (this.DirIdPrenom3 != null && this.DirIdPrenom3.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirIdPrenom3, length must be less than 20.", new [] { "DirIdPrenom3" });
            }

            // DirIdPrenom3 (string) minLength
            if (this.DirIdPrenom3 != null && this.DirIdPrenom3.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirIdPrenom3, length must be greater than 0.", new [] { "DirIdPrenom3" });
            }

            // DirIdPseudonyme (string) maxLength
            if (this.DirIdPseudonyme != null && this.DirIdPseudonyme.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirIdPseudonyme, length must be less than 20.", new [] { "DirIdPseudonyme" });
            }

            // DirIdPseudonyme (string) minLength
            if (this.DirIdPseudonyme != null && this.DirIdPseudonyme.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirIdPseudonyme, length must be greater than 0.", new [] { "DirIdPseudonyme" });
            }

            // DirIdLieuNaissance (string) maxLength
            if (this.DirIdLieuNaissance != null && this.DirIdLieuNaissance.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirIdLieuNaissance, length must be less than 35.", new [] { "DirIdLieuNaissance" });
            }

            // DirIdLieuNaissance (string) minLength
            if (this.DirIdLieuNaissance != null && this.DirIdLieuNaissance.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DirIdLieuNaissance, length must be greater than 0.", new [] { "DirIdLieuNaissance" });
            }

            // EirlInitNomRegistre (string) maxLength
            if (this.EirlInitNomRegistre != null && this.EirlInitNomRegistre.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EirlInitNomRegistre, length must be less than 1.", new [] { "EirlInitNomRegistre" });
            }

            // EirlDenomination (string) maxLength
            if (this.EirlDenomination != null && this.EirlDenomination.Length > 120)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EirlDenomination, length must be less than 120.", new [] { "EirlDenomination" });
            }

            // EirlDenomination (string) minLength
            if (this.EirlDenomination != null && this.EirlDenomination.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EirlDenomination, length must be greater than 0.", new [] { "EirlDenomination" });
            }

            // EirlObjetDap (string) maxLength
            if (this.EirlObjetDap != null && this.EirlObjetDap.Length > 420)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EirlObjetDap, length must be less than 420.", new [] { "EirlObjetDap" });
            }

            // EirlObjetDap (string) minLength
            if (this.EirlObjetDap != null && this.EirlObjetDap.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EirlObjetDap, length must be greater than 0.", new [] { "EirlObjetDap" });
            }

            // GestNar4 (string) maxLength
            if (this.GestNar4 != null && this.GestNar4.Length > 120)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GestNar4, length must be less than 120.", new [] { "GestNar4" });
            }

            // GestNar4 (string) minLength
            if (this.GestNar4 != null && this.GestNar4.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GestNar4, length must be greater than 0.", new [] { "GestNar4" });
            }

            // GestNar20 (string) maxLength
            if (this.GestNar20 != null && this.GestNar20.Length > 120)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GestNar20, length must be less than 120.", new [] { "GestNar20" });
            }

            // GestNar20 (string) minLength
            if (this.GestNar20 != null && this.GestNar20.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GestNar20, length must be greater than 0.", new [] { "GestNar20" });
            }

            // GestLibelleCodeNafa (string) maxLength
            if (this.GestLibelleCodeNafa != null && this.GestLibelleCodeNafa.Length > 120)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GestLibelleCodeNafa, length must be less than 120.", new [] { "GestLibelleCodeNafa" });
            }

            // GestLibelleCodeNafa (string) minLength
            if (this.GestLibelleCodeNafa != null && this.GestLibelleCodeNafa.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GestLibelleCodeNafa, length must be greater than 0.", new [] { "GestLibelleCodeNafa" });
            }

            // GestDept (string) maxLength
            if (this.GestDept != null && this.GestDept.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GestDept, length must be less than 50.", new [] { "GestDept" });
            }

            // GestDept (string) minLength
            if (this.GestDept != null && this.GestDept.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GestDept, length must be greater than 1.", new [] { "GestDept" });
            }

            // GestReg (string) maxLength
            if (this.GestReg != null && this.GestReg.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GestReg, length must be less than 50.", new [] { "GestReg" });
            }

            // GestReg (string) minLength
            if (this.GestReg != null && this.GestReg.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GestReg, length must be greater than 1.", new [] { "GestReg" });
            }

            // GestEmetteur (string) maxLength
            if (this.GestEmetteur != null && this.GestEmetteur.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GestEmetteur, length must be less than 50.", new [] { "GestEmetteur" });
            }

            // GestEmetteur (string) minLength
            if (this.GestEmetteur != null && this.GestEmetteur.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GestEmetteur, length must be greater than 1.", new [] { "GestEmetteur" });
            }

            // GestLabelFormeJuridique (string) maxLength
            if (this.GestLabelFormeJuridique != null && this.GestLabelFormeJuridique.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GestLabelFormeJuridique, length must be less than 255.", new [] { "GestLabelFormeJuridique" });
            }

            // GestLabelFormeJuridique (string) minLength
            if (this.GestLabelFormeJuridique != null && this.GestLabelFormeJuridique.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GestLabelFormeJuridique, length must be greater than 1.", new [] { "GestLabelFormeJuridique" });
            }

            // Epci (string) maxLength
            if (this.Epci != null && this.Epci.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Epci, length must be less than 255.", new [] { "Epci" });
            }

            // Epci (string) minLength
            if (this.Epci != null && this.Epci.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Epci, length must be greater than 1.", new [] { "Epci" });
            }

            // EntActCodeApen (string) maxLength
            if (this.EntActCodeApen != null && this.EntActCodeApen.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntActCodeApen, length must be less than 5.", new [] { "EntActCodeApen" });
            }

            // EntActCodeApen (string) minLength
            if (this.EntActCodeApen != null && this.EntActCodeApen.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntActCodeApen, length must be greater than 0.", new [] { "EntActCodeApen" });
            }

            yield break;
        }
    }

}
