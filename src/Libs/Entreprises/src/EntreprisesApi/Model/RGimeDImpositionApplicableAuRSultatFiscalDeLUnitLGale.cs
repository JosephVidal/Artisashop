/*
 * API Entreprise
 *
 * Cette page contient la documentation technique pour accéder à API Entreprise. Les API étant accessible uniquement sous habilitation, l'interaction avec l'environnement de production n'est possible que si vous êtes **en possession d'une clé d'accès (jeton).  ### Comment tester l'API ?  Il est possible de tester les API via notre environnement de **staging** qui vous retournera systématiquement des données fictives.  Il est nécessaire d'utiliser le jeton de staging indiqué ci-dessous.  - --  *eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1MmE1YmZjMi1jMzUwLTQ4ZjQtYjY5Ni05ZWE3NmRiM2VmMjkiLCJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJzY29wZXMiOlsiY2VydGlmaWNhdF9yZ2VfYWRlbWUiLCJtc2FfY290aXNhdGlvbnMiLCJlbnRyZXByaXNlcyIsImV4dHJhaXRzX3JjcyIsImNlcnRpZmljYXRfb3BxaWJpIiwiYXNzb2NpYXRpb25zIiwiZXRhYmxpc3NlbWVudHMiLCJmbnRwX2NhcnRlX3BybyIsInF1YWxpYmF0IiwiZW50cmVwcmlzZXNfYXJ0aXNhbmFsZXMiLCJjZXJ0aWZpY2F0X2NuZXRwIiwiZW9yaV9kb3VhbmVzIiwicHJvYnRwIiwiYWN0ZXNfaW5waSIsImV4dHJhaXRfY291cnRfaW5waSIsImF0dGVzdGF0aW9uc19zb2NpYWxlcyIsImxpYXNzZV9maXNjYWxlIiwiYXR0ZXN0YXRpb25zX2Zpc2NhbGVzIiwiZXhlcmNpY2VzIiwiY29udmVudGlvbnNfY29sbGVjdGl2ZXMiLCJiaWxhbnNfaW5waSIsImRvY3VtZW50c19hc3NvY2lhdGlvbiIsImNlcnRpZmljYXRfYWdlbmNlX2JpbyIsImJpbGFuc19lbnRyZXByaXNlX2JkZiIsImF0dGVzdGF0aW9uc19hZ2VmaXBoIiwibWVzcmlfaWRlbnRpZmlhbnQiLCJtZXNyaV9pZGVudGl0ZSIsIm1lc3JpX2luc2NyaXB0aW9uX2V0dWRpYW50IiwibWVzcmlfaW5zY3JpcHRpb25fYXV0cmUiLCJtZXNyaV9hZG1pc3Npb24iLCJtZXNyaV9ldGFibGlzc2VtZW50cyIsInBvbGVfZW1wbG9pX2lkZW50aXRlIiwicG9sZV9lbXBsb2lfYWRyZXNzZSIsInBvbGVfZW1wbG9pX2NvbnRhY3QiLCJwb2xlX2VtcGxvaV9pbnNjcmlwdGlvbiIsImNuYWZfcXVvdGllbnRfZmFtaWxpYWwiLCJjbmFmX2FsbG9jYXRhaXJlcyIsImNuYWZfZW5mYW50cyIsImNuYWZfYWRyZXNzZSIsImNub3VzX3N0YXR1dF9ib3Vyc2llciIsInVwdGltZSIsImNub3VzX2VjaGVsb25fYm91cnNlIiwiY25vdXNfZW1haWwiLCJjbm91c19wZXJpb2RlX3ZlcnNlbWVudCIsImNub3VzX3N0YXR1dF9ib3Vyc2UiLCJjbm91c192aWxsZV9ldHVkZXMiLCJjbm91c19pZGVudGl0ZSIsImRnZmlwX2RlY2xhcmFudDFfbm9tIiwiZGdmaXBfZGVjbGFyYW50MV9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50MV9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50MV9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RlY2xhcmFudDJfbm9tIiwiZGdmaXBfZGVjbGFyYW50Ml9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50Ml9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50Ml9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RhdGVfcmVjb3V2cmVtZW50IiwiZGdmaXBfZGF0ZV9ldGFibGlzc2VtZW50IiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX3RheGF0aW9uIiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX2FubmVlIiwiZGdmaXBfbm9tYnJlX3BhcnRzIiwiZGdmaXBfbm9tYnJlX3BlcnNvbm5lc19hX2NoYXJnZSIsImRnZmlwX3NpdHVhdGlvbl9mYW1pbGlhbGUiLCJkZ2ZpcF9yZXZlbnVfYnJ1dF9nbG9iYWwiLCJkZ2ZpcF9yZXZlbnVfaW1wb3NhYmxlIiwiZGdmaXBfaW1wb3RfcmV2ZW51X25ldF9hdmFudF9jb3JyZWN0aW9ucyIsImRnZmlwX21vbnRhbnRfaW1wb3QiLCJkZ2ZpcF9yZXZlbnVfZmlzY2FsX3JlZmVyZW5jZSIsImRnZmlwX2FubmVlX2ltcG90IiwiZGdmaXBfYW5uZWVfcmV2ZW51cyIsImRnZmlwX2VycmV1cl9jb3JyZWN0aWYiLCJkZ2ZpcF9zaXR1YXRpb25fcGFydGllbGxlIl0sInN1YiI6InN0YWdpbmcgZGV2ZWxvcG1lbnQiLCJpYXQiOjE2NjY4NjQwNzQsInZlcnNpb24iOiIxLjAiLCJleHAiOjE5ODI0ODMyNzR9.u2kMWzll3iCTczUOqMQbpS66VfrVzI2lLiyGEPcKAec*       
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@entreprise.api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EntreprisesApi.Client.OpenAPIDateConverter;

namespace EntreprisesApi.Model
{
    /// <summary>
    /// RGimeDImpositionApplicableAuRSultatFiscalDeLUnitLGale
    /// </summary>
    [DataContract(Name = "R_gime_d_imposition_applicable_au_r_sultat_fiscal_de_l_unit__l_gale")]
    public partial class RGimeDImpositionApplicableAuRSultatFiscalDeLUnitLGale : IEquatable<RGimeDImpositionApplicableAuRSultatFiscalDeLUnitLGale>, IValidatableObject
    {
        /// <summary>
        /// Les valeurs possibles sont les suivantes:     - RN: Réel normal   - RSI ou RS: Réel simplifié FIXME: A CONFIRMER le RS   - RNMEMBRE: Réel normal groupe (groupe)   - RNGROUPE: Réel normal groupe (tête) FIXME: Quel est la différence tête/groupe   - DECC: Déclaration contrôlée
        /// </summary>
        /// <value>Les valeurs possibles sont les suivantes:     - RN: Réel normal   - RSI ou RS: Réel simplifié FIXME: A CONFIRMER le RS   - RNMEMBRE: Réel normal groupe (groupe)   - RNGROUPE: Réel normal groupe (tête) FIXME: Quel est la différence tête/groupe   - DECC: Déclaration contrôlée</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodeEnum
        {
            /// <summary>
            /// Enum RN for value: RN
            /// </summary>
            [EnumMember(Value = "RN")]
            RN = 1,

            /// <summary>
            /// Enum RS for value: RS
            /// </summary>
            [EnumMember(Value = "RS")]
            RS = 2,

            /// <summary>
            /// Enum RSI for value: RSI
            /// </summary>
            [EnumMember(Value = "RSI")]
            RSI = 3,

            /// <summary>
            /// Enum RNMEMBRE for value: RNMEMBRE
            /// </summary>
            [EnumMember(Value = "RNMEMBRE")]
            RNMEMBRE = 4,

            /// <summary>
            /// Enum RNGROUPE for value: RNGROUPE
            /// </summary>
            [EnumMember(Value = "RNGROUPE")]
            RNGROUPE = 5,

            /// <summary>
            /// Enum DECC for value: DECC
            /// </summary>
            [EnumMember(Value = "DECC")]
            DECC = 6

        }


        /// <summary>
        /// Les valeurs possibles sont les suivantes:     - RN: Réel normal   - RSI ou RS: Réel simplifié FIXME: A CONFIRMER le RS   - RNMEMBRE: Réel normal groupe (groupe)   - RNGROUPE: Réel normal groupe (tête) FIXME: Quel est la différence tête/groupe   - DECC: Déclaration contrôlée
        /// </summary>
        /// <value>Les valeurs possibles sont les suivantes:     - RN: Réel normal   - RSI ou RS: Réel simplifié FIXME: A CONFIRMER le RS   - RNMEMBRE: Réel normal groupe (groupe)   - RNGROUPE: Réel normal groupe (tête) FIXME: Quel est la différence tête/groupe   - DECC: Déclaration contrôlée</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public CodeEnum Code { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RGimeDImpositionApplicableAuRSultatFiscalDeLUnitLGale" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RGimeDImpositionApplicableAuRSultatFiscalDeLUnitLGale() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RGimeDImpositionApplicableAuRSultatFiscalDeLUnitLGale" /> class.
        /// </summary>
        /// <param name="code">Les valeurs possibles sont les suivantes:     - RN: Réel normal   - RSI ou RS: Réel simplifié FIXME: A CONFIRMER le RS   - RNMEMBRE: Réel normal groupe (groupe)   - RNGROUPE: Réel normal groupe (tête) FIXME: Quel est la différence tête/groupe   - DECC: Déclaration contrôlée (required).</param>
        /// <param name="libelle">La liste exhaustive se trouve dans la description du code (required).</param>
        public RGimeDImpositionApplicableAuRSultatFiscalDeLUnitLGale(CodeEnum code = default(CodeEnum), string libelle = default(string))
        {
            this.Code = code;
            // to ensure "libelle" is required (not null)
            if (libelle == null)
            {
                throw new ArgumentNullException("libelle is a required property for RGimeDImpositionApplicableAuRSultatFiscalDeLUnitLGale and cannot be null");
            }
            this.Libelle = libelle;
        }

        /// <summary>
        /// La liste exhaustive se trouve dans la description du code
        /// </summary>
        /// <value>La liste exhaustive se trouve dans la description du code</value>
        [DataMember(Name = "libelle", IsRequired = true, EmitDefaultValue = true)]
        public string Libelle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RGimeDImpositionApplicableAuRSultatFiscalDeLUnitLGale {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Libelle: ").Append(Libelle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RGimeDImpositionApplicableAuRSultatFiscalDeLUnitLGale);
        }

        /// <summary>
        /// Returns true if RGimeDImpositionApplicableAuRSultatFiscalDeLUnitLGale instances are equal
        /// </summary>
        /// <param name="input">Instance of RGimeDImpositionApplicableAuRSultatFiscalDeLUnitLGale to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RGimeDImpositionApplicableAuRSultatFiscalDeLUnitLGale input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    this.Code.Equals(input.Code)
                ) && 
                (
                    this.Libelle == input.Libelle ||
                    (this.Libelle != null &&
                    this.Libelle.Equals(input.Libelle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Code.GetHashCode();
                if (this.Libelle != null)
                {
                    hashCode = (hashCode * 59) + this.Libelle.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
