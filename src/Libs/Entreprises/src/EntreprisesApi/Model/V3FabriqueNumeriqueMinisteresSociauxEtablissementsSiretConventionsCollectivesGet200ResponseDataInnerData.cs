/*
 * API Entreprise
 *
 * Cette page contient la documentation technique pour accéder à API Entreprise. Les API étant accessible uniquement sous habilitation, l'interaction avec l'environnement de production n'est possible que si vous êtes **en possession d'une clé d'accès (jeton).  ### Comment tester l'API ?  Il est possible de tester les API via notre environnement de **staging** qui vous retournera systématiquement des données fictives.  Il est nécessaire d'utiliser le jeton de staging indiqué ci-dessous.  - --  *eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1MmE1YmZjMi1jMzUwLTQ4ZjQtYjY5Ni05ZWE3NmRiM2VmMjkiLCJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJzY29wZXMiOlsiY2VydGlmaWNhdF9yZ2VfYWRlbWUiLCJtc2FfY290aXNhdGlvbnMiLCJlbnRyZXByaXNlcyIsImV4dHJhaXRzX3JjcyIsImNlcnRpZmljYXRfb3BxaWJpIiwiYXNzb2NpYXRpb25zIiwiZXRhYmxpc3NlbWVudHMiLCJmbnRwX2NhcnRlX3BybyIsInF1YWxpYmF0IiwiZW50cmVwcmlzZXNfYXJ0aXNhbmFsZXMiLCJjZXJ0aWZpY2F0X2NuZXRwIiwiZW9yaV9kb3VhbmVzIiwicHJvYnRwIiwiYWN0ZXNfaW5waSIsImV4dHJhaXRfY291cnRfaW5waSIsImF0dGVzdGF0aW9uc19zb2NpYWxlcyIsImxpYXNzZV9maXNjYWxlIiwiYXR0ZXN0YXRpb25zX2Zpc2NhbGVzIiwiZXhlcmNpY2VzIiwiY29udmVudGlvbnNfY29sbGVjdGl2ZXMiLCJiaWxhbnNfaW5waSIsImRvY3VtZW50c19hc3NvY2lhdGlvbiIsImNlcnRpZmljYXRfYWdlbmNlX2JpbyIsImJpbGFuc19lbnRyZXByaXNlX2JkZiIsImF0dGVzdGF0aW9uc19hZ2VmaXBoIiwibWVzcmlfaWRlbnRpZmlhbnQiLCJtZXNyaV9pZGVudGl0ZSIsIm1lc3JpX2luc2NyaXB0aW9uX2V0dWRpYW50IiwibWVzcmlfaW5zY3JpcHRpb25fYXV0cmUiLCJtZXNyaV9hZG1pc3Npb24iLCJtZXNyaV9ldGFibGlzc2VtZW50cyIsInBvbGVfZW1wbG9pX2lkZW50aXRlIiwicG9sZV9lbXBsb2lfYWRyZXNzZSIsInBvbGVfZW1wbG9pX2NvbnRhY3QiLCJwb2xlX2VtcGxvaV9pbnNjcmlwdGlvbiIsImNuYWZfcXVvdGllbnRfZmFtaWxpYWwiLCJjbmFmX2FsbG9jYXRhaXJlcyIsImNuYWZfZW5mYW50cyIsImNuYWZfYWRyZXNzZSIsImNub3VzX3N0YXR1dF9ib3Vyc2llciIsInVwdGltZSIsImNub3VzX2VjaGVsb25fYm91cnNlIiwiY25vdXNfZW1haWwiLCJjbm91c19wZXJpb2RlX3ZlcnNlbWVudCIsImNub3VzX3N0YXR1dF9ib3Vyc2UiLCJjbm91c192aWxsZV9ldHVkZXMiLCJjbm91c19pZGVudGl0ZSIsImRnZmlwX2RlY2xhcmFudDFfbm9tIiwiZGdmaXBfZGVjbGFyYW50MV9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50MV9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50MV9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RlY2xhcmFudDJfbm9tIiwiZGdmaXBfZGVjbGFyYW50Ml9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50Ml9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50Ml9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RhdGVfcmVjb3V2cmVtZW50IiwiZGdmaXBfZGF0ZV9ldGFibGlzc2VtZW50IiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX3RheGF0aW9uIiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX2FubmVlIiwiZGdmaXBfbm9tYnJlX3BhcnRzIiwiZGdmaXBfbm9tYnJlX3BlcnNvbm5lc19hX2NoYXJnZSIsImRnZmlwX3NpdHVhdGlvbl9mYW1pbGlhbGUiLCJkZ2ZpcF9yZXZlbnVfYnJ1dF9nbG9iYWwiLCJkZ2ZpcF9yZXZlbnVfaW1wb3NhYmxlIiwiZGdmaXBfaW1wb3RfcmV2ZW51X25ldF9hdmFudF9jb3JyZWN0aW9ucyIsImRnZmlwX21vbnRhbnRfaW1wb3QiLCJkZ2ZpcF9yZXZlbnVfZmlzY2FsX3JlZmVyZW5jZSIsImRnZmlwX2FubmVlX2ltcG90IiwiZGdmaXBfYW5uZWVfcmV2ZW51cyIsImRnZmlwX2VycmV1cl9jb3JyZWN0aWYiLCJkZ2ZpcF9zaXR1YXRpb25fcGFydGllbGxlIl0sInN1YiI6InN0YWdpbmcgZGV2ZWxvcG1lbnQiLCJpYXQiOjE2NjY4NjQwNzQsInZlcnNpb24iOiIxLjAiLCJleHAiOjE5ODI0ODMyNzR9.u2kMWzll3iCTczUOqMQbpS66VfrVzI2lLiyGEPcKAec*       
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@entreprise.api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EntreprisesApi.Client.OpenAPIDateConverter;

namespace EntreprisesApi.Model
{
    /// <summary>
    /// V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200ResponseDataInnerData
    /// </summary>
    [DataContract(Name = "_v3_fabrique_numerique_ministeres_sociaux_etablissements__siret__conventions_collectives_get_200_response_data_inner_data")]
    public partial class V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200ResponseDataInnerData : IEquatable<V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200ResponseDataInnerData>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ConventionCollective for value: convention_collective
            /// </summary>
            [EnumMember(Value = "convention_collective")]
            ConventionCollective = 1

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// État de la convention. Si celle-ci est en vigueur elle est seulement obligatoire pour les signataires. Si celle-ci est en vigueur étendue, elle est obligatoire pour tous les employeurs de la branche.
        /// </summary>
        /// <value>État de la convention. Si celle-ci est en vigueur elle est seulement obligatoire pour les signataires. Si celle-ci est en vigueur étendue, elle est obligatoire pour tous les employeurs de la branche.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EtatEnum
        {
            /// <summary>
            /// Enum Vigueur for value: vigueur
            /// </summary>
            [EnumMember(Value = "vigueur")]
            Vigueur = 1,

            /// <summary>
            /// Enum VigueurEtendue for value: vigueur_etendue
            /// </summary>
            [EnumMember(Value = "vigueur_etendue")]
            VigueurEtendue = 2

        }


        /// <summary>
        /// État de la convention. Si celle-ci est en vigueur elle est seulement obligatoire pour les signataires. Si celle-ci est en vigueur étendue, elle est obligatoire pour tous les employeurs de la branche.
        /// </summary>
        /// <value>État de la convention. Si celle-ci est en vigueur elle est seulement obligatoire pour les signataires. Si celle-ci est en vigueur étendue, elle est obligatoire pour tous les employeurs de la branche.</value>
        [DataMember(Name = "etat", IsRequired = true, EmitDefaultValue = true)]
        public EtatEnum Etat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200ResponseDataInnerData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200ResponseDataInnerData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200ResponseDataInnerData" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="titre">Titre historique de la convention collective (required).</param>
        /// <param name="titreCourt">Titre abrégé / d&#39;usage (required).</param>
        /// <param name="numeroIdcc">Numéro IDCC (required).</param>
        /// <param name="active">Détermine si la convention est toujours active (required).</param>
        /// <param name="etat">État de la convention. Si celle-ci est en vigueur elle est seulement obligatoire pour les signataires. Si celle-ci est en vigueur étendue, elle est obligatoire pour tous les employeurs de la branche. (required).</param>
        /// <param name="synonymes">Liste de synonymes connus de la convention (required).</param>
        /// <param name="url">Lien vers le texte en vigueur de la convention collective sur Legifrance (required).</param>
        /// <param name="datePublication">Date de la dernière mise à jour de la convention (required).</param>
        public V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200ResponseDataInnerData(TypeEnum type = default(TypeEnum), string titre = default(string), string titreCourt = default(string), decimal numeroIdcc = default(decimal), bool active = default(bool), EtatEnum etat = default(EtatEnum), List<string> synonymes = default(List<string>), string url = default(string), string datePublication = default(string))
        {
            this.Type = type;
            // to ensure "titre" is required (not null)
            if (titre == null)
            {
                throw new ArgumentNullException("titre is a required property for V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200ResponseDataInnerData and cannot be null");
            }
            this.Titre = titre;
            // to ensure "titreCourt" is required (not null)
            if (titreCourt == null)
            {
                throw new ArgumentNullException("titreCourt is a required property for V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200ResponseDataInnerData and cannot be null");
            }
            this.TitreCourt = titreCourt;
            this.NumeroIdcc = numeroIdcc;
            this.Active = active;
            this.Etat = etat;
            // to ensure "synonymes" is required (not null)
            if (synonymes == null)
            {
                throw new ArgumentNullException("synonymes is a required property for V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200ResponseDataInnerData and cannot be null");
            }
            this.Synonymes = synonymes;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200ResponseDataInnerData and cannot be null");
            }
            this.Url = url;
            // to ensure "datePublication" is required (not null)
            if (datePublication == null)
            {
                throw new ArgumentNullException("datePublication is a required property for V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200ResponseDataInnerData and cannot be null");
            }
            this.DatePublication = datePublication;
        }

        /// <summary>
        /// Titre historique de la convention collective
        /// </summary>
        /// <value>Titre historique de la convention collective</value>
        [DataMember(Name = "titre", IsRequired = true, EmitDefaultValue = true)]
        public string Titre { get; set; }

        /// <summary>
        /// Titre abrégé / d&#39;usage
        /// </summary>
        /// <value>Titre abrégé / d&#39;usage</value>
        [DataMember(Name = "titre_court", IsRequired = true, EmitDefaultValue = true)]
        public string TitreCourt { get; set; }

        /// <summary>
        /// Numéro IDCC
        /// </summary>
        /// <value>Numéro IDCC</value>
        [DataMember(Name = "numero_idcc", IsRequired = true, EmitDefaultValue = true)]
        public decimal NumeroIdcc { get; set; }

        /// <summary>
        /// Détermine si la convention est toujours active
        /// </summary>
        /// <value>Détermine si la convention est toujours active</value>
        [DataMember(Name = "active", IsRequired = true, EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Liste de synonymes connus de la convention
        /// </summary>
        /// <value>Liste de synonymes connus de la convention</value>
        [DataMember(Name = "synonymes", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Synonymes { get; set; }

        /// <summary>
        /// Lien vers le texte en vigueur de la convention collective sur Legifrance
        /// </summary>
        /// <value>Lien vers le texte en vigueur de la convention collective sur Legifrance</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Date de la dernière mise à jour de la convention
        /// </summary>
        /// <value>Date de la dernière mise à jour de la convention</value>
        [DataMember(Name = "date_publication", IsRequired = true, EmitDefaultValue = true)]
        public string DatePublication { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200ResponseDataInnerData {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Titre: ").Append(Titre).Append("\n");
            sb.Append("  TitreCourt: ").Append(TitreCourt).Append("\n");
            sb.Append("  NumeroIdcc: ").Append(NumeroIdcc).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Etat: ").Append(Etat).Append("\n");
            sb.Append("  Synonymes: ").Append(Synonymes).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  DatePublication: ").Append(DatePublication).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200ResponseDataInnerData);
        }

        /// <summary>
        /// Returns true if V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200ResponseDataInnerData instances are equal
        /// </summary>
        /// <param name="input">Instance of V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200ResponseDataInnerData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200ResponseDataInnerData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Titre == input.Titre ||
                    (this.Titre != null &&
                    this.Titre.Equals(input.Titre))
                ) && 
                (
                    this.TitreCourt == input.TitreCourt ||
                    (this.TitreCourt != null &&
                    this.TitreCourt.Equals(input.TitreCourt))
                ) && 
                (
                    this.NumeroIdcc == input.NumeroIdcc ||
                    this.NumeroIdcc.Equals(input.NumeroIdcc)
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Etat == input.Etat ||
                    this.Etat.Equals(input.Etat)
                ) && 
                (
                    this.Synonymes == input.Synonymes ||
                    this.Synonymes != null &&
                    input.Synonymes != null &&
                    this.Synonymes.SequenceEqual(input.Synonymes)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.DatePublication == input.DatePublication ||
                    (this.DatePublication != null &&
                    this.DatePublication.Equals(input.DatePublication))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Titre != null)
                {
                    hashCode = (hashCode * 59) + this.Titre.GetHashCode();
                }
                if (this.TitreCourt != null)
                {
                    hashCode = (hashCode * 59) + this.TitreCourt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumeroIdcc.GetHashCode();
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                hashCode = (hashCode * 59) + this.Etat.GetHashCode();
                if (this.Synonymes != null)
                {
                    hashCode = (hashCode * 59) + this.Synonymes.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.DatePublication != null)
                {
                    hashCode = (hashCode * 59) + this.DatePublication.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
