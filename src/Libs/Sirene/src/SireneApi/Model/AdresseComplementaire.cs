/*
 * API Sirene
 *
 * <p><span style=\"color:red;\"> <b></b></p><br></span><span style=\"color:blue;\"> <b>Les tranches d’effectifs et les catégories d’entreprises du millésime 2020 sont désormais disponibles</b></span> <br><br><span style=\"color:blue;\"><i>La documentation des services est désormais au format html (Cf. Onglet Documentation)</i></span></p> <p><h4 class=\"add-margin-top-5x\"><b>Les données du répertoire Sirene depuis 1973</b></h4><p>API Sirene donne accès aux informations concernant les entreprises et les établissements enregistrés au répertoire interadministratif Sirene depuis sa création en 1973, y compris les unités fermées.</p> <p>La recherche peut être unitaire, multicritère, phonétique et porter sur les données courantes et historisées.</p> <p></p> <p>Les services actuellement disponibles interrogent :</p> <ul> <li> les unités légales (siren) </li> <li> les établissements (siret). </li> </ul> <p>Le service informations permet de connaître les dates de dernières mises à jour.</p> <p>Le service Liens de succession informe sur les prédécesseurs et les successeurs des établissements.</p> <p align=\"justify\" style=\"margin-top: 0.6cm\">Le service nonDiffusibles restitue les siren et siret des personnes physiques ayant demandé à être exclues de la diffusion publique conformément à l'article A123-96 du code de commerce. Les informations les concernant ne peuvent alors être rediffusées, ni utilisées à des fins de prospection. Les utilisateurs ayant un référentiel en interne peuvent ainsi le mettre à jour quotidiennement.</p> <p>La lettre <b>Sirene open data actualités</b> est destinée aux utilisateurs des données Sirene. Pour vous abonner, <a href=\"https://insee.fr/fr/information/1405555\">suivez ce lien</a>. Pour consulter les précédents numéros, <a href=\"https://insee.fr/fr/information/3711739\">cliquez ici</a>.</p>
 *
 * The version of the OpenAPI document: 3.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SireneApi.Client.OpenAPIDateConverter;

namespace SireneApi.Model
{
    /// <summary>
    /// Ensemble des variables d&#39;adresse complémentaire d&#39;un établissement
    /// </summary>
    [DataContract(Name = "AdresseComplementaire")]
    public partial class AdresseComplementaire : IEquatable<AdresseComplementaire>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdresseComplementaire" /> class.
        /// </summary>
        /// <param name="complementAdresse2Etablissement">Complément d&#39;adresse de l&#39;établissement.</param>
        /// <param name="numeroVoie2Etablissement">Numéro dans la voie.</param>
        /// <param name="indiceRepetition2Etablissement">Indice de répétition dans la voie.</param>
        /// <param name="typeVoie2Etablissement">Type de la voie.</param>
        /// <param name="libelleVoie2Etablissement">Libellé de la voie.</param>
        /// <param name="codePostal2Etablissement">Code postal.</param>
        /// <param name="libelleCommune2Etablissement">Libellé de la commune pour les adresses en France.</param>
        /// <param name="libelleCommuneEtranger2Etablissement">Libellé complémentaire pour une adresse à l&#39;étranger.</param>
        /// <param name="distributionSpeciale2Etablissement">Distribution spéciale (BP par ex).</param>
        /// <param name="codeCommune2Etablissement">Code commune de localisation de l’établissement hors établissements situés à l’étranger (Le code commune est défini dans le &lt;a href&#x3D;&#39;https://www.insee.fr/fr/information/2028028&#39;&gt;code officiel géographique (COG)&lt;/a&gt;).</param>
        /// <param name="codeCedex2Etablissement">Numéro de Cedex.</param>
        /// <param name="libelleCedex2Etablissement">Libellé correspondant au numéro de Cedex (variable codeCedexEtablissement).</param>
        /// <param name="codePaysEtranger2Etablissement">Code pays pour les établissements situés à l’étranger.</param>
        /// <param name="libellePaysEtranger2Etablissement">Libellé du pays pour les adresses à l’étranger.</param>
        public AdresseComplementaire(string complementAdresse2Etablissement = default(string), string numeroVoie2Etablissement = default(string), string indiceRepetition2Etablissement = default(string), string typeVoie2Etablissement = default(string), string libelleVoie2Etablissement = default(string), string codePostal2Etablissement = default(string), string libelleCommune2Etablissement = default(string), string libelleCommuneEtranger2Etablissement = default(string), string distributionSpeciale2Etablissement = default(string), string codeCommune2Etablissement = default(string), string codeCedex2Etablissement = default(string), string libelleCedex2Etablissement = default(string), string codePaysEtranger2Etablissement = default(string), string libellePaysEtranger2Etablissement = default(string))
        {
            this.ComplementAdresse2Etablissement = complementAdresse2Etablissement;
            this.NumeroVoie2Etablissement = numeroVoie2Etablissement;
            this.IndiceRepetition2Etablissement = indiceRepetition2Etablissement;
            this.TypeVoie2Etablissement = typeVoie2Etablissement;
            this.LibelleVoie2Etablissement = libelleVoie2Etablissement;
            this.CodePostal2Etablissement = codePostal2Etablissement;
            this.LibelleCommune2Etablissement = libelleCommune2Etablissement;
            this.LibelleCommuneEtranger2Etablissement = libelleCommuneEtranger2Etablissement;
            this.DistributionSpeciale2Etablissement = distributionSpeciale2Etablissement;
            this.CodeCommune2Etablissement = codeCommune2Etablissement;
            this.CodeCedex2Etablissement = codeCedex2Etablissement;
            this.LibelleCedex2Etablissement = libelleCedex2Etablissement;
            this.CodePaysEtranger2Etablissement = codePaysEtranger2Etablissement;
            this.LibellePaysEtranger2Etablissement = libellePaysEtranger2Etablissement;
        }

        /// <summary>
        /// Complément d&#39;adresse de l&#39;établissement
        /// </summary>
        /// <value>Complément d&#39;adresse de l&#39;établissement</value>
        [DataMember(Name = "complementAdresse2Etablissement", EmitDefaultValue = false)]
        public string ComplementAdresse2Etablissement { get; set; }

        /// <summary>
        /// Numéro dans la voie
        /// </summary>
        /// <value>Numéro dans la voie</value>
        [DataMember(Name = "numeroVoie2Etablissement", EmitDefaultValue = false)]
        public string NumeroVoie2Etablissement { get; set; }

        /// <summary>
        /// Indice de répétition dans la voie
        /// </summary>
        /// <value>Indice de répétition dans la voie</value>
        [DataMember(Name = "indiceRepetition2Etablissement", EmitDefaultValue = false)]
        public string IndiceRepetition2Etablissement { get; set; }

        /// <summary>
        /// Type de la voie
        /// </summary>
        /// <value>Type de la voie</value>
        [DataMember(Name = "typeVoie2Etablissement", EmitDefaultValue = false)]
        public string TypeVoie2Etablissement { get; set; }

        /// <summary>
        /// Libellé de la voie
        /// </summary>
        /// <value>Libellé de la voie</value>
        [DataMember(Name = "libelleVoie2Etablissement", EmitDefaultValue = false)]
        public string LibelleVoie2Etablissement { get; set; }

        /// <summary>
        /// Code postal
        /// </summary>
        /// <value>Code postal</value>
        [DataMember(Name = "codePostal2Etablissement", EmitDefaultValue = false)]
        public string CodePostal2Etablissement { get; set; }

        /// <summary>
        /// Libellé de la commune pour les adresses en France
        /// </summary>
        /// <value>Libellé de la commune pour les adresses en France</value>
        [DataMember(Name = "libelleCommune2Etablissement", EmitDefaultValue = false)]
        public string LibelleCommune2Etablissement { get; set; }

        /// <summary>
        /// Libellé complémentaire pour une adresse à l&#39;étranger
        /// </summary>
        /// <value>Libellé complémentaire pour une adresse à l&#39;étranger</value>
        [DataMember(Name = "libelleCommuneEtranger2Etablissement", EmitDefaultValue = false)]
        public string LibelleCommuneEtranger2Etablissement { get; set; }

        /// <summary>
        /// Distribution spéciale (BP par ex)
        /// </summary>
        /// <value>Distribution spéciale (BP par ex)</value>
        [DataMember(Name = "distributionSpeciale2Etablissement", EmitDefaultValue = false)]
        public string DistributionSpeciale2Etablissement { get; set; }

        /// <summary>
        /// Code commune de localisation de l’établissement hors établissements situés à l’étranger (Le code commune est défini dans le &lt;a href&#x3D;&#39;https://www.insee.fr/fr/information/2028028&#39;&gt;code officiel géographique (COG)&lt;/a&gt;)
        /// </summary>
        /// <value>Code commune de localisation de l’établissement hors établissements situés à l’étranger (Le code commune est défini dans le &lt;a href&#x3D;&#39;https://www.insee.fr/fr/information/2028028&#39;&gt;code officiel géographique (COG)&lt;/a&gt;)</value>
        [DataMember(Name = "codeCommune2Etablissement", EmitDefaultValue = false)]
        public string CodeCommune2Etablissement { get; set; }

        /// <summary>
        /// Numéro de Cedex
        /// </summary>
        /// <value>Numéro de Cedex</value>
        [DataMember(Name = "codeCedex2Etablissement", EmitDefaultValue = false)]
        public string CodeCedex2Etablissement { get; set; }

        /// <summary>
        /// Libellé correspondant au numéro de Cedex (variable codeCedexEtablissement)
        /// </summary>
        /// <value>Libellé correspondant au numéro de Cedex (variable codeCedexEtablissement)</value>
        [DataMember(Name = "libelleCedex2Etablissement", EmitDefaultValue = false)]
        public string LibelleCedex2Etablissement { get; set; }

        /// <summary>
        /// Code pays pour les établissements situés à l’étranger
        /// </summary>
        /// <value>Code pays pour les établissements situés à l’étranger</value>
        [DataMember(Name = "codePaysEtranger2Etablissement", EmitDefaultValue = false)]
        public string CodePaysEtranger2Etablissement { get; set; }

        /// <summary>
        /// Libellé du pays pour les adresses à l’étranger
        /// </summary>
        /// <value>Libellé du pays pour les adresses à l’étranger</value>
        [DataMember(Name = "libellePaysEtranger2Etablissement", EmitDefaultValue = false)]
        public string LibellePaysEtranger2Etablissement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdresseComplementaire {\n");
            sb.Append("  ComplementAdresse2Etablissement: ").Append(ComplementAdresse2Etablissement).Append("\n");
            sb.Append("  NumeroVoie2Etablissement: ").Append(NumeroVoie2Etablissement).Append("\n");
            sb.Append("  IndiceRepetition2Etablissement: ").Append(IndiceRepetition2Etablissement).Append("\n");
            sb.Append("  TypeVoie2Etablissement: ").Append(TypeVoie2Etablissement).Append("\n");
            sb.Append("  LibelleVoie2Etablissement: ").Append(LibelleVoie2Etablissement).Append("\n");
            sb.Append("  CodePostal2Etablissement: ").Append(CodePostal2Etablissement).Append("\n");
            sb.Append("  LibelleCommune2Etablissement: ").Append(LibelleCommune2Etablissement).Append("\n");
            sb.Append("  LibelleCommuneEtranger2Etablissement: ").Append(LibelleCommuneEtranger2Etablissement).Append("\n");
            sb.Append("  DistributionSpeciale2Etablissement: ").Append(DistributionSpeciale2Etablissement).Append("\n");
            sb.Append("  CodeCommune2Etablissement: ").Append(CodeCommune2Etablissement).Append("\n");
            sb.Append("  CodeCedex2Etablissement: ").Append(CodeCedex2Etablissement).Append("\n");
            sb.Append("  LibelleCedex2Etablissement: ").Append(LibelleCedex2Etablissement).Append("\n");
            sb.Append("  CodePaysEtranger2Etablissement: ").Append(CodePaysEtranger2Etablissement).Append("\n");
            sb.Append("  LibellePaysEtranger2Etablissement: ").Append(LibellePaysEtranger2Etablissement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdresseComplementaire);
        }

        /// <summary>
        /// Returns true if AdresseComplementaire instances are equal
        /// </summary>
        /// <param name="input">Instance of AdresseComplementaire to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdresseComplementaire input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ComplementAdresse2Etablissement == input.ComplementAdresse2Etablissement ||
                    (this.ComplementAdresse2Etablissement != null &&
                    this.ComplementAdresse2Etablissement.Equals(input.ComplementAdresse2Etablissement))
                ) && 
                (
                    this.NumeroVoie2Etablissement == input.NumeroVoie2Etablissement ||
                    (this.NumeroVoie2Etablissement != null &&
                    this.NumeroVoie2Etablissement.Equals(input.NumeroVoie2Etablissement))
                ) && 
                (
                    this.IndiceRepetition2Etablissement == input.IndiceRepetition2Etablissement ||
                    (this.IndiceRepetition2Etablissement != null &&
                    this.IndiceRepetition2Etablissement.Equals(input.IndiceRepetition2Etablissement))
                ) && 
                (
                    this.TypeVoie2Etablissement == input.TypeVoie2Etablissement ||
                    (this.TypeVoie2Etablissement != null &&
                    this.TypeVoie2Etablissement.Equals(input.TypeVoie2Etablissement))
                ) && 
                (
                    this.LibelleVoie2Etablissement == input.LibelleVoie2Etablissement ||
                    (this.LibelleVoie2Etablissement != null &&
                    this.LibelleVoie2Etablissement.Equals(input.LibelleVoie2Etablissement))
                ) && 
                (
                    this.CodePostal2Etablissement == input.CodePostal2Etablissement ||
                    (this.CodePostal2Etablissement != null &&
                    this.CodePostal2Etablissement.Equals(input.CodePostal2Etablissement))
                ) && 
                (
                    this.LibelleCommune2Etablissement == input.LibelleCommune2Etablissement ||
                    (this.LibelleCommune2Etablissement != null &&
                    this.LibelleCommune2Etablissement.Equals(input.LibelleCommune2Etablissement))
                ) && 
                (
                    this.LibelleCommuneEtranger2Etablissement == input.LibelleCommuneEtranger2Etablissement ||
                    (this.LibelleCommuneEtranger2Etablissement != null &&
                    this.LibelleCommuneEtranger2Etablissement.Equals(input.LibelleCommuneEtranger2Etablissement))
                ) && 
                (
                    this.DistributionSpeciale2Etablissement == input.DistributionSpeciale2Etablissement ||
                    (this.DistributionSpeciale2Etablissement != null &&
                    this.DistributionSpeciale2Etablissement.Equals(input.DistributionSpeciale2Etablissement))
                ) && 
                (
                    this.CodeCommune2Etablissement == input.CodeCommune2Etablissement ||
                    (this.CodeCommune2Etablissement != null &&
                    this.CodeCommune2Etablissement.Equals(input.CodeCommune2Etablissement))
                ) && 
                (
                    this.CodeCedex2Etablissement == input.CodeCedex2Etablissement ||
                    (this.CodeCedex2Etablissement != null &&
                    this.CodeCedex2Etablissement.Equals(input.CodeCedex2Etablissement))
                ) && 
                (
                    this.LibelleCedex2Etablissement == input.LibelleCedex2Etablissement ||
                    (this.LibelleCedex2Etablissement != null &&
                    this.LibelleCedex2Etablissement.Equals(input.LibelleCedex2Etablissement))
                ) && 
                (
                    this.CodePaysEtranger2Etablissement == input.CodePaysEtranger2Etablissement ||
                    (this.CodePaysEtranger2Etablissement != null &&
                    this.CodePaysEtranger2Etablissement.Equals(input.CodePaysEtranger2Etablissement))
                ) && 
                (
                    this.LibellePaysEtranger2Etablissement == input.LibellePaysEtranger2Etablissement ||
                    (this.LibellePaysEtranger2Etablissement != null &&
                    this.LibellePaysEtranger2Etablissement.Equals(input.LibellePaysEtranger2Etablissement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ComplementAdresse2Etablissement != null)
                {
                    hashCode = (hashCode * 59) + this.ComplementAdresse2Etablissement.GetHashCode();
                }
                if (this.NumeroVoie2Etablissement != null)
                {
                    hashCode = (hashCode * 59) + this.NumeroVoie2Etablissement.GetHashCode();
                }
                if (this.IndiceRepetition2Etablissement != null)
                {
                    hashCode = (hashCode * 59) + this.IndiceRepetition2Etablissement.GetHashCode();
                }
                if (this.TypeVoie2Etablissement != null)
                {
                    hashCode = (hashCode * 59) + this.TypeVoie2Etablissement.GetHashCode();
                }
                if (this.LibelleVoie2Etablissement != null)
                {
                    hashCode = (hashCode * 59) + this.LibelleVoie2Etablissement.GetHashCode();
                }
                if (this.CodePostal2Etablissement != null)
                {
                    hashCode = (hashCode * 59) + this.CodePostal2Etablissement.GetHashCode();
                }
                if (this.LibelleCommune2Etablissement != null)
                {
                    hashCode = (hashCode * 59) + this.LibelleCommune2Etablissement.GetHashCode();
                }
                if (this.LibelleCommuneEtranger2Etablissement != null)
                {
                    hashCode = (hashCode * 59) + this.LibelleCommuneEtranger2Etablissement.GetHashCode();
                }
                if (this.DistributionSpeciale2Etablissement != null)
                {
                    hashCode = (hashCode * 59) + this.DistributionSpeciale2Etablissement.GetHashCode();
                }
                if (this.CodeCommune2Etablissement != null)
                {
                    hashCode = (hashCode * 59) + this.CodeCommune2Etablissement.GetHashCode();
                }
                if (this.CodeCedex2Etablissement != null)
                {
                    hashCode = (hashCode * 59) + this.CodeCedex2Etablissement.GetHashCode();
                }
                if (this.LibelleCedex2Etablissement != null)
                {
                    hashCode = (hashCode * 59) + this.LibelleCedex2Etablissement.GetHashCode();
                }
                if (this.CodePaysEtranger2Etablissement != null)
                {
                    hashCode = (hashCode * 59) + this.CodePaysEtranger2Etablissement.GetHashCode();
                }
                if (this.LibellePaysEtranger2Etablissement != null)
                {
                    hashCode = (hashCode * 59) + this.LibellePaysEtranger2Etablissement.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
