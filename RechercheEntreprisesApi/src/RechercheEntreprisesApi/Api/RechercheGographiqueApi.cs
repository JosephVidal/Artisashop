/*
 * API Recherche d’entreprises
 *
 * # Bienvenue sur la documentation interactive d'API Recherche d’entreprises ! L’API Recherche d’entreprises permet à tout le monde de rechercher et de trouver  une entreprise française par sa dénomination, ou son adresse. ## Données accessibles dans l'API L’API étant totalement ouverte d'accès, elle comporte des limitations. Ainsi ne sont pas accessibles dans l'API : - les prédécesseurs et successeurs d'un établissement - les entreprises non-diffusibles - les entreprises qui se sont vues refuser leurs immatriculation au RCS  **Attention :** cette API ne permet pas d'accèder aux données complètes de  la  base Sirene, mais uniquement de rechercher une entreprise, par sa dénomination ou son adresse. Pour savoir comment obtenir les données complètes, consultez [notre fiche explicative.](/guides/quelle-api-sirene)  ## Commencer à utiliser l'API L'API est accessible à partir de cette adresse : [https://recherche-entreprises.api.gouv.fr](https://recherche-entreprises.api.gouv.fr)  **Attention :** Vous devez rajouter votre requête sur l’adresse. ## Limite des requêtes    Le serveur accepte un maximum de 7 requêtes par seconde. Au delà, un code 429 est renvoyé indiquant que la volumétrie d'appels a été dépassée.     ## Monitoring de l'API Une supervision du service en temps réel est disponible à cette adresse : [https://stats.uptimerobot.com/kXzwzfk7BE](https://stats.uptimerobot.com/kXzwzfk7BE) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: recherche-entreprises@api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using RechercheEntreprisesApi.Client;
using RechercheEntreprisesApi.Model;

namespace RechercheEntreprisesApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRechercheGographiqueApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Recherche géographique
        /// </summary>
        /// <remarks>
        /// Cet endpoint prend en paramètre une latitude (:lat) et une longitude (:long) et renvoie les unités légales autour de ces coordonnées.  Vous pouvez également préciser un paramètre radius en km(défaut: 5 km).  **Paramètres d&#39;appel :** latitude, longitude, radius, activité principale et section d&#39;activité principale de l&#39;entreprise.
        /// </remarks>
        /// <exception cref="RechercheEntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">Latitude</param>
        /// <param name="_long">Longitude</param>
        /// <param name="radius">Radius de recherche (optional, default to 5F)</param>
        /// <param name="activitePrincipale">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/apet700-rev2&gt;Le code NAF ou code APE, un code d&#39;activité suivant la nomenclature de l&#39;INSEE&lt;/a&gt; (optional)</param>
        /// <param name="sectionActivitePrincipale">&lt;a href&#x3D;https://www.insee.fr/fr/information/2120875&gt;Section de  l&#39;activité principale :&lt;/a&gt;   * &#x60;A&#x60; - Agriculture, sylviculture et pêche   * &#x60;B&#x60; - Industries extractives   * &#x60;C&#x60; - Industrie manufacturière   * &#x60;D&#x60; - Production et distribution d&#39;électricité, de gaz, de vapeur et d&#39;air conditionné   * &#x60;E&#x60; - Production et distribution d&#39;eau ; assainissement, gestion des déchets et dépollution   * &#x60;F&#x60; -  Construction   * &#x60;G&#x60; -  Commerce ; réparation d&#39;automobiles et de motocycles   * &#x60;H&#x60; -  Transports et entreposage   * &#x60;I&#x60; -  Hébergement et restauration   * &#x60;J&#x60; -  Information et communication   * &#x60;K&#x60; -  Activités financières et d&#39;assurance   * &#x60;L&#x60; -  Activités immobilières   * &#x60;M&#x60; -  Activités spécialisées, scientifiques et techniques   * &#x60;N&#x60; -  Activités de services administratifs et de soutien   * &#x60;O&#x60; -  Administration publique   * &#x60;P&#x60; -  Enseignement   * &#x60;Q&#x60; -  Santé humaine et action sociale   * &#x60;R&#x60; -  Arts, spectacles et activités récréatives   * &#x60;S&#x60; -  Autres activités de services   * &#x60;T&#x60; -  Activités des ménages en tant qu&#39;employeurs ; activités indifférenciées des ménages en tant que producteurs de biens et services pour usage propre   * &#x60;U&#x60; -  Activités extra-territoriales  (optional)</param>
        /// <param name="page">Le numéro de la page à retourner (optional, default to 1)</param>
        /// <param name="perPage">Le nombre de résultats par page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NearPointGet200Response</returns>
        NearPointGet200Response NearPointGet(float lat, float _long, float? radius = default(float?), string activitePrincipale = default(string), string sectionActivitePrincipale = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// Recherche géographique
        /// </summary>
        /// <remarks>
        /// Cet endpoint prend en paramètre une latitude (:lat) et une longitude (:long) et renvoie les unités légales autour de ces coordonnées.  Vous pouvez également préciser un paramètre radius en km(défaut: 5 km).  **Paramètres d&#39;appel :** latitude, longitude, radius, activité principale et section d&#39;activité principale de l&#39;entreprise.
        /// </remarks>
        /// <exception cref="RechercheEntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">Latitude</param>
        /// <param name="_long">Longitude</param>
        /// <param name="radius">Radius de recherche (optional, default to 5F)</param>
        /// <param name="activitePrincipale">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/apet700-rev2&gt;Le code NAF ou code APE, un code d&#39;activité suivant la nomenclature de l&#39;INSEE&lt;/a&gt; (optional)</param>
        /// <param name="sectionActivitePrincipale">&lt;a href&#x3D;https://www.insee.fr/fr/information/2120875&gt;Section de  l&#39;activité principale :&lt;/a&gt;   * &#x60;A&#x60; - Agriculture, sylviculture et pêche   * &#x60;B&#x60; - Industries extractives   * &#x60;C&#x60; - Industrie manufacturière   * &#x60;D&#x60; - Production et distribution d&#39;électricité, de gaz, de vapeur et d&#39;air conditionné   * &#x60;E&#x60; - Production et distribution d&#39;eau ; assainissement, gestion des déchets et dépollution   * &#x60;F&#x60; -  Construction   * &#x60;G&#x60; -  Commerce ; réparation d&#39;automobiles et de motocycles   * &#x60;H&#x60; -  Transports et entreposage   * &#x60;I&#x60; -  Hébergement et restauration   * &#x60;J&#x60; -  Information et communication   * &#x60;K&#x60; -  Activités financières et d&#39;assurance   * &#x60;L&#x60; -  Activités immobilières   * &#x60;M&#x60; -  Activités spécialisées, scientifiques et techniques   * &#x60;N&#x60; -  Activités de services administratifs et de soutien   * &#x60;O&#x60; -  Administration publique   * &#x60;P&#x60; -  Enseignement   * &#x60;Q&#x60; -  Santé humaine et action sociale   * &#x60;R&#x60; -  Arts, spectacles et activités récréatives   * &#x60;S&#x60; -  Autres activités de services   * &#x60;T&#x60; -  Activités des ménages en tant qu&#39;employeurs ; activités indifférenciées des ménages en tant que producteurs de biens et services pour usage propre   * &#x60;U&#x60; -  Activités extra-territoriales  (optional)</param>
        /// <param name="page">Le numéro de la page à retourner (optional, default to 1)</param>
        /// <param name="perPage">Le nombre de résultats par page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NearPointGet200Response</returns>
        ApiResponse<NearPointGet200Response> NearPointGetWithHttpInfo(float lat, float _long, float? radius = default(float?), string activitePrincipale = default(string), string sectionActivitePrincipale = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRechercheGographiqueApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Recherche géographique
        /// </summary>
        /// <remarks>
        /// Cet endpoint prend en paramètre une latitude (:lat) et une longitude (:long) et renvoie les unités légales autour de ces coordonnées.  Vous pouvez également préciser un paramètre radius en km(défaut: 5 km).  **Paramètres d&#39;appel :** latitude, longitude, radius, activité principale et section d&#39;activité principale de l&#39;entreprise.
        /// </remarks>
        /// <exception cref="RechercheEntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">Latitude</param>
        /// <param name="_long">Longitude</param>
        /// <param name="radius">Radius de recherche (optional, default to 5F)</param>
        /// <param name="activitePrincipale">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/apet700-rev2&gt;Le code NAF ou code APE, un code d&#39;activité suivant la nomenclature de l&#39;INSEE&lt;/a&gt; (optional)</param>
        /// <param name="sectionActivitePrincipale">&lt;a href&#x3D;https://www.insee.fr/fr/information/2120875&gt;Section de  l&#39;activité principale :&lt;/a&gt;   * &#x60;A&#x60; - Agriculture, sylviculture et pêche   * &#x60;B&#x60; - Industries extractives   * &#x60;C&#x60; - Industrie manufacturière   * &#x60;D&#x60; - Production et distribution d&#39;électricité, de gaz, de vapeur et d&#39;air conditionné   * &#x60;E&#x60; - Production et distribution d&#39;eau ; assainissement, gestion des déchets et dépollution   * &#x60;F&#x60; -  Construction   * &#x60;G&#x60; -  Commerce ; réparation d&#39;automobiles et de motocycles   * &#x60;H&#x60; -  Transports et entreposage   * &#x60;I&#x60; -  Hébergement et restauration   * &#x60;J&#x60; -  Information et communication   * &#x60;K&#x60; -  Activités financières et d&#39;assurance   * &#x60;L&#x60; -  Activités immobilières   * &#x60;M&#x60; -  Activités spécialisées, scientifiques et techniques   * &#x60;N&#x60; -  Activités de services administratifs et de soutien   * &#x60;O&#x60; -  Administration publique   * &#x60;P&#x60; -  Enseignement   * &#x60;Q&#x60; -  Santé humaine et action sociale   * &#x60;R&#x60; -  Arts, spectacles et activités récréatives   * &#x60;S&#x60; -  Autres activités de services   * &#x60;T&#x60; -  Activités des ménages en tant qu&#39;employeurs ; activités indifférenciées des ménages en tant que producteurs de biens et services pour usage propre   * &#x60;U&#x60; -  Activités extra-territoriales  (optional)</param>
        /// <param name="page">Le numéro de la page à retourner (optional, default to 1)</param>
        /// <param name="perPage">Le nombre de résultats par page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NearPointGet200Response</returns>
        System.Threading.Tasks.Task<NearPointGet200Response> NearPointGetAsync(float lat, float _long, float? radius = default(float?), string activitePrincipale = default(string), string sectionActivitePrincipale = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recherche géographique
        /// </summary>
        /// <remarks>
        /// Cet endpoint prend en paramètre une latitude (:lat) et une longitude (:long) et renvoie les unités légales autour de ces coordonnées.  Vous pouvez également préciser un paramètre radius en km(défaut: 5 km).  **Paramètres d&#39;appel :** latitude, longitude, radius, activité principale et section d&#39;activité principale de l&#39;entreprise.
        /// </remarks>
        /// <exception cref="RechercheEntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">Latitude</param>
        /// <param name="_long">Longitude</param>
        /// <param name="radius">Radius de recherche (optional, default to 5F)</param>
        /// <param name="activitePrincipale">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/apet700-rev2&gt;Le code NAF ou code APE, un code d&#39;activité suivant la nomenclature de l&#39;INSEE&lt;/a&gt; (optional)</param>
        /// <param name="sectionActivitePrincipale">&lt;a href&#x3D;https://www.insee.fr/fr/information/2120875&gt;Section de  l&#39;activité principale :&lt;/a&gt;   * &#x60;A&#x60; - Agriculture, sylviculture et pêche   * &#x60;B&#x60; - Industries extractives   * &#x60;C&#x60; - Industrie manufacturière   * &#x60;D&#x60; - Production et distribution d&#39;électricité, de gaz, de vapeur et d&#39;air conditionné   * &#x60;E&#x60; - Production et distribution d&#39;eau ; assainissement, gestion des déchets et dépollution   * &#x60;F&#x60; -  Construction   * &#x60;G&#x60; -  Commerce ; réparation d&#39;automobiles et de motocycles   * &#x60;H&#x60; -  Transports et entreposage   * &#x60;I&#x60; -  Hébergement et restauration   * &#x60;J&#x60; -  Information et communication   * &#x60;K&#x60; -  Activités financières et d&#39;assurance   * &#x60;L&#x60; -  Activités immobilières   * &#x60;M&#x60; -  Activités spécialisées, scientifiques et techniques   * &#x60;N&#x60; -  Activités de services administratifs et de soutien   * &#x60;O&#x60; -  Administration publique   * &#x60;P&#x60; -  Enseignement   * &#x60;Q&#x60; -  Santé humaine et action sociale   * &#x60;R&#x60; -  Arts, spectacles et activités récréatives   * &#x60;S&#x60; -  Autres activités de services   * &#x60;T&#x60; -  Activités des ménages en tant qu&#39;employeurs ; activités indifférenciées des ménages en tant que producteurs de biens et services pour usage propre   * &#x60;U&#x60; -  Activités extra-territoriales  (optional)</param>
        /// <param name="page">Le numéro de la page à retourner (optional, default to 1)</param>
        /// <param name="perPage">Le nombre de résultats par page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NearPointGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<NearPointGet200Response>> NearPointGetWithHttpInfoAsync(float lat, float _long, float? radius = default(float?), string activitePrincipale = default(string), string sectionActivitePrincipale = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRechercheGographiqueApi : IRechercheGographiqueApiSync, IRechercheGographiqueApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RechercheGographiqueApi : IRechercheGographiqueApi
    {
        private RechercheEntreprisesApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RechercheGographiqueApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RechercheGographiqueApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RechercheGographiqueApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RechercheGographiqueApi(string basePath)
        {
            this.Configuration = RechercheEntreprisesApi.Client.Configuration.MergeConfigurations(
                RechercheEntreprisesApi.Client.GlobalConfiguration.Instance,
                new RechercheEntreprisesApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new RechercheEntreprisesApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RechercheEntreprisesApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = RechercheEntreprisesApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RechercheGographiqueApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RechercheGographiqueApi(RechercheEntreprisesApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RechercheEntreprisesApi.Client.Configuration.MergeConfigurations(
                RechercheEntreprisesApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new RechercheEntreprisesApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RechercheEntreprisesApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = RechercheEntreprisesApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RechercheGographiqueApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RechercheGographiqueApi(RechercheEntreprisesApi.Client.ISynchronousClient client, RechercheEntreprisesApi.Client.IAsynchronousClient asyncClient, RechercheEntreprisesApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RechercheEntreprisesApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RechercheEntreprisesApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RechercheEntreprisesApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RechercheEntreprisesApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RechercheEntreprisesApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Recherche géographique Cet endpoint prend en paramètre une latitude (:lat) et une longitude (:long) et renvoie les unités légales autour de ces coordonnées.  Vous pouvez également préciser un paramètre radius en km(défaut: 5 km).  **Paramètres d&#39;appel :** latitude, longitude, radius, activité principale et section d&#39;activité principale de l&#39;entreprise.
        /// </summary>
        /// <exception cref="RechercheEntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">Latitude</param>
        /// <param name="_long">Longitude</param>
        /// <param name="radius">Radius de recherche (optional, default to 5F)</param>
        /// <param name="activitePrincipale">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/apet700-rev2&gt;Le code NAF ou code APE, un code d&#39;activité suivant la nomenclature de l&#39;INSEE&lt;/a&gt; (optional)</param>
        /// <param name="sectionActivitePrincipale">&lt;a href&#x3D;https://www.insee.fr/fr/information/2120875&gt;Section de  l&#39;activité principale :&lt;/a&gt;   * &#x60;A&#x60; - Agriculture, sylviculture et pêche   * &#x60;B&#x60; - Industries extractives   * &#x60;C&#x60; - Industrie manufacturière   * &#x60;D&#x60; - Production et distribution d&#39;électricité, de gaz, de vapeur et d&#39;air conditionné   * &#x60;E&#x60; - Production et distribution d&#39;eau ; assainissement, gestion des déchets et dépollution   * &#x60;F&#x60; -  Construction   * &#x60;G&#x60; -  Commerce ; réparation d&#39;automobiles et de motocycles   * &#x60;H&#x60; -  Transports et entreposage   * &#x60;I&#x60; -  Hébergement et restauration   * &#x60;J&#x60; -  Information et communication   * &#x60;K&#x60; -  Activités financières et d&#39;assurance   * &#x60;L&#x60; -  Activités immobilières   * &#x60;M&#x60; -  Activités spécialisées, scientifiques et techniques   * &#x60;N&#x60; -  Activités de services administratifs et de soutien   * &#x60;O&#x60; -  Administration publique   * &#x60;P&#x60; -  Enseignement   * &#x60;Q&#x60; -  Santé humaine et action sociale   * &#x60;R&#x60; -  Arts, spectacles et activités récréatives   * &#x60;S&#x60; -  Autres activités de services   * &#x60;T&#x60; -  Activités des ménages en tant qu&#39;employeurs ; activités indifférenciées des ménages en tant que producteurs de biens et services pour usage propre   * &#x60;U&#x60; -  Activités extra-territoriales  (optional)</param>
        /// <param name="page">Le numéro de la page à retourner (optional, default to 1)</param>
        /// <param name="perPage">Le nombre de résultats par page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NearPointGet200Response</returns>
        public NearPointGet200Response NearPointGet(float lat, float _long, float? radius = default(float?), string activitePrincipale = default(string), string sectionActivitePrincipale = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            RechercheEntreprisesApi.Client.ApiResponse<NearPointGet200Response> localVarResponse = NearPointGetWithHttpInfo(lat, _long, radius, activitePrincipale, sectionActivitePrincipale, page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recherche géographique Cet endpoint prend en paramètre une latitude (:lat) et une longitude (:long) et renvoie les unités légales autour de ces coordonnées.  Vous pouvez également préciser un paramètre radius en km(défaut: 5 km).  **Paramètres d&#39;appel :** latitude, longitude, radius, activité principale et section d&#39;activité principale de l&#39;entreprise.
        /// </summary>
        /// <exception cref="RechercheEntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">Latitude</param>
        /// <param name="_long">Longitude</param>
        /// <param name="radius">Radius de recherche (optional, default to 5F)</param>
        /// <param name="activitePrincipale">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/apet700-rev2&gt;Le code NAF ou code APE, un code d&#39;activité suivant la nomenclature de l&#39;INSEE&lt;/a&gt; (optional)</param>
        /// <param name="sectionActivitePrincipale">&lt;a href&#x3D;https://www.insee.fr/fr/information/2120875&gt;Section de  l&#39;activité principale :&lt;/a&gt;   * &#x60;A&#x60; - Agriculture, sylviculture et pêche   * &#x60;B&#x60; - Industries extractives   * &#x60;C&#x60; - Industrie manufacturière   * &#x60;D&#x60; - Production et distribution d&#39;électricité, de gaz, de vapeur et d&#39;air conditionné   * &#x60;E&#x60; - Production et distribution d&#39;eau ; assainissement, gestion des déchets et dépollution   * &#x60;F&#x60; -  Construction   * &#x60;G&#x60; -  Commerce ; réparation d&#39;automobiles et de motocycles   * &#x60;H&#x60; -  Transports et entreposage   * &#x60;I&#x60; -  Hébergement et restauration   * &#x60;J&#x60; -  Information et communication   * &#x60;K&#x60; -  Activités financières et d&#39;assurance   * &#x60;L&#x60; -  Activités immobilières   * &#x60;M&#x60; -  Activités spécialisées, scientifiques et techniques   * &#x60;N&#x60; -  Activités de services administratifs et de soutien   * &#x60;O&#x60; -  Administration publique   * &#x60;P&#x60; -  Enseignement   * &#x60;Q&#x60; -  Santé humaine et action sociale   * &#x60;R&#x60; -  Arts, spectacles et activités récréatives   * &#x60;S&#x60; -  Autres activités de services   * &#x60;T&#x60; -  Activités des ménages en tant qu&#39;employeurs ; activités indifférenciées des ménages en tant que producteurs de biens et services pour usage propre   * &#x60;U&#x60; -  Activités extra-territoriales  (optional)</param>
        /// <param name="page">Le numéro de la page à retourner (optional, default to 1)</param>
        /// <param name="perPage">Le nombre de résultats par page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NearPointGet200Response</returns>
        public RechercheEntreprisesApi.Client.ApiResponse<NearPointGet200Response> NearPointGetWithHttpInfo(float lat, float _long, float? radius = default(float?), string activitePrincipale = default(string), string sectionActivitePrincipale = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            RechercheEntreprisesApi.Client.RequestOptions localVarRequestOptions = new RechercheEntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RechercheEntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = RechercheEntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "lat", lat));
            localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "long", _long));
            if (radius != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "radius", radius));
            }
            if (activitePrincipale != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "activite_principale", activitePrincipale));
            }
            if (sectionActivitePrincipale != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "section_activite_principale", sectionActivitePrincipale));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "RechercheGographiqueApi.NearPointGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<NearPointGet200Response>("/near_point", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NearPointGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recherche géographique Cet endpoint prend en paramètre une latitude (:lat) et une longitude (:long) et renvoie les unités légales autour de ces coordonnées.  Vous pouvez également préciser un paramètre radius en km(défaut: 5 km).  **Paramètres d&#39;appel :** latitude, longitude, radius, activité principale et section d&#39;activité principale de l&#39;entreprise.
        /// </summary>
        /// <exception cref="RechercheEntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">Latitude</param>
        /// <param name="_long">Longitude</param>
        /// <param name="radius">Radius de recherche (optional, default to 5F)</param>
        /// <param name="activitePrincipale">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/apet700-rev2&gt;Le code NAF ou code APE, un code d&#39;activité suivant la nomenclature de l&#39;INSEE&lt;/a&gt; (optional)</param>
        /// <param name="sectionActivitePrincipale">&lt;a href&#x3D;https://www.insee.fr/fr/information/2120875&gt;Section de  l&#39;activité principale :&lt;/a&gt;   * &#x60;A&#x60; - Agriculture, sylviculture et pêche   * &#x60;B&#x60; - Industries extractives   * &#x60;C&#x60; - Industrie manufacturière   * &#x60;D&#x60; - Production et distribution d&#39;électricité, de gaz, de vapeur et d&#39;air conditionné   * &#x60;E&#x60; - Production et distribution d&#39;eau ; assainissement, gestion des déchets et dépollution   * &#x60;F&#x60; -  Construction   * &#x60;G&#x60; -  Commerce ; réparation d&#39;automobiles et de motocycles   * &#x60;H&#x60; -  Transports et entreposage   * &#x60;I&#x60; -  Hébergement et restauration   * &#x60;J&#x60; -  Information et communication   * &#x60;K&#x60; -  Activités financières et d&#39;assurance   * &#x60;L&#x60; -  Activités immobilières   * &#x60;M&#x60; -  Activités spécialisées, scientifiques et techniques   * &#x60;N&#x60; -  Activités de services administratifs et de soutien   * &#x60;O&#x60; -  Administration publique   * &#x60;P&#x60; -  Enseignement   * &#x60;Q&#x60; -  Santé humaine et action sociale   * &#x60;R&#x60; -  Arts, spectacles et activités récréatives   * &#x60;S&#x60; -  Autres activités de services   * &#x60;T&#x60; -  Activités des ménages en tant qu&#39;employeurs ; activités indifférenciées des ménages en tant que producteurs de biens et services pour usage propre   * &#x60;U&#x60; -  Activités extra-territoriales  (optional)</param>
        /// <param name="page">Le numéro de la page à retourner (optional, default to 1)</param>
        /// <param name="perPage">Le nombre de résultats par page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NearPointGet200Response</returns>
        public async System.Threading.Tasks.Task<NearPointGet200Response> NearPointGetAsync(float lat, float _long, float? radius = default(float?), string activitePrincipale = default(string), string sectionActivitePrincipale = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RechercheEntreprisesApi.Client.ApiResponse<NearPointGet200Response> localVarResponse = await NearPointGetWithHttpInfoAsync(lat, _long, radius, activitePrincipale, sectionActivitePrincipale, page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recherche géographique Cet endpoint prend en paramètre une latitude (:lat) et une longitude (:long) et renvoie les unités légales autour de ces coordonnées.  Vous pouvez également préciser un paramètre radius en km(défaut: 5 km).  **Paramètres d&#39;appel :** latitude, longitude, radius, activité principale et section d&#39;activité principale de l&#39;entreprise.
        /// </summary>
        /// <exception cref="RechercheEntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">Latitude</param>
        /// <param name="_long">Longitude</param>
        /// <param name="radius">Radius de recherche (optional, default to 5F)</param>
        /// <param name="activitePrincipale">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/apet700-rev2&gt;Le code NAF ou code APE, un code d&#39;activité suivant la nomenclature de l&#39;INSEE&lt;/a&gt; (optional)</param>
        /// <param name="sectionActivitePrincipale">&lt;a href&#x3D;https://www.insee.fr/fr/information/2120875&gt;Section de  l&#39;activité principale :&lt;/a&gt;   * &#x60;A&#x60; - Agriculture, sylviculture et pêche   * &#x60;B&#x60; - Industries extractives   * &#x60;C&#x60; - Industrie manufacturière   * &#x60;D&#x60; - Production et distribution d&#39;électricité, de gaz, de vapeur et d&#39;air conditionné   * &#x60;E&#x60; - Production et distribution d&#39;eau ; assainissement, gestion des déchets et dépollution   * &#x60;F&#x60; -  Construction   * &#x60;G&#x60; -  Commerce ; réparation d&#39;automobiles et de motocycles   * &#x60;H&#x60; -  Transports et entreposage   * &#x60;I&#x60; -  Hébergement et restauration   * &#x60;J&#x60; -  Information et communication   * &#x60;K&#x60; -  Activités financières et d&#39;assurance   * &#x60;L&#x60; -  Activités immobilières   * &#x60;M&#x60; -  Activités spécialisées, scientifiques et techniques   * &#x60;N&#x60; -  Activités de services administratifs et de soutien   * &#x60;O&#x60; -  Administration publique   * &#x60;P&#x60; -  Enseignement   * &#x60;Q&#x60; -  Santé humaine et action sociale   * &#x60;R&#x60; -  Arts, spectacles et activités récréatives   * &#x60;S&#x60; -  Autres activités de services   * &#x60;T&#x60; -  Activités des ménages en tant qu&#39;employeurs ; activités indifférenciées des ménages en tant que producteurs de biens et services pour usage propre   * &#x60;U&#x60; -  Activités extra-territoriales  (optional)</param>
        /// <param name="page">Le numéro de la page à retourner (optional, default to 1)</param>
        /// <param name="perPage">Le nombre de résultats par page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NearPointGet200Response)</returns>
        public async System.Threading.Tasks.Task<RechercheEntreprisesApi.Client.ApiResponse<NearPointGet200Response>> NearPointGetWithHttpInfoAsync(float lat, float _long, float? radius = default(float?), string activitePrincipale = default(string), string sectionActivitePrincipale = default(string), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RechercheEntreprisesApi.Client.RequestOptions localVarRequestOptions = new RechercheEntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RechercheEntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = RechercheEntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "lat", lat));
            localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "long", _long));
            if (radius != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "radius", radius));
            }
            if (activitePrincipale != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "activite_principale", activitePrincipale));
            }
            if (sectionActivitePrincipale != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "section_activite_principale", sectionActivitePrincipale));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "RechercheGographiqueApi.NearPointGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NearPointGet200Response>("/near_point", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NearPointGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
