/*
 * API Recherche d’entreprises
 *
 * # Bienvenue sur la documentation interactive d'API Recherche d’entreprises ! L’API Recherche d’entreprises permet à tout le monde de rechercher et de trouver  une entreprise française par sa dénomination, ou son adresse. ## Données accessibles dans l'API L’API étant totalement ouverte d'accès, elle comporte des limitations. Ainsi ne sont pas accessibles dans l'API : - les prédécesseurs et successeurs d'un établissement - les entreprises non-diffusibles - les entreprises qui se sont vues refuser leurs immatriculation au RCS  **Attention :** cette API ne permet pas d'accèder aux données complètes de  la  base Sirene, mais uniquement de rechercher une entreprise, par sa dénomination ou son adresse. Pour savoir comment obtenir les données complètes, consultez [notre fiche explicative.](/guides/quelle-api-sirene)  ## Commencer à utiliser l'API L'API est accessible à partir de cette adresse : [https://recherche-entreprises.api.gouv.fr](https://recherche-entreprises.api.gouv.fr)  **Attention :** Vous devez rajouter votre requête sur l’adresse. ## Limite des requêtes    Le serveur accepte un maximum de 7 requêtes par seconde. Au delà, un code 429 est renvoyé indiquant que la volumétrie d'appels a été dépassée.     ## Monitoring de l'API Une supervision du service en temps réel est disponible à cette adresse : [https://stats.uptimerobot.com/kXzwzfk7BE](https://stats.uptimerobot.com/kXzwzfk7BE) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: recherche-entreprises@api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = RechercheEntreprisesApi.Client.OpenAPIDateConverter;

namespace RechercheEntreprisesApi.Model
{
    /// <summary>
    /// NearPointGet200ResponseResultsInnerSiege
    /// </summary>
    [DataContract(Name = "_near_point_get_200_response_results_inner_siege")]
    public partial class NearPointGet200ResponseResultsInnerSiege : IEquatable<NearPointGet200ResponseResultsInnerSiege>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NearPointGet200ResponseResultsInnerSiege" /> class.
        /// </summary>
        /// <param name="siret">le numéro unique de l&#39;établissement siège.</param>
        /// <param name="dateCreation">Date de création du siège.</param>
        /// <param name="trancheEffectifSalarie">trancheEffectifSalarie.</param>
        /// <param name="dateDebutActivite">dateDebutActivite.</param>
        /// <param name="etatAdiministratif">etatAdiministratif.</param>
        /// <param name="activitePrincipale">activitePrincipale.</param>
        /// <param name="complementAdresse">complementAdresse.</param>
        /// <param name="numeroVoie">numeroVoie.</param>
        /// <param name="indiceRepetition">indiceRepetition.</param>
        /// <param name="typeVoie">typeVoie.</param>
        /// <param name="libelleVoie">libelleVoie.</param>
        /// <param name="distributionSpeciale">distributionSpeciale.</param>
        /// <param name="cedex">cedex.</param>
        /// <param name="libelleCedex">libelleCedex.</param>
        /// <param name="commune">commune.</param>
        /// <param name="libelleCommune">libelleCommune.</param>
        /// <param name="codePaysEtranger">codePaysEtranger.</param>
        /// <param name="libelleCommuneEtranger">libelleCommuneEtranger.</param>
        /// <param name="libellePaysEtranger">libellePaysEtranger.</param>
        /// <param name="adresseComplete">adresseComplete.</param>
        /// <param name="adresseCompleteSecondaire">adresseCompleteSecondaire.</param>
        /// <param name="codePostal">codePostal.</param>
        /// <param name="departement">departement.</param>
        /// <param name="geoId">geoId.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="activitePrincipaleRegistreMetier">activitePrincipaleRegistreMetier.</param>
        public NearPointGet200ResponseResultsInnerSiege(string siret = default(string), DateTime? dateCreation = default(DateTime?), string trancheEffectifSalarie = default(string), DateTime? dateDebutActivite = default(DateTime?), string etatAdiministratif = default(string), string activitePrincipale = default(string), string complementAdresse = default(string), string numeroVoie = default(string), string indiceRepetition = default(string), string typeVoie = default(string), string libelleVoie = default(string), string distributionSpeciale = default(string), string cedex = default(string), string libelleCedex = default(string), string commune = default(string), string libelleCommune = default(string), string codePaysEtranger = default(string), string libelleCommuneEtranger = default(string), string libellePaysEtranger = default(string), string adresseComplete = default(string), string adresseCompleteSecondaire = default(string), string codePostal = default(string), string departement = default(string), string geoId = default(string), float? longitude = default(float?), float? latitude = default(float?), string activitePrincipaleRegistreMetier = default(string))
        {
            this.Siret = siret;
            this.DateCreation = dateCreation;
            this.TrancheEffectifSalarie = trancheEffectifSalarie;
            this.DateDebutActivite = dateDebutActivite;
            this.EtatAdiministratif = etatAdiministratif;
            this.ActivitePrincipale = activitePrincipale;
            this.ComplementAdresse = complementAdresse;
            this.NumeroVoie = numeroVoie;
            this.IndiceRepetition = indiceRepetition;
            this.TypeVoie = typeVoie;
            this.LibelleVoie = libelleVoie;
            this.DistributionSpeciale = distributionSpeciale;
            this.Cedex = cedex;
            this.LibelleCedex = libelleCedex;
            this.Commune = commune;
            this.LibelleCommune = libelleCommune;
            this.CodePaysEtranger = codePaysEtranger;
            this.LibelleCommuneEtranger = libelleCommuneEtranger;
            this.LibellePaysEtranger = libellePaysEtranger;
            this.AdresseComplete = adresseComplete;
            this.AdresseCompleteSecondaire = adresseCompleteSecondaire;
            this.CodePostal = codePostal;
            this.Departement = departement;
            this.GeoId = geoId;
            this.Longitude = longitude;
            this.Latitude = latitude;
            this.ActivitePrincipaleRegistreMetier = activitePrincipaleRegistreMetier;
        }

        /// <summary>
        /// le numéro unique de l&#39;établissement siège
        /// </summary>
        /// <value>le numéro unique de l&#39;établissement siège</value>
        [DataMember(Name = "siret", EmitDefaultValue = false)]
        public string Siret { get; set; }

        /// <summary>
        /// Date de création du siège
        /// </summary>
        /// <value>Date de création du siège</value>
        [DataMember(Name = "date_creation", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? DateCreation { get; set; }

        /// <summary>
        /// Gets or Sets TrancheEffectifSalarie
        /// </summary>
        [DataMember(Name = "tranche_effectif_salarie", EmitDefaultValue = false)]
        public string TrancheEffectifSalarie { get; set; }

        /// <summary>
        /// Gets or Sets DateDebutActivite
        /// </summary>
        [DataMember(Name = "date_debut_activite", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? DateDebutActivite { get; set; }

        /// <summary>
        /// Gets or Sets EtatAdiministratif
        /// </summary>
        [DataMember(Name = "etat_adiministratif", EmitDefaultValue = false)]
        public string EtatAdiministratif { get; set; }

        /// <summary>
        /// Gets or Sets ActivitePrincipale
        /// </summary>
        [DataMember(Name = "activite_principale", EmitDefaultValue = false)]
        public string ActivitePrincipale { get; set; }

        /// <summary>
        /// Gets or Sets ComplementAdresse
        /// </summary>
        [DataMember(Name = "complement_adresse", EmitDefaultValue = false)]
        public string ComplementAdresse { get; set; }

        /// <summary>
        /// Gets or Sets NumeroVoie
        /// </summary>
        [DataMember(Name = "numero_voie", EmitDefaultValue = false)]
        public string NumeroVoie { get; set; }

        /// <summary>
        /// Gets or Sets IndiceRepetition
        /// </summary>
        [DataMember(Name = "indice_repetition", EmitDefaultValue = true)]
        public string IndiceRepetition { get; set; }

        /// <summary>
        /// Gets or Sets TypeVoie
        /// </summary>
        [DataMember(Name = "type_voie", EmitDefaultValue = false)]
        public string TypeVoie { get; set; }

        /// <summary>
        /// Gets or Sets LibelleVoie
        /// </summary>
        [DataMember(Name = "libelle_voie", EmitDefaultValue = false)]
        public string LibelleVoie { get; set; }

        /// <summary>
        /// Gets or Sets DistributionSpeciale
        /// </summary>
        [DataMember(Name = "distribution_speciale", EmitDefaultValue = true)]
        public string DistributionSpeciale { get; set; }

        /// <summary>
        /// Gets or Sets Cedex
        /// </summary>
        [DataMember(Name = "cedex", EmitDefaultValue = true)]
        public string Cedex { get; set; }

        /// <summary>
        /// Gets or Sets LibelleCedex
        /// </summary>
        [DataMember(Name = "libelle_cedex", EmitDefaultValue = true)]
        public string LibelleCedex { get; set; }

        /// <summary>
        /// Gets or Sets Commune
        /// </summary>
        [DataMember(Name = "commune", EmitDefaultValue = false)]
        public string Commune { get; set; }

        /// <summary>
        /// Gets or Sets LibelleCommune
        /// </summary>
        [DataMember(Name = "libelle_commune", EmitDefaultValue = false)]
        public string LibelleCommune { get; set; }

        /// <summary>
        /// Gets or Sets CodePaysEtranger
        /// </summary>
        [DataMember(Name = "code_pays_etranger", EmitDefaultValue = true)]
        public string CodePaysEtranger { get; set; }

        /// <summary>
        /// Gets or Sets LibelleCommuneEtranger
        /// </summary>
        [DataMember(Name = "libelle_commune_etranger", EmitDefaultValue = true)]
        public string LibelleCommuneEtranger { get; set; }

        /// <summary>
        /// Gets or Sets LibellePaysEtranger
        /// </summary>
        [DataMember(Name = "libelle_pays_etranger", EmitDefaultValue = true)]
        public string LibellePaysEtranger { get; set; }

        /// <summary>
        /// Gets or Sets AdresseComplete
        /// </summary>
        [DataMember(Name = "adresse_complete", EmitDefaultValue = false)]
        public string AdresseComplete { get; set; }

        /// <summary>
        /// Gets or Sets AdresseCompleteSecondaire
        /// </summary>
        [DataMember(Name = "adresse_complete_secondaire", EmitDefaultValue = true)]
        public string AdresseCompleteSecondaire { get; set; }

        /// <summary>
        /// Gets or Sets CodePostal
        /// </summary>
        [DataMember(Name = "code_postal", EmitDefaultValue = false)]
        public string CodePostal { get; set; }

        /// <summary>
        /// Gets or Sets Departement
        /// </summary>
        [DataMember(Name = "departement", EmitDefaultValue = false)]
        public string Departement { get; set; }

        /// <summary>
        /// Gets or Sets GeoId
        /// </summary>
        [DataMember(Name = "geo_id", EmitDefaultValue = false)]
        public string GeoId { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name = "longitude", EmitDefaultValue = true)]
        public float? Longitude { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name = "latitude", EmitDefaultValue = true)]
        public float? Latitude { get; set; }

        /// <summary>
        /// Gets or Sets ActivitePrincipaleRegistreMetier
        /// </summary>
        [DataMember(Name = "activite_principale_registre_metier", EmitDefaultValue = true)]
        public string ActivitePrincipaleRegistreMetier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NearPointGet200ResponseResultsInnerSiege {\n");
            sb.Append("  Siret: ").Append(Siret).Append("\n");
            sb.Append("  DateCreation: ").Append(DateCreation).Append("\n");
            sb.Append("  TrancheEffectifSalarie: ").Append(TrancheEffectifSalarie).Append("\n");
            sb.Append("  DateDebutActivite: ").Append(DateDebutActivite).Append("\n");
            sb.Append("  EtatAdiministratif: ").Append(EtatAdiministratif).Append("\n");
            sb.Append("  ActivitePrincipale: ").Append(ActivitePrincipale).Append("\n");
            sb.Append("  ComplementAdresse: ").Append(ComplementAdresse).Append("\n");
            sb.Append("  NumeroVoie: ").Append(NumeroVoie).Append("\n");
            sb.Append("  IndiceRepetition: ").Append(IndiceRepetition).Append("\n");
            sb.Append("  TypeVoie: ").Append(TypeVoie).Append("\n");
            sb.Append("  LibelleVoie: ").Append(LibelleVoie).Append("\n");
            sb.Append("  DistributionSpeciale: ").Append(DistributionSpeciale).Append("\n");
            sb.Append("  Cedex: ").Append(Cedex).Append("\n");
            sb.Append("  LibelleCedex: ").Append(LibelleCedex).Append("\n");
            sb.Append("  Commune: ").Append(Commune).Append("\n");
            sb.Append("  LibelleCommune: ").Append(LibelleCommune).Append("\n");
            sb.Append("  CodePaysEtranger: ").Append(CodePaysEtranger).Append("\n");
            sb.Append("  LibelleCommuneEtranger: ").Append(LibelleCommuneEtranger).Append("\n");
            sb.Append("  LibellePaysEtranger: ").Append(LibellePaysEtranger).Append("\n");
            sb.Append("  AdresseComplete: ").Append(AdresseComplete).Append("\n");
            sb.Append("  AdresseCompleteSecondaire: ").Append(AdresseCompleteSecondaire).Append("\n");
            sb.Append("  CodePostal: ").Append(CodePostal).Append("\n");
            sb.Append("  Departement: ").Append(Departement).Append("\n");
            sb.Append("  GeoId: ").Append(GeoId).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  ActivitePrincipaleRegistreMetier: ").Append(ActivitePrincipaleRegistreMetier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NearPointGet200ResponseResultsInnerSiege);
        }

        /// <summary>
        /// Returns true if NearPointGet200ResponseResultsInnerSiege instances are equal
        /// </summary>
        /// <param name="input">Instance of NearPointGet200ResponseResultsInnerSiege to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NearPointGet200ResponseResultsInnerSiege input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Siret == input.Siret ||
                    (this.Siret != null &&
                    this.Siret.Equals(input.Siret))
                ) && 
                (
                    this.DateCreation == input.DateCreation ||
                    (this.DateCreation != null &&
                    this.DateCreation.Equals(input.DateCreation))
                ) && 
                (
                    this.TrancheEffectifSalarie == input.TrancheEffectifSalarie ||
                    (this.TrancheEffectifSalarie != null &&
                    this.TrancheEffectifSalarie.Equals(input.TrancheEffectifSalarie))
                ) && 
                (
                    this.DateDebutActivite == input.DateDebutActivite ||
                    (this.DateDebutActivite != null &&
                    this.DateDebutActivite.Equals(input.DateDebutActivite))
                ) && 
                (
                    this.EtatAdiministratif == input.EtatAdiministratif ||
                    (this.EtatAdiministratif != null &&
                    this.EtatAdiministratif.Equals(input.EtatAdiministratif))
                ) && 
                (
                    this.ActivitePrincipale == input.ActivitePrincipale ||
                    (this.ActivitePrincipale != null &&
                    this.ActivitePrincipale.Equals(input.ActivitePrincipale))
                ) && 
                (
                    this.ComplementAdresse == input.ComplementAdresse ||
                    (this.ComplementAdresse != null &&
                    this.ComplementAdresse.Equals(input.ComplementAdresse))
                ) && 
                (
                    this.NumeroVoie == input.NumeroVoie ||
                    (this.NumeroVoie != null &&
                    this.NumeroVoie.Equals(input.NumeroVoie))
                ) && 
                (
                    this.IndiceRepetition == input.IndiceRepetition ||
                    (this.IndiceRepetition != null &&
                    this.IndiceRepetition.Equals(input.IndiceRepetition))
                ) && 
                (
                    this.TypeVoie == input.TypeVoie ||
                    (this.TypeVoie != null &&
                    this.TypeVoie.Equals(input.TypeVoie))
                ) && 
                (
                    this.LibelleVoie == input.LibelleVoie ||
                    (this.LibelleVoie != null &&
                    this.LibelleVoie.Equals(input.LibelleVoie))
                ) && 
                (
                    this.DistributionSpeciale == input.DistributionSpeciale ||
                    (this.DistributionSpeciale != null &&
                    this.DistributionSpeciale.Equals(input.DistributionSpeciale))
                ) && 
                (
                    this.Cedex == input.Cedex ||
                    (this.Cedex != null &&
                    this.Cedex.Equals(input.Cedex))
                ) && 
                (
                    this.LibelleCedex == input.LibelleCedex ||
                    (this.LibelleCedex != null &&
                    this.LibelleCedex.Equals(input.LibelleCedex))
                ) && 
                (
                    this.Commune == input.Commune ||
                    (this.Commune != null &&
                    this.Commune.Equals(input.Commune))
                ) && 
                (
                    this.LibelleCommune == input.LibelleCommune ||
                    (this.LibelleCommune != null &&
                    this.LibelleCommune.Equals(input.LibelleCommune))
                ) && 
                (
                    this.CodePaysEtranger == input.CodePaysEtranger ||
                    (this.CodePaysEtranger != null &&
                    this.CodePaysEtranger.Equals(input.CodePaysEtranger))
                ) && 
                (
                    this.LibelleCommuneEtranger == input.LibelleCommuneEtranger ||
                    (this.LibelleCommuneEtranger != null &&
                    this.LibelleCommuneEtranger.Equals(input.LibelleCommuneEtranger))
                ) && 
                (
                    this.LibellePaysEtranger == input.LibellePaysEtranger ||
                    (this.LibellePaysEtranger != null &&
                    this.LibellePaysEtranger.Equals(input.LibellePaysEtranger))
                ) && 
                (
                    this.AdresseComplete == input.AdresseComplete ||
                    (this.AdresseComplete != null &&
                    this.AdresseComplete.Equals(input.AdresseComplete))
                ) && 
                (
                    this.AdresseCompleteSecondaire == input.AdresseCompleteSecondaire ||
                    (this.AdresseCompleteSecondaire != null &&
                    this.AdresseCompleteSecondaire.Equals(input.AdresseCompleteSecondaire))
                ) && 
                (
                    this.CodePostal == input.CodePostal ||
                    (this.CodePostal != null &&
                    this.CodePostal.Equals(input.CodePostal))
                ) && 
                (
                    this.Departement == input.Departement ||
                    (this.Departement != null &&
                    this.Departement.Equals(input.Departement))
                ) && 
                (
                    this.GeoId == input.GeoId ||
                    (this.GeoId != null &&
                    this.GeoId.Equals(input.GeoId))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.ActivitePrincipaleRegistreMetier == input.ActivitePrincipaleRegistreMetier ||
                    (this.ActivitePrincipaleRegistreMetier != null &&
                    this.ActivitePrincipaleRegistreMetier.Equals(input.ActivitePrincipaleRegistreMetier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Siret != null)
                {
                    hashCode = (hashCode * 59) + this.Siret.GetHashCode();
                }
                if (this.DateCreation != null)
                {
                    hashCode = (hashCode * 59) + this.DateCreation.GetHashCode();
                }
                if (this.TrancheEffectifSalarie != null)
                {
                    hashCode = (hashCode * 59) + this.TrancheEffectifSalarie.GetHashCode();
                }
                if (this.DateDebutActivite != null)
                {
                    hashCode = (hashCode * 59) + this.DateDebutActivite.GetHashCode();
                }
                if (this.EtatAdiministratif != null)
                {
                    hashCode = (hashCode * 59) + this.EtatAdiministratif.GetHashCode();
                }
                if (this.ActivitePrincipale != null)
                {
                    hashCode = (hashCode * 59) + this.ActivitePrincipale.GetHashCode();
                }
                if (this.ComplementAdresse != null)
                {
                    hashCode = (hashCode * 59) + this.ComplementAdresse.GetHashCode();
                }
                if (this.NumeroVoie != null)
                {
                    hashCode = (hashCode * 59) + this.NumeroVoie.GetHashCode();
                }
                if (this.IndiceRepetition != null)
                {
                    hashCode = (hashCode * 59) + this.IndiceRepetition.GetHashCode();
                }
                if (this.TypeVoie != null)
                {
                    hashCode = (hashCode * 59) + this.TypeVoie.GetHashCode();
                }
                if (this.LibelleVoie != null)
                {
                    hashCode = (hashCode * 59) + this.LibelleVoie.GetHashCode();
                }
                if (this.DistributionSpeciale != null)
                {
                    hashCode = (hashCode * 59) + this.DistributionSpeciale.GetHashCode();
                }
                if (this.Cedex != null)
                {
                    hashCode = (hashCode * 59) + this.Cedex.GetHashCode();
                }
                if (this.LibelleCedex != null)
                {
                    hashCode = (hashCode * 59) + this.LibelleCedex.GetHashCode();
                }
                if (this.Commune != null)
                {
                    hashCode = (hashCode * 59) + this.Commune.GetHashCode();
                }
                if (this.LibelleCommune != null)
                {
                    hashCode = (hashCode * 59) + this.LibelleCommune.GetHashCode();
                }
                if (this.CodePaysEtranger != null)
                {
                    hashCode = (hashCode * 59) + this.CodePaysEtranger.GetHashCode();
                }
                if (this.LibelleCommuneEtranger != null)
                {
                    hashCode = (hashCode * 59) + this.LibelleCommuneEtranger.GetHashCode();
                }
                if (this.LibellePaysEtranger != null)
                {
                    hashCode = (hashCode * 59) + this.LibellePaysEtranger.GetHashCode();
                }
                if (this.AdresseComplete != null)
                {
                    hashCode = (hashCode * 59) + this.AdresseComplete.GetHashCode();
                }
                if (this.AdresseCompleteSecondaire != null)
                {
                    hashCode = (hashCode * 59) + this.AdresseCompleteSecondaire.GetHashCode();
                }
                if (this.CodePostal != null)
                {
                    hashCode = (hashCode * 59) + this.CodePostal.GetHashCode();
                }
                if (this.Departement != null)
                {
                    hashCode = (hashCode * 59) + this.Departement.GetHashCode();
                }
                if (this.GeoId != null)
                {
                    hashCode = (hashCode * 59) + this.GeoId.GetHashCode();
                }
                if (this.Longitude != null)
                {
                    hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                }
                if (this.Latitude != null)
                {
                    hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                }
                if (this.ActivitePrincipaleRegistreMetier != null)
                {
                    hashCode = (hashCode * 59) + this.ActivitePrincipaleRegistreMetier.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CodePostal (string) pattern
            Regex regexCodePostal = new Regex(@"^((0[1-9])|([1-8][0-9])|(9[0-8])|(2A)|(2B))[0-9]{3}$", RegexOptions.CultureInvariant);
            if (false == regexCodePostal.Match(this.CodePostal).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CodePostal, must match a pattern of " + regexCodePostal, new [] { "CodePostal" });
            }

            // Departement (string) pattern
            Regex regexDepartement = new Regex(@"\\b([013-8]\\d?|2[aAbB1-9]?|9[0-59]?|97[12346])\\b", RegexOptions.CultureInvariant);
            if (false == regexDepartement.Match(this.Departement).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Departement, must match a pattern of " + regexDepartement, new [] { "Departement" });
            }

            yield break;
        }
    }

}
