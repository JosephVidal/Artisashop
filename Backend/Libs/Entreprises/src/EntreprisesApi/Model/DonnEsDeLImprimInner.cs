/*
 * API Entreprise
 *
 * Cette page contient la documentation technique pour accéder à API Entreprise. Les API étant accessible uniquement sous habilitation, l'interaction avec l'environnement de production n'est possible que si vous êtes **en possession d'une clé d'accès (jeton).  ### Comment tester l'API ?  Il est possible de tester les API via notre environnement de **staging** qui vous retournera systématiquement des données fictives.  Il est nécessaire d'utiliser le jeton de staging indiqué ci-dessous.  - --  *eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1MmE1YmZjMi1jMzUwLTQ4ZjQtYjY5Ni05ZWE3NmRiM2VmMjkiLCJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJzY29wZXMiOlsiY2VydGlmaWNhdF9yZ2VfYWRlbWUiLCJtc2FfY290aXNhdGlvbnMiLCJlbnRyZXByaXNlcyIsImV4dHJhaXRzX3JjcyIsImNlcnRpZmljYXRfb3BxaWJpIiwiYXNzb2NpYXRpb25zIiwiZXRhYmxpc3NlbWVudHMiLCJmbnRwX2NhcnRlX3BybyIsInF1YWxpYmF0IiwiZW50cmVwcmlzZXNfYXJ0aXNhbmFsZXMiLCJjZXJ0aWZpY2F0X2NuZXRwIiwiZW9yaV9kb3VhbmVzIiwicHJvYnRwIiwiYWN0ZXNfaW5waSIsImV4dHJhaXRfY291cnRfaW5waSIsImF0dGVzdGF0aW9uc19zb2NpYWxlcyIsImxpYXNzZV9maXNjYWxlIiwiYXR0ZXN0YXRpb25zX2Zpc2NhbGVzIiwiZXhlcmNpY2VzIiwiY29udmVudGlvbnNfY29sbGVjdGl2ZXMiLCJiaWxhbnNfaW5waSIsImRvY3VtZW50c19hc3NvY2lhdGlvbiIsImNlcnRpZmljYXRfYWdlbmNlX2JpbyIsImJpbGFuc19lbnRyZXByaXNlX2JkZiIsImF0dGVzdGF0aW9uc19hZ2VmaXBoIiwibWVzcmlfaWRlbnRpZmlhbnQiLCJtZXNyaV9pZGVudGl0ZSIsIm1lc3JpX2luc2NyaXB0aW9uX2V0dWRpYW50IiwibWVzcmlfaW5zY3JpcHRpb25fYXV0cmUiLCJtZXNyaV9hZG1pc3Npb24iLCJtZXNyaV9ldGFibGlzc2VtZW50cyIsInBvbGVfZW1wbG9pX2lkZW50aXRlIiwicG9sZV9lbXBsb2lfYWRyZXNzZSIsInBvbGVfZW1wbG9pX2NvbnRhY3QiLCJwb2xlX2VtcGxvaV9pbnNjcmlwdGlvbiIsImNuYWZfcXVvdGllbnRfZmFtaWxpYWwiLCJjbmFmX2FsbG9jYXRhaXJlcyIsImNuYWZfZW5mYW50cyIsImNuYWZfYWRyZXNzZSIsImNub3VzX3N0YXR1dF9ib3Vyc2llciIsInVwdGltZSIsImNub3VzX2VjaGVsb25fYm91cnNlIiwiY25vdXNfZW1haWwiLCJjbm91c19wZXJpb2RlX3ZlcnNlbWVudCIsImNub3VzX3N0YXR1dF9ib3Vyc2UiLCJjbm91c192aWxsZV9ldHVkZXMiLCJjbm91c19pZGVudGl0ZSIsImRnZmlwX2RlY2xhcmFudDFfbm9tIiwiZGdmaXBfZGVjbGFyYW50MV9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50MV9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50MV9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RlY2xhcmFudDJfbm9tIiwiZGdmaXBfZGVjbGFyYW50Ml9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50Ml9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50Ml9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RhdGVfcmVjb3V2cmVtZW50IiwiZGdmaXBfZGF0ZV9ldGFibGlzc2VtZW50IiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX3RheGF0aW9uIiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX2FubmVlIiwiZGdmaXBfbm9tYnJlX3BhcnRzIiwiZGdmaXBfbm9tYnJlX3BlcnNvbm5lc19hX2NoYXJnZSIsImRnZmlwX3NpdHVhdGlvbl9mYW1pbGlhbGUiLCJkZ2ZpcF9yZXZlbnVfYnJ1dF9nbG9iYWwiLCJkZ2ZpcF9yZXZlbnVfaW1wb3NhYmxlIiwiZGdmaXBfaW1wb3RfcmV2ZW51X25ldF9hdmFudF9jb3JyZWN0aW9ucyIsImRnZmlwX21vbnRhbnRfaW1wb3QiLCJkZ2ZpcF9yZXZlbnVfZmlzY2FsX3JlZmVyZW5jZSIsImRnZmlwX2FubmVlX2ltcG90IiwiZGdmaXBfYW5uZWVfcmV2ZW51cyIsImRnZmlwX2VycmV1cl9jb3JyZWN0aWYiLCJkZ2ZpcF9zaXR1YXRpb25fcGFydGllbGxlIl0sInN1YiI6InN0YWdpbmcgZGV2ZWxvcG1lbnQiLCJpYXQiOjE2NjY4NjQwNzQsInZlcnNpb24iOiIxLjAiLCJleHAiOjE5ODI0ODMyNzR9.u2kMWzll3iCTczUOqMQbpS66VfrVzI2lLiyGEPcKAec*       
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@entreprise.api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EntreprisesApi.Client.OpenAPIDateConverter;

namespace EntreprisesApi.Model
{
    /// <summary>
    /// DonnEsDeLImprimInner
    /// </summary>
    [DataContract(Name = "Donn_es_de_l_imprim__inner")]
    public partial class DonnEsDeLImprimInner : IEquatable<DonnEsDeLImprimInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DonnEsDeLImprimInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DonnEsDeLImprimInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DonnEsDeLImprimInner" /> class.
        /// </summary>
        /// <param name="code">Code permettant d&#39;identifier la donnée, constitué de 2 lettres de AA à ZZ (cf. Code EDI).</param>
        /// <param name="codeEDI">Le code EDI est utilisé lorsque la liasses fiscale a été souscrite via la filière EDI/TDFC. Il permet l’échange des données de nature comptable et/ou fiscale avec la norme EDIFACT entre la DGFIP et les utilisateurs des téléprocédures EDI .</param>
        /// <param name="codeAbsolu">Ce code interne à la DGFIP identifie une seule donnée sur un seul formulaire.</param>
        /// <param name="codeTypeDonnee">Ce code détermine la nature de la donnée, le nombre et type des caractères qu’elle peut contenir.</param>
        /// <param name="intitule">Intitulé de la donnée. Désigne une donnée correspondant à une case à cocher présente en haut de certains tableaux de la liasse fiscale.</param>
        /// <param name="codeNref">codeNref (required).</param>
        /// <param name="valeurs">Si une entrée de l&#39;imprimé est répétable, le tableau contient plusieurs entrées et sont ordonnées en fonction de l&#39;indice de répétition. (required).</param>
        public DonnEsDeLImprimInner(string code = default(string), string codeEDI = default(string), string codeAbsolu = default(string), string codeTypeDonnee = default(string), string intitule = default(string), string codeNref = default(string), List<string> valeurs = default(List<string>))
        {
            // to ensure "codeNref" is required (not null)
            if (codeNref == null)
            {
                throw new ArgumentNullException("codeNref is a required property for DonnEsDeLImprimInner and cannot be null");
            }
            this.CodeNref = codeNref;
            // to ensure "valeurs" is required (not null)
            if (valeurs == null)
            {
                throw new ArgumentNullException("valeurs is a required property for DonnEsDeLImprimInner and cannot be null");
            }
            this.Valeurs = valeurs;
            this.Code = code;
            this.CodeEDI = codeEDI;
            this.CodeAbsolu = codeAbsolu;
            this.CodeTypeDonnee = codeTypeDonnee;
            this.Intitule = intitule;
        }

        /// <summary>
        /// Code permettant d&#39;identifier la donnée, constitué de 2 lettres de AA à ZZ (cf. Code EDI)
        /// </summary>
        /// <value>Code permettant d&#39;identifier la donnée, constitué de 2 lettres de AA à ZZ (cf. Code EDI)</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Le code EDI est utilisé lorsque la liasses fiscale a été souscrite via la filière EDI/TDFC. Il permet l’échange des données de nature comptable et/ou fiscale avec la norme EDIFACT entre la DGFIP et les utilisateurs des téléprocédures EDI 
        /// </summary>
        /// <value>Le code EDI est utilisé lorsque la liasses fiscale a été souscrite via la filière EDI/TDFC. Il permet l’échange des données de nature comptable et/ou fiscale avec la norme EDIFACT entre la DGFIP et les utilisateurs des téléprocédures EDI </value>
        [DataMember(Name = "code_EDI", EmitDefaultValue = false)]
        public string CodeEDI { get; set; }

        /// <summary>
        /// Ce code interne à la DGFIP identifie une seule donnée sur un seul formulaire
        /// </summary>
        /// <value>Ce code interne à la DGFIP identifie une seule donnée sur un seul formulaire</value>
        [DataMember(Name = "code_absolu", EmitDefaultValue = false)]
        public string CodeAbsolu { get; set; }

        /// <summary>
        /// Ce code détermine la nature de la donnée, le nombre et type des caractères qu’elle peut contenir
        /// </summary>
        /// <value>Ce code détermine la nature de la donnée, le nombre et type des caractères qu’elle peut contenir</value>
        [DataMember(Name = "code_type_donnee", EmitDefaultValue = false)]
        public string CodeTypeDonnee { get; set; }

        /// <summary>
        /// Intitulé de la donnée. Désigne une donnée correspondant à une case à cocher présente en haut de certains tableaux de la liasse fiscale
        /// </summary>
        /// <value>Intitulé de la donnée. Désigne une donnée correspondant à une case à cocher présente en haut de certains tableaux de la liasse fiscale</value>
        [DataMember(Name = "intitule", EmitDefaultValue = false)]
        public string Intitule { get; set; }

        /// <summary>
        /// Gets or Sets CodeNref
        /// </summary>
        [DataMember(Name = "code_nref", IsRequired = true, EmitDefaultValue = true)]
        public string CodeNref { get; set; }

        /// <summary>
        /// Si une entrée de l&#39;imprimé est répétable, le tableau contient plusieurs entrées et sont ordonnées en fonction de l&#39;indice de répétition.
        /// </summary>
        /// <value>Si une entrée de l&#39;imprimé est répétable, le tableau contient plusieurs entrées et sont ordonnées en fonction de l&#39;indice de répétition.</value>
        [DataMember(Name = "valeurs", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Valeurs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DonnEsDeLImprimInner {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CodeEDI: ").Append(CodeEDI).Append("\n");
            sb.Append("  CodeAbsolu: ").Append(CodeAbsolu).Append("\n");
            sb.Append("  CodeTypeDonnee: ").Append(CodeTypeDonnee).Append("\n");
            sb.Append("  Intitule: ").Append(Intitule).Append("\n");
            sb.Append("  CodeNref: ").Append(CodeNref).Append("\n");
            sb.Append("  Valeurs: ").Append(Valeurs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DonnEsDeLImprimInner);
        }

        /// <summary>
        /// Returns true if DonnEsDeLImprimInner instances are equal
        /// </summary>
        /// <param name="input">Instance of DonnEsDeLImprimInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DonnEsDeLImprimInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.CodeEDI == input.CodeEDI ||
                    (this.CodeEDI != null &&
                    this.CodeEDI.Equals(input.CodeEDI))
                ) && 
                (
                    this.CodeAbsolu == input.CodeAbsolu ||
                    (this.CodeAbsolu != null &&
                    this.CodeAbsolu.Equals(input.CodeAbsolu))
                ) && 
                (
                    this.CodeTypeDonnee == input.CodeTypeDonnee ||
                    (this.CodeTypeDonnee != null &&
                    this.CodeTypeDonnee.Equals(input.CodeTypeDonnee))
                ) && 
                (
                    this.Intitule == input.Intitule ||
                    (this.Intitule != null &&
                    this.Intitule.Equals(input.Intitule))
                ) && 
                (
                    this.CodeNref == input.CodeNref ||
                    (this.CodeNref != null &&
                    this.CodeNref.Equals(input.CodeNref))
                ) && 
                (
                    this.Valeurs == input.Valeurs ||
                    this.Valeurs != null &&
                    input.Valeurs != null &&
                    this.Valeurs.SequenceEqual(input.Valeurs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.CodeEDI != null)
                {
                    hashCode = (hashCode * 59) + this.CodeEDI.GetHashCode();
                }
                if (this.CodeAbsolu != null)
                {
                    hashCode = (hashCode * 59) + this.CodeAbsolu.GetHashCode();
                }
                if (this.CodeTypeDonnee != null)
                {
                    hashCode = (hashCode * 59) + this.CodeTypeDonnee.GetHashCode();
                }
                if (this.Intitule != null)
                {
                    hashCode = (hashCode * 59) + this.Intitule.GetHashCode();
                }
                if (this.CodeNref != null)
                {
                    hashCode = (hashCode * 59) + this.CodeNref.GetHashCode();
                }
                if (this.Valeurs != null)
                {
                    hashCode = (hashCode * 59) + this.Valeurs.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
