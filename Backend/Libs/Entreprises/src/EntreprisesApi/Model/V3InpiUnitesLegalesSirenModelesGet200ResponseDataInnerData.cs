/*
 * API Entreprise
 *
 * Cette page contient la documentation technique pour accéder à API Entreprise. Les API étant accessible uniquement sous habilitation, l'interaction avec l'environnement de production n'est possible que si vous êtes **en possession d'une clé d'accès (jeton).  ### Comment tester l'API ?  Il est possible de tester les API via notre environnement de **staging** qui vous retournera systématiquement des données fictives.  Il est nécessaire d'utiliser le jeton de staging indiqué ci-dessous.  - --  *eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1MmE1YmZjMi1jMzUwLTQ4ZjQtYjY5Ni05ZWE3NmRiM2VmMjkiLCJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJzY29wZXMiOlsiY2VydGlmaWNhdF9yZ2VfYWRlbWUiLCJtc2FfY290aXNhdGlvbnMiLCJlbnRyZXByaXNlcyIsImV4dHJhaXRzX3JjcyIsImNlcnRpZmljYXRfb3BxaWJpIiwiYXNzb2NpYXRpb25zIiwiZXRhYmxpc3NlbWVudHMiLCJmbnRwX2NhcnRlX3BybyIsInF1YWxpYmF0IiwiZW50cmVwcmlzZXNfYXJ0aXNhbmFsZXMiLCJjZXJ0aWZpY2F0X2NuZXRwIiwiZW9yaV9kb3VhbmVzIiwicHJvYnRwIiwiYWN0ZXNfaW5waSIsImV4dHJhaXRfY291cnRfaW5waSIsImF0dGVzdGF0aW9uc19zb2NpYWxlcyIsImxpYXNzZV9maXNjYWxlIiwiYXR0ZXN0YXRpb25zX2Zpc2NhbGVzIiwiZXhlcmNpY2VzIiwiY29udmVudGlvbnNfY29sbGVjdGl2ZXMiLCJiaWxhbnNfaW5waSIsImRvY3VtZW50c19hc3NvY2lhdGlvbiIsImNlcnRpZmljYXRfYWdlbmNlX2JpbyIsImJpbGFuc19lbnRyZXByaXNlX2JkZiIsImF0dGVzdGF0aW9uc19hZ2VmaXBoIiwibWVzcmlfaWRlbnRpZmlhbnQiLCJtZXNyaV9pZGVudGl0ZSIsIm1lc3JpX2luc2NyaXB0aW9uX2V0dWRpYW50IiwibWVzcmlfaW5zY3JpcHRpb25fYXV0cmUiLCJtZXNyaV9hZG1pc3Npb24iLCJtZXNyaV9ldGFibGlzc2VtZW50cyIsInBvbGVfZW1wbG9pX2lkZW50aXRlIiwicG9sZV9lbXBsb2lfYWRyZXNzZSIsInBvbGVfZW1wbG9pX2NvbnRhY3QiLCJwb2xlX2VtcGxvaV9pbnNjcmlwdGlvbiIsImNuYWZfcXVvdGllbnRfZmFtaWxpYWwiLCJjbmFmX2FsbG9jYXRhaXJlcyIsImNuYWZfZW5mYW50cyIsImNuYWZfYWRyZXNzZSIsImNub3VzX3N0YXR1dF9ib3Vyc2llciIsInVwdGltZSIsImNub3VzX2VjaGVsb25fYm91cnNlIiwiY25vdXNfZW1haWwiLCJjbm91c19wZXJpb2RlX3ZlcnNlbWVudCIsImNub3VzX3N0YXR1dF9ib3Vyc2UiLCJjbm91c192aWxsZV9ldHVkZXMiLCJjbm91c19pZGVudGl0ZSIsImRnZmlwX2RlY2xhcmFudDFfbm9tIiwiZGdmaXBfZGVjbGFyYW50MV9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50MV9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50MV9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RlY2xhcmFudDJfbm9tIiwiZGdmaXBfZGVjbGFyYW50Ml9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50Ml9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50Ml9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RhdGVfcmVjb3V2cmVtZW50IiwiZGdmaXBfZGF0ZV9ldGFibGlzc2VtZW50IiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX3RheGF0aW9uIiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX2FubmVlIiwiZGdmaXBfbm9tYnJlX3BhcnRzIiwiZGdmaXBfbm9tYnJlX3BlcnNvbm5lc19hX2NoYXJnZSIsImRnZmlwX3NpdHVhdGlvbl9mYW1pbGlhbGUiLCJkZ2ZpcF9yZXZlbnVfYnJ1dF9nbG9iYWwiLCJkZ2ZpcF9yZXZlbnVfaW1wb3NhYmxlIiwiZGdmaXBfaW1wb3RfcmV2ZW51X25ldF9hdmFudF9jb3JyZWN0aW9ucyIsImRnZmlwX21vbnRhbnRfaW1wb3QiLCJkZ2ZpcF9yZXZlbnVfZmlzY2FsX3JlZmVyZW5jZSIsImRnZmlwX2FubmVlX2ltcG90IiwiZGdmaXBfYW5uZWVfcmV2ZW51cyIsImRnZmlwX2VycmV1cl9jb3JyZWN0aWYiLCJkZ2ZpcF9zaXR1YXRpb25fcGFydGllbGxlIl0sInN1YiI6InN0YWdpbmcgZGV2ZWxvcG1lbnQiLCJpYXQiOjE2NjY4NjQwNzQsInZlcnNpb24iOiIxLjAiLCJleHAiOjE5ODI0ODMyNzR9.u2kMWzll3iCTczUOqMQbpS66VfrVzI2lLiyGEPcKAec*       
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@entreprise.api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EntreprisesApi.Client.OpenAPIDateConverter;

namespace EntreprisesApi.Model
{
    /// <summary>
    /// V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData
    /// </summary>
    [DataContract(Name = "_v3_inpi_unites_legales__siren__modeles_get_200_response_data_inner_data")]
    public partial class V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData : IEquatable<V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Modele for value: modele
            /// </summary>
            [EnumMember(Value = "modele")]
            Modele = 1

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData" /> class.
        /// </summary>
        /// <param name="documentId">Identifiant du modèle dans la base de l&#39;INPI, constitué du code de l&#39;office de dépôt (ex: FR), du numéro national de dépôt (ex: 20203928) et du numéro de référence (ex: 001)  (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="numeroDepot">Numéro national sous lequel le modèle est enregistré. (required).</param>
        /// <param name="titre">Titre du modèle. (required).</param>
        /// <param name="totalRepresentations">Nombre de représentations (vues) du modèle (required).</param>
        /// <param name="deposant">Nom de l&#39;entité ayant déposé le modèle. (required).</param>
        /// <param name="dateDepot">Date à laquelle le modèle a été déposé pour publication (required).</param>
        /// <param name="datePublication">Date de publication du modèle (required).</param>
        /// <param name="classe">Code de classification du modèle, sur 4 chiffres (required).</param>
        /// <param name="reference">Numéro de référence du modèle par entité, sur trois chiffres. Le premier modèle d&#39;une entité est numéroté 001, le second 002, etc. (required).</param>
        public V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData(string documentId = default(string), TypeEnum type = default(TypeEnum), string numeroDepot = default(string), string titre = default(string), decimal totalRepresentations = default(decimal), string deposant = default(string), string dateDepot = default(string), string datePublication = default(string), string classe = default(string), string reference = default(string))
        {
            // to ensure "documentId" is required (not null)
            if (documentId == null)
            {
                throw new ArgumentNullException("documentId is a required property for V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData and cannot be null");
            }
            this.DocumentId = documentId;
            this.Type = type;
            // to ensure "numeroDepot" is required (not null)
            if (numeroDepot == null)
            {
                throw new ArgumentNullException("numeroDepot is a required property for V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData and cannot be null");
            }
            this.NumeroDepot = numeroDepot;
            // to ensure "titre" is required (not null)
            if (titre == null)
            {
                throw new ArgumentNullException("titre is a required property for V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData and cannot be null");
            }
            this.Titre = titre;
            this.TotalRepresentations = totalRepresentations;
            // to ensure "deposant" is required (not null)
            if (deposant == null)
            {
                throw new ArgumentNullException("deposant is a required property for V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData and cannot be null");
            }
            this.Deposant = deposant;
            // to ensure "dateDepot" is required (not null)
            if (dateDepot == null)
            {
                throw new ArgumentNullException("dateDepot is a required property for V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData and cannot be null");
            }
            this.DateDepot = dateDepot;
            // to ensure "datePublication" is required (not null)
            if (datePublication == null)
            {
                throw new ArgumentNullException("datePublication is a required property for V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData and cannot be null");
            }
            this.DatePublication = datePublication;
            // to ensure "classe" is required (not null)
            if (classe == null)
            {
                throw new ArgumentNullException("classe is a required property for V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData and cannot be null");
            }
            this.Classe = classe;
            // to ensure "reference" is required (not null)
            if (reference == null)
            {
                throw new ArgumentNullException("reference is a required property for V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData and cannot be null");
            }
            this.Reference = reference;
        }

        /// <summary>
        /// Identifiant du modèle dans la base de l&#39;INPI, constitué du code de l&#39;office de dépôt (ex: FR), du numéro national de dépôt (ex: 20203928) et du numéro de référence (ex: 001) 
        /// </summary>
        /// <value>Identifiant du modèle dans la base de l&#39;INPI, constitué du code de l&#39;office de dépôt (ex: FR), du numéro national de dépôt (ex: 20203928) et du numéro de référence (ex: 001) </value>
        [DataMember(Name = "document_id", IsRequired = true, EmitDefaultValue = true)]
        public string DocumentId { get; set; }

        /// <summary>
        /// Numéro national sous lequel le modèle est enregistré.
        /// </summary>
        /// <value>Numéro national sous lequel le modèle est enregistré.</value>
        [DataMember(Name = "numero_depot", IsRequired = true, EmitDefaultValue = true)]
        public string NumeroDepot { get; set; }

        /// <summary>
        /// Titre du modèle.
        /// </summary>
        /// <value>Titre du modèle.</value>
        [DataMember(Name = "titre", IsRequired = true, EmitDefaultValue = true)]
        public string Titre { get; set; }

        /// <summary>
        /// Nombre de représentations (vues) du modèle
        /// </summary>
        /// <value>Nombre de représentations (vues) du modèle</value>
        [DataMember(Name = "total_representations", IsRequired = true, EmitDefaultValue = true)]
        public decimal TotalRepresentations { get; set; }

        /// <summary>
        /// Nom de l&#39;entité ayant déposé le modèle.
        /// </summary>
        /// <value>Nom de l&#39;entité ayant déposé le modèle.</value>
        [DataMember(Name = "deposant", IsRequired = true, EmitDefaultValue = true)]
        public string Deposant { get; set; }

        /// <summary>
        /// Date à laquelle le modèle a été déposé pour publication
        /// </summary>
        /// <value>Date à laquelle le modèle a été déposé pour publication</value>
        [DataMember(Name = "date_depot", IsRequired = true, EmitDefaultValue = true)]
        public string DateDepot { get; set; }

        /// <summary>
        /// Date de publication du modèle
        /// </summary>
        /// <value>Date de publication du modèle</value>
        [DataMember(Name = "date_publication", IsRequired = true, EmitDefaultValue = true)]
        public string DatePublication { get; set; }

        /// <summary>
        /// Code de classification du modèle, sur 4 chiffres
        /// </summary>
        /// <value>Code de classification du modèle, sur 4 chiffres</value>
        [DataMember(Name = "classe", IsRequired = true, EmitDefaultValue = true)]
        public string Classe { get; set; }

        /// <summary>
        /// Numéro de référence du modèle par entité, sur trois chiffres. Le premier modèle d&#39;une entité est numéroté 001, le second 002, etc.
        /// </summary>
        /// <value>Numéro de référence du modèle par entité, sur trois chiffres. Le premier modèle d&#39;une entité est numéroté 001, le second 002, etc.</value>
        [DataMember(Name = "reference", IsRequired = true, EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData {\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  NumeroDepot: ").Append(NumeroDepot).Append("\n");
            sb.Append("  Titre: ").Append(Titre).Append("\n");
            sb.Append("  TotalRepresentations: ").Append(TotalRepresentations).Append("\n");
            sb.Append("  Deposant: ").Append(Deposant).Append("\n");
            sb.Append("  DateDepot: ").Append(DateDepot).Append("\n");
            sb.Append("  DatePublication: ").Append(DatePublication).Append("\n");
            sb.Append("  Classe: ").Append(Classe).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData);
        }

        /// <summary>
        /// Returns true if V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData instances are equal
        /// </summary>
        /// <param name="input">Instance of V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V3InpiUnitesLegalesSirenModelesGet200ResponseDataInnerData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.NumeroDepot == input.NumeroDepot ||
                    (this.NumeroDepot != null &&
                    this.NumeroDepot.Equals(input.NumeroDepot))
                ) && 
                (
                    this.Titre == input.Titre ||
                    (this.Titre != null &&
                    this.Titre.Equals(input.Titre))
                ) && 
                (
                    this.TotalRepresentations == input.TotalRepresentations ||
                    this.TotalRepresentations.Equals(input.TotalRepresentations)
                ) && 
                (
                    this.Deposant == input.Deposant ||
                    (this.Deposant != null &&
                    this.Deposant.Equals(input.Deposant))
                ) && 
                (
                    this.DateDepot == input.DateDepot ||
                    (this.DateDepot != null &&
                    this.DateDepot.Equals(input.DateDepot))
                ) && 
                (
                    this.DatePublication == input.DatePublication ||
                    (this.DatePublication != null &&
                    this.DatePublication.Equals(input.DatePublication))
                ) && 
                (
                    this.Classe == input.Classe ||
                    (this.Classe != null &&
                    this.Classe.Equals(input.Classe))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.NumeroDepot != null)
                {
                    hashCode = (hashCode * 59) + this.NumeroDepot.GetHashCode();
                }
                if (this.Titre != null)
                {
                    hashCode = (hashCode * 59) + this.Titre.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalRepresentations.GetHashCode();
                if (this.Deposant != null)
                {
                    hashCode = (hashCode * 59) + this.Deposant.GetHashCode();
                }
                if (this.DateDepot != null)
                {
                    hashCode = (hashCode * 59) + this.DateDepot.GetHashCode();
                }
                if (this.DatePublication != null)
                {
                    hashCode = (hashCode * 59) + this.DatePublication.GetHashCode();
                }
                if (this.Classe != null)
                {
                    hashCode = (hashCode * 59) + this.Classe.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
