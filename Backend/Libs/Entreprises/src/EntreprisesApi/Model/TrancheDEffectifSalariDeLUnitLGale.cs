/*
 * API Entreprise
 *
 * Cette page contient la documentation technique pour accéder à API Entreprise. Les API étant accessible uniquement sous habilitation, l'interaction avec l'environnement de production n'est possible que si vous êtes **en possession d'une clé d'accès (jeton).  ### Comment tester l'API ?  Il est possible de tester les API via notre environnement de **staging** qui vous retournera systématiquement des données fictives.  Il est nécessaire d'utiliser le jeton de staging indiqué ci-dessous.  - --  *eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1MmE1YmZjMi1jMzUwLTQ4ZjQtYjY5Ni05ZWE3NmRiM2VmMjkiLCJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJzY29wZXMiOlsiY2VydGlmaWNhdF9yZ2VfYWRlbWUiLCJtc2FfY290aXNhdGlvbnMiLCJlbnRyZXByaXNlcyIsImV4dHJhaXRzX3JjcyIsImNlcnRpZmljYXRfb3BxaWJpIiwiYXNzb2NpYXRpb25zIiwiZXRhYmxpc3NlbWVudHMiLCJmbnRwX2NhcnRlX3BybyIsInF1YWxpYmF0IiwiZW50cmVwcmlzZXNfYXJ0aXNhbmFsZXMiLCJjZXJ0aWZpY2F0X2NuZXRwIiwiZW9yaV9kb3VhbmVzIiwicHJvYnRwIiwiYWN0ZXNfaW5waSIsImV4dHJhaXRfY291cnRfaW5waSIsImF0dGVzdGF0aW9uc19zb2NpYWxlcyIsImxpYXNzZV9maXNjYWxlIiwiYXR0ZXN0YXRpb25zX2Zpc2NhbGVzIiwiZXhlcmNpY2VzIiwiY29udmVudGlvbnNfY29sbGVjdGl2ZXMiLCJiaWxhbnNfaW5waSIsImRvY3VtZW50c19hc3NvY2lhdGlvbiIsImNlcnRpZmljYXRfYWdlbmNlX2JpbyIsImJpbGFuc19lbnRyZXByaXNlX2JkZiIsImF0dGVzdGF0aW9uc19hZ2VmaXBoIiwibWVzcmlfaWRlbnRpZmlhbnQiLCJtZXNyaV9pZGVudGl0ZSIsIm1lc3JpX2luc2NyaXB0aW9uX2V0dWRpYW50IiwibWVzcmlfaW5zY3JpcHRpb25fYXV0cmUiLCJtZXNyaV9hZG1pc3Npb24iLCJtZXNyaV9ldGFibGlzc2VtZW50cyIsInBvbGVfZW1wbG9pX2lkZW50aXRlIiwicG9sZV9lbXBsb2lfYWRyZXNzZSIsInBvbGVfZW1wbG9pX2NvbnRhY3QiLCJwb2xlX2VtcGxvaV9pbnNjcmlwdGlvbiIsImNuYWZfcXVvdGllbnRfZmFtaWxpYWwiLCJjbmFmX2FsbG9jYXRhaXJlcyIsImNuYWZfZW5mYW50cyIsImNuYWZfYWRyZXNzZSIsImNub3VzX3N0YXR1dF9ib3Vyc2llciIsInVwdGltZSIsImNub3VzX2VjaGVsb25fYm91cnNlIiwiY25vdXNfZW1haWwiLCJjbm91c19wZXJpb2RlX3ZlcnNlbWVudCIsImNub3VzX3N0YXR1dF9ib3Vyc2UiLCJjbm91c192aWxsZV9ldHVkZXMiLCJjbm91c19pZGVudGl0ZSIsImRnZmlwX2RlY2xhcmFudDFfbm9tIiwiZGdmaXBfZGVjbGFyYW50MV9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50MV9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50MV9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RlY2xhcmFudDJfbm9tIiwiZGdmaXBfZGVjbGFyYW50Ml9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50Ml9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50Ml9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RhdGVfcmVjb3V2cmVtZW50IiwiZGdmaXBfZGF0ZV9ldGFibGlzc2VtZW50IiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX3RheGF0aW9uIiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX2FubmVlIiwiZGdmaXBfbm9tYnJlX3BhcnRzIiwiZGdmaXBfbm9tYnJlX3BlcnNvbm5lc19hX2NoYXJnZSIsImRnZmlwX3NpdHVhdGlvbl9mYW1pbGlhbGUiLCJkZ2ZpcF9yZXZlbnVfYnJ1dF9nbG9iYWwiLCJkZ2ZpcF9yZXZlbnVfaW1wb3NhYmxlIiwiZGdmaXBfaW1wb3RfcmV2ZW51X25ldF9hdmFudF9jb3JyZWN0aW9ucyIsImRnZmlwX21vbnRhbnRfaW1wb3QiLCJkZ2ZpcF9yZXZlbnVfZmlzY2FsX3JlZmVyZW5jZSIsImRnZmlwX2FubmVlX2ltcG90IiwiZGdmaXBfYW5uZWVfcmV2ZW51cyIsImRnZmlwX2VycmV1cl9jb3JyZWN0aWYiLCJkZ2ZpcF9zaXR1YXRpb25fcGFydGllbGxlIl0sInN1YiI6InN0YWdpbmcgZGV2ZWxvcG1lbnQiLCJpYXQiOjE2NjY4NjQwNzQsInZlcnNpb24iOiIxLjAiLCJleHAiOjE5ODI0ODMyNzR9.u2kMWzll3iCTczUOqMQbpS66VfrVzI2lLiyGEPcKAec*       
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@entreprise.api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EntreprisesApi.Client.OpenAPIDateConverter;

namespace EntreprisesApi.Model
{
    /// <summary>
    /// TrancheDEffectifSalariDeLUnitLGale
    /// </summary>
    [DataContract(Name = "Tranche_d_effectif_salari__de_l_unit__l_gale")]
    public partial class TrancheDEffectifSalariDeLUnitLGale : IEquatable<TrancheDEffectifSalariDeLUnitLGale>, IValidatableObject
    {
        /// <summary>
        /// Le code effectif indique la tranche d&#39;effectif salarié de l&#39;unité légale. Le nombre de salarié est déterminé en fonction de l&#39;effectif de chacun des établissements de l&#39;unité légale :     - NN : Unités non employeuses (pas de salarié au cours de l&#39;année de référence et pas d&#39;effectif au 31/12). Cette tranche peut contenir quelques effectifs inconnus   - 00 : 0 salarié (n&#39;ayant pas d&#39;effectif au 31/12 mais ayant employé des salariés au cours de l&#39;année de référence)   - 01 : 1 ou 2 salariés   - 02 : 3 à 5 salariés   - 03 : 6 à 9 salariés   - 11 : 10 à 19 salariés   - 12 : 20 à 49 salariés   - 21 : 50 à 99 salariés   - 22 : 100 à 199 salariés   - 31 : 200 à 249 salariés   - 32 : 250 à 499 salariés   - 41 : 500 à 999 salariés   - 42 : 1 000 à 1 999 salariés   - 51 : 2 000 à 4 999 salariés   - 52 : 5 000 à 9 999 salariés   - 53 : 10 000 salariés et plus     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/tefen.     L&#39;effectif exact de l&#39;entreprise, mensuel et annuel, est disponible au travers de l&#39;[API Effectifs - URSSAF Caisse nationale](TODO). Si votre jeton contient ce droit d&#39;accès, nous vous recommandons d&#39;utiliser cette API. Ces données étant protégées, leur cadre d&#39;utilisation est différent de la tranche effectif fournie par l&#39;Insee, qui elle est une donnée publique.
        /// </summary>
        /// <value>Le code effectif indique la tranche d&#39;effectif salarié de l&#39;unité légale. Le nombre de salarié est déterminé en fonction de l&#39;effectif de chacun des établissements de l&#39;unité légale :     - NN : Unités non employeuses (pas de salarié au cours de l&#39;année de référence et pas d&#39;effectif au 31/12). Cette tranche peut contenir quelques effectifs inconnus   - 00 : 0 salarié (n&#39;ayant pas d&#39;effectif au 31/12 mais ayant employé des salariés au cours de l&#39;année de référence)   - 01 : 1 ou 2 salariés   - 02 : 3 à 5 salariés   - 03 : 6 à 9 salariés   - 11 : 10 à 19 salariés   - 12 : 20 à 49 salariés   - 21 : 50 à 99 salariés   - 22 : 100 à 199 salariés   - 31 : 200 à 249 salariés   - 32 : 250 à 499 salariés   - 41 : 500 à 999 salariés   - 42 : 1 000 à 1 999 salariés   - 51 : 2 000 à 4 999 salariés   - 52 : 5 000 à 9 999 salariés   - 53 : 10 000 salariés et plus     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/tefen.     L&#39;effectif exact de l&#39;entreprise, mensuel et annuel, est disponible au travers de l&#39;[API Effectifs - URSSAF Caisse nationale](TODO). Si votre jeton contient ce droit d&#39;accès, nous vous recommandons d&#39;utiliser cette API. Ces données étant protégées, leur cadre d&#39;utilisation est différent de la tranche effectif fournie par l&#39;Insee, qui elle est une donnée publique.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodeEnum
        {
            /// <summary>
            /// Enum NN for value: NN
            /// </summary>
            [EnumMember(Value = "NN")]
            NN = 1,

            /// <summary>
            /// Enum _00 for value: 00
            /// </summary>
            [EnumMember(Value = "00")]
            _00 = 2,

            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            [EnumMember(Value = "01")]
            _01 = 3,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            [EnumMember(Value = "02")]
            _02 = 4,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            [EnumMember(Value = "03")]
            _03 = 5,

            /// <summary>
            /// Enum _11 for value: 11
            /// </summary>
            [EnumMember(Value = "11")]
            _11 = 6,

            /// <summary>
            /// Enum _12 for value: 12
            /// </summary>
            [EnumMember(Value = "12")]
            _12 = 7,

            /// <summary>
            /// Enum _21 for value: 21
            /// </summary>
            [EnumMember(Value = "21")]
            _21 = 8,

            /// <summary>
            /// Enum _22 for value: 22
            /// </summary>
            [EnumMember(Value = "22")]
            _22 = 9,

            /// <summary>
            /// Enum _31 for value: 31
            /// </summary>
            [EnumMember(Value = "31")]
            _31 = 10,

            /// <summary>
            /// Enum _32 for value: 32
            /// </summary>
            [EnumMember(Value = "32")]
            _32 = 11,

            /// <summary>
            /// Enum _41 for value: 41
            /// </summary>
            [EnumMember(Value = "41")]
            _41 = 12,

            /// <summary>
            /// Enum _42 for value: 42
            /// </summary>
            [EnumMember(Value = "42")]
            _42 = 13,

            /// <summary>
            /// Enum _51 for value: 51
            /// </summary>
            [EnumMember(Value = "51")]
            _51 = 14,

            /// <summary>
            /// Enum _52 for value: 52
            /// </summary>
            [EnumMember(Value = "52")]
            _52 = 15,

            /// <summary>
            /// Enum _53 for value: 53
            /// </summary>
            [EnumMember(Value = "53")]
            _53 = 16

        }


        /// <summary>
        /// Le code effectif indique la tranche d&#39;effectif salarié de l&#39;unité légale. Le nombre de salarié est déterminé en fonction de l&#39;effectif de chacun des établissements de l&#39;unité légale :     - NN : Unités non employeuses (pas de salarié au cours de l&#39;année de référence et pas d&#39;effectif au 31/12). Cette tranche peut contenir quelques effectifs inconnus   - 00 : 0 salarié (n&#39;ayant pas d&#39;effectif au 31/12 mais ayant employé des salariés au cours de l&#39;année de référence)   - 01 : 1 ou 2 salariés   - 02 : 3 à 5 salariés   - 03 : 6 à 9 salariés   - 11 : 10 à 19 salariés   - 12 : 20 à 49 salariés   - 21 : 50 à 99 salariés   - 22 : 100 à 199 salariés   - 31 : 200 à 249 salariés   - 32 : 250 à 499 salariés   - 41 : 500 à 999 salariés   - 42 : 1 000 à 1 999 salariés   - 51 : 2 000 à 4 999 salariés   - 52 : 5 000 à 9 999 salariés   - 53 : 10 000 salariés et plus     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/tefen.     L&#39;effectif exact de l&#39;entreprise, mensuel et annuel, est disponible au travers de l&#39;[API Effectifs - URSSAF Caisse nationale](TODO). Si votre jeton contient ce droit d&#39;accès, nous vous recommandons d&#39;utiliser cette API. Ces données étant protégées, leur cadre d&#39;utilisation est différent de la tranche effectif fournie par l&#39;Insee, qui elle est une donnée publique.
        /// </summary>
        /// <value>Le code effectif indique la tranche d&#39;effectif salarié de l&#39;unité légale. Le nombre de salarié est déterminé en fonction de l&#39;effectif de chacun des établissements de l&#39;unité légale :     - NN : Unités non employeuses (pas de salarié au cours de l&#39;année de référence et pas d&#39;effectif au 31/12). Cette tranche peut contenir quelques effectifs inconnus   - 00 : 0 salarié (n&#39;ayant pas d&#39;effectif au 31/12 mais ayant employé des salariés au cours de l&#39;année de référence)   - 01 : 1 ou 2 salariés   - 02 : 3 à 5 salariés   - 03 : 6 à 9 salariés   - 11 : 10 à 19 salariés   - 12 : 20 à 49 salariés   - 21 : 50 à 99 salariés   - 22 : 100 à 199 salariés   - 31 : 200 à 249 salariés   - 32 : 250 à 499 salariés   - 41 : 500 à 999 salariés   - 42 : 1 000 à 1 999 salariés   - 51 : 2 000 à 4 999 salariés   - 52 : 5 000 à 9 999 salariés   - 53 : 10 000 salariés et plus     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/tefen.     L&#39;effectif exact de l&#39;entreprise, mensuel et annuel, est disponible au travers de l&#39;[API Effectifs - URSSAF Caisse nationale](TODO). Si votre jeton contient ce droit d&#39;accès, nous vous recommandons d&#39;utiliser cette API. Ces données étant protégées, leur cadre d&#39;utilisation est différent de la tranche effectif fournie par l&#39;Insee, qui elle est une donnée publique.</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public CodeEnum Code { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrancheDEffectifSalariDeLUnitLGale" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrancheDEffectifSalariDeLUnitLGale() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrancheDEffectifSalariDeLUnitLGale" /> class.
        /// </summary>
        /// <param name="code">Le code effectif indique la tranche d&#39;effectif salarié de l&#39;unité légale. Le nombre de salarié est déterminé en fonction de l&#39;effectif de chacun des établissements de l&#39;unité légale :     - NN : Unités non employeuses (pas de salarié au cours de l&#39;année de référence et pas d&#39;effectif au 31/12). Cette tranche peut contenir quelques effectifs inconnus   - 00 : 0 salarié (n&#39;ayant pas d&#39;effectif au 31/12 mais ayant employé des salariés au cours de l&#39;année de référence)   - 01 : 1 ou 2 salariés   - 02 : 3 à 5 salariés   - 03 : 6 à 9 salariés   - 11 : 10 à 19 salariés   - 12 : 20 à 49 salariés   - 21 : 50 à 99 salariés   - 22 : 100 à 199 salariés   - 31 : 200 à 249 salariés   - 32 : 250 à 499 salariés   - 41 : 500 à 999 salariés   - 42 : 1 000 à 1 999 salariés   - 51 : 2 000 à 4 999 salariés   - 52 : 5 000 à 9 999 salariés   - 53 : 10 000 salariés et plus     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/tefen.     L&#39;effectif exact de l&#39;entreprise, mensuel et annuel, est disponible au travers de l&#39;[API Effectifs - URSSAF Caisse nationale](TODO). Si votre jeton contient ce droit d&#39;accès, nous vous recommandons d&#39;utiliser cette API. Ces données étant protégées, leur cadre d&#39;utilisation est différent de la tranche effectif fournie par l&#39;Insee, qui elle est une donnée publique. (required).</param>
        /// <param name="intitule">intitule (required).</param>
        /// <param name="dateReference">dateReference (required).</param>
        /// <param name="de">de (required).</param>
        /// <param name="a">a (required).</param>
        public TrancheDEffectifSalariDeLUnitLGale(CodeEnum code = default(CodeEnum), string intitule = default(string), string dateReference = default(string), int? de = default(int?), int? a = default(int?))
        {
            this.Code = code;
            // to ensure "intitule" is required (not null)
            if (intitule == null)
            {
                throw new ArgumentNullException("intitule is a required property for TrancheDEffectifSalariDeLUnitLGale and cannot be null");
            }
            this.Intitule = intitule;
            // to ensure "dateReference" is required (not null)
            if (dateReference == null)
            {
                throw new ArgumentNullException("dateReference is a required property for TrancheDEffectifSalariDeLUnitLGale and cannot be null");
            }
            this.DateReference = dateReference;
            // to ensure "de" is required (not null)
            if (de == null)
            {
                throw new ArgumentNullException("de is a required property for TrancheDEffectifSalariDeLUnitLGale and cannot be null");
            }
            this.De = de;
            // to ensure "a" is required (not null)
            if (a == null)
            {
                throw new ArgumentNullException("a is a required property for TrancheDEffectifSalariDeLUnitLGale and cannot be null");
            }
            this.A = a;
        }

        /// <summary>
        /// Gets or Sets Intitule
        /// </summary>
        [DataMember(Name = "intitule", IsRequired = true, EmitDefaultValue = true)]
        public string Intitule { get; set; }

        /// <summary>
        /// Gets or Sets DateReference
        /// </summary>
        [DataMember(Name = "date_reference", IsRequired = true, EmitDefaultValue = true)]
        public string DateReference { get; set; }

        /// <summary>
        /// Gets or Sets De
        /// </summary>
        [DataMember(Name = "de", IsRequired = true, EmitDefaultValue = true)]
        public int? De { get; set; }

        /// <summary>
        /// Gets or Sets A
        /// </summary>
        [DataMember(Name = "a", IsRequired = true, EmitDefaultValue = true)]
        public int? A { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrancheDEffectifSalariDeLUnitLGale {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Intitule: ").Append(Intitule).Append("\n");
            sb.Append("  DateReference: ").Append(DateReference).Append("\n");
            sb.Append("  De: ").Append(De).Append("\n");
            sb.Append("  A: ").Append(A).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrancheDEffectifSalariDeLUnitLGale);
        }

        /// <summary>
        /// Returns true if TrancheDEffectifSalariDeLUnitLGale instances are equal
        /// </summary>
        /// <param name="input">Instance of TrancheDEffectifSalariDeLUnitLGale to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrancheDEffectifSalariDeLUnitLGale input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    this.Code.Equals(input.Code)
                ) && 
                (
                    this.Intitule == input.Intitule ||
                    (this.Intitule != null &&
                    this.Intitule.Equals(input.Intitule))
                ) && 
                (
                    this.DateReference == input.DateReference ||
                    (this.DateReference != null &&
                    this.DateReference.Equals(input.DateReference))
                ) && 
                (
                    this.De == input.De ||
                    (this.De != null &&
                    this.De.Equals(input.De))
                ) && 
                (
                    this.A == input.A ||
                    (this.A != null &&
                    this.A.Equals(input.A))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Code.GetHashCode();
                if (this.Intitule != null)
                {
                    hashCode = (hashCode * 59) + this.Intitule.GetHashCode();
                }
                if (this.DateReference != null)
                {
                    hashCode = (hashCode * 59) + this.DateReference.GetHashCode();
                }
                if (this.De != null)
                {
                    hashCode = (hashCode * 59) + this.De.GetHashCode();
                }
                if (this.A != null)
                {
                    hashCode = (hashCode * 59) + this.A.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
