/*
 * API Entreprise
 *
 * Cette page contient la documentation technique pour accéder à API Entreprise. Les API étant accessible uniquement sous habilitation, l'interaction avec l'environnement de production n'est possible que si vous êtes **en possession d'une clé d'accès (jeton).  ### Comment tester l'API ?  Il est possible de tester les API via notre environnement de **staging** qui vous retournera systématiquement des données fictives.  Il est nécessaire d'utiliser le jeton de staging indiqué ci-dessous.  - --  *eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1MmE1YmZjMi1jMzUwLTQ4ZjQtYjY5Ni05ZWE3NmRiM2VmMjkiLCJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJzY29wZXMiOlsiY2VydGlmaWNhdF9yZ2VfYWRlbWUiLCJtc2FfY290aXNhdGlvbnMiLCJlbnRyZXByaXNlcyIsImV4dHJhaXRzX3JjcyIsImNlcnRpZmljYXRfb3BxaWJpIiwiYXNzb2NpYXRpb25zIiwiZXRhYmxpc3NlbWVudHMiLCJmbnRwX2NhcnRlX3BybyIsInF1YWxpYmF0IiwiZW50cmVwcmlzZXNfYXJ0aXNhbmFsZXMiLCJjZXJ0aWZpY2F0X2NuZXRwIiwiZW9yaV9kb3VhbmVzIiwicHJvYnRwIiwiYWN0ZXNfaW5waSIsImV4dHJhaXRfY291cnRfaW5waSIsImF0dGVzdGF0aW9uc19zb2NpYWxlcyIsImxpYXNzZV9maXNjYWxlIiwiYXR0ZXN0YXRpb25zX2Zpc2NhbGVzIiwiZXhlcmNpY2VzIiwiY29udmVudGlvbnNfY29sbGVjdGl2ZXMiLCJiaWxhbnNfaW5waSIsImRvY3VtZW50c19hc3NvY2lhdGlvbiIsImNlcnRpZmljYXRfYWdlbmNlX2JpbyIsImJpbGFuc19lbnRyZXByaXNlX2JkZiIsImF0dGVzdGF0aW9uc19hZ2VmaXBoIiwibWVzcmlfaWRlbnRpZmlhbnQiLCJtZXNyaV9pZGVudGl0ZSIsIm1lc3JpX2luc2NyaXB0aW9uX2V0dWRpYW50IiwibWVzcmlfaW5zY3JpcHRpb25fYXV0cmUiLCJtZXNyaV9hZG1pc3Npb24iLCJtZXNyaV9ldGFibGlzc2VtZW50cyIsInBvbGVfZW1wbG9pX2lkZW50aXRlIiwicG9sZV9lbXBsb2lfYWRyZXNzZSIsInBvbGVfZW1wbG9pX2NvbnRhY3QiLCJwb2xlX2VtcGxvaV9pbnNjcmlwdGlvbiIsImNuYWZfcXVvdGllbnRfZmFtaWxpYWwiLCJjbmFmX2FsbG9jYXRhaXJlcyIsImNuYWZfZW5mYW50cyIsImNuYWZfYWRyZXNzZSIsImNub3VzX3N0YXR1dF9ib3Vyc2llciIsInVwdGltZSIsImNub3VzX2VjaGVsb25fYm91cnNlIiwiY25vdXNfZW1haWwiLCJjbm91c19wZXJpb2RlX3ZlcnNlbWVudCIsImNub3VzX3N0YXR1dF9ib3Vyc2UiLCJjbm91c192aWxsZV9ldHVkZXMiLCJjbm91c19pZGVudGl0ZSIsImRnZmlwX2RlY2xhcmFudDFfbm9tIiwiZGdmaXBfZGVjbGFyYW50MV9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50MV9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50MV9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RlY2xhcmFudDJfbm9tIiwiZGdmaXBfZGVjbGFyYW50Ml9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50Ml9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50Ml9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RhdGVfcmVjb3V2cmVtZW50IiwiZGdmaXBfZGF0ZV9ldGFibGlzc2VtZW50IiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX3RheGF0aW9uIiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX2FubmVlIiwiZGdmaXBfbm9tYnJlX3BhcnRzIiwiZGdmaXBfbm9tYnJlX3BlcnNvbm5lc19hX2NoYXJnZSIsImRnZmlwX3NpdHVhdGlvbl9mYW1pbGlhbGUiLCJkZ2ZpcF9yZXZlbnVfYnJ1dF9nbG9iYWwiLCJkZ2ZpcF9yZXZlbnVfaW1wb3NhYmxlIiwiZGdmaXBfaW1wb3RfcmV2ZW51X25ldF9hdmFudF9jb3JyZWN0aW9ucyIsImRnZmlwX21vbnRhbnRfaW1wb3QiLCJkZ2ZpcF9yZXZlbnVfZmlzY2FsX3JlZmVyZW5jZSIsImRnZmlwX2FubmVlX2ltcG90IiwiZGdmaXBfYW5uZWVfcmV2ZW51cyIsImRnZmlwX2VycmV1cl9jb3JyZWN0aWYiLCJkZ2ZpcF9zaXR1YXRpb25fcGFydGllbGxlIl0sInN1YiI6InN0YWdpbmcgZGV2ZWxvcG1lbnQiLCJpYXQiOjE2NjY4NjQwNzQsInZlcnNpb24iOiIxLjAiLCJleHAiOjE5ODI0ODMyNzR9.u2kMWzll3iCTczUOqMQbpS66VfrVzI2lLiyGEPcKAec*       
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@entreprise.api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EntreprisesApi.Client.OpenAPIDateConverter;

namespace EntreprisesApi.Model
{
    /// <summary>
    /// V3DgfipUnitesLegalesSirenLiassesFiscalesYearGet200ResponseDataDeclarationsInner
    /// </summary>
    [DataContract(Name = "_v3_dgfip_unites_legales__siren__liasses_fiscales__year__get_200_response_data_declarations_inner")]
    public partial class V3DgfipUnitesLegalesSirenLiassesFiscalesYearGet200ResponseDataDeclarationsInner : IEquatable<V3DgfipUnitesLegalesSirenLiassesFiscalesYearGet200ResponseDataDeclarationsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V3DgfipUnitesLegalesSirenLiassesFiscalesYearGet200ResponseDataDeclarationsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V3DgfipUnitesLegalesSirenLiassesFiscalesYearGet200ResponseDataDeclarationsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3DgfipUnitesLegalesSirenLiassesFiscalesYearGet200ResponseDataDeclarationsInner" /> class.
        /// </summary>
        /// <param name="numeroImprime">Numéro du formulaire de la liasse fiscale souscrit par l’unité légale. (required).</param>
        /// <param name="regime">regime (required).</param>
        /// <param name="dateDeclaration"> - Si télédéclaration : date de saisie   - Si dépôt papier : date de réception par les Services des Impôts des Entreprises (required).</param>
        /// <param name="dateFinExercice">Équivalent à la date de fin de la période d&#39;imposition (required).</param>
        /// <param name="dureeExercice">Durée de l’exercice fiscal calculée à partir des dates de début et de fin de la période d’imposition déclarées sur la déclaration souscrite par l&#39;unité légale.     Généralement cette valeur est de 365 jours, mais parfois 180 jours. Il y a une obligation fiscale déclarative au 31/12 de chaque année même s’il s’agit d’un dépôt provisoire. (required).</param>
        /// <param name="millesime">Code composé de 6 caractères:   - 4 caractères correspondant à l&#39;année de création ou modification du formulaire. Les valeurs possibles vont de 2006 à l&#39;année courante dès avril, l&#39;année précédente sinon.   - 2 caractères correspondant au numéro de version du formulaire, commençant à 01 (required).</param>
        /// <param name="donnees">Chaque entrée du tableau correspondant à couple code / valeur, spécifique au numéro d&#39;imprimé référencé à la clé &#x60;numero_imprime&#x60; (required).</param>
        public V3DgfipUnitesLegalesSirenLiassesFiscalesYearGet200ResponseDataDeclarationsInner(string numeroImprime = default(string), RGimeDImpositionApplicableAuRSultatFiscalDeLUnitLGale regime = default(RGimeDImpositionApplicableAuRSultatFiscalDeLUnitLGale), string dateDeclaration = default(string), string dateFinExercice = default(string), decimal dureeExercice = default(decimal), string millesime = default(string), List<DonnEsDeLImprimInner> donnees = default(List<DonnEsDeLImprimInner>))
        {
            // to ensure "numeroImprime" is required (not null)
            if (numeroImprime == null)
            {
                throw new ArgumentNullException("numeroImprime is a required property for V3DgfipUnitesLegalesSirenLiassesFiscalesYearGet200ResponseDataDeclarationsInner and cannot be null");
            }
            this.NumeroImprime = numeroImprime;
            // to ensure "regime" is required (not null)
            if (regime == null)
            {
                throw new ArgumentNullException("regime is a required property for V3DgfipUnitesLegalesSirenLiassesFiscalesYearGet200ResponseDataDeclarationsInner and cannot be null");
            }
            this.Regime = regime;
            // to ensure "dateDeclaration" is required (not null)
            if (dateDeclaration == null)
            {
                throw new ArgumentNullException("dateDeclaration is a required property for V3DgfipUnitesLegalesSirenLiassesFiscalesYearGet200ResponseDataDeclarationsInner and cannot be null");
            }
            this.DateDeclaration = dateDeclaration;
            // to ensure "dateFinExercice" is required (not null)
            if (dateFinExercice == null)
            {
                throw new ArgumentNullException("dateFinExercice is a required property for V3DgfipUnitesLegalesSirenLiassesFiscalesYearGet200ResponseDataDeclarationsInner and cannot be null");
            }
            this.DateFinExercice = dateFinExercice;
            this.DureeExercice = dureeExercice;
            // to ensure "millesime" is required (not null)
            if (millesime == null)
            {
                throw new ArgumentNullException("millesime is a required property for V3DgfipUnitesLegalesSirenLiassesFiscalesYearGet200ResponseDataDeclarationsInner and cannot be null");
            }
            this.Millesime = millesime;
            // to ensure "donnees" is required (not null)
            if (donnees == null)
            {
                throw new ArgumentNullException("donnees is a required property for V3DgfipUnitesLegalesSirenLiassesFiscalesYearGet200ResponseDataDeclarationsInner and cannot be null");
            }
            this.Donnees = donnees;
        }

        /// <summary>
        /// Numéro du formulaire de la liasse fiscale souscrit par l’unité légale.
        /// </summary>
        /// <value>Numéro du formulaire de la liasse fiscale souscrit par l’unité légale.</value>
        [DataMember(Name = "numero_imprime", IsRequired = true, EmitDefaultValue = true)]
        public string NumeroImprime { get; set; }

        /// <summary>
        /// Gets or Sets Regime
        /// </summary>
        [DataMember(Name = "regime", IsRequired = true, EmitDefaultValue = true)]
        public RGimeDImpositionApplicableAuRSultatFiscalDeLUnitLGale Regime { get; set; }

        /// <summary>
        ///  - Si télédéclaration : date de saisie   - Si dépôt papier : date de réception par les Services des Impôts des Entreprises
        /// </summary>
        /// <value> - Si télédéclaration : date de saisie   - Si dépôt papier : date de réception par les Services des Impôts des Entreprises</value>
        [DataMember(Name = "date_declaration", IsRequired = true, EmitDefaultValue = true)]
        public string DateDeclaration { get; set; }

        /// <summary>
        /// Équivalent à la date de fin de la période d&#39;imposition
        /// </summary>
        /// <value>Équivalent à la date de fin de la période d&#39;imposition</value>
        [DataMember(Name = "date_fin_exercice", IsRequired = true, EmitDefaultValue = true)]
        public string DateFinExercice { get; set; }

        /// <summary>
        /// Durée de l’exercice fiscal calculée à partir des dates de début et de fin de la période d’imposition déclarées sur la déclaration souscrite par l&#39;unité légale.     Généralement cette valeur est de 365 jours, mais parfois 180 jours. Il y a une obligation fiscale déclarative au 31/12 de chaque année même s’il s’agit d’un dépôt provisoire.
        /// </summary>
        /// <value>Durée de l’exercice fiscal calculée à partir des dates de début et de fin de la période d’imposition déclarées sur la déclaration souscrite par l&#39;unité légale.     Généralement cette valeur est de 365 jours, mais parfois 180 jours. Il y a une obligation fiscale déclarative au 31/12 de chaque année même s’il s’agit d’un dépôt provisoire.</value>
        [DataMember(Name = "duree_exercice", IsRequired = true, EmitDefaultValue = true)]
        public decimal DureeExercice { get; set; }

        /// <summary>
        /// Code composé de 6 caractères:   - 4 caractères correspondant à l&#39;année de création ou modification du formulaire. Les valeurs possibles vont de 2006 à l&#39;année courante dès avril, l&#39;année précédente sinon.   - 2 caractères correspondant au numéro de version du formulaire, commençant à 01
        /// </summary>
        /// <value>Code composé de 6 caractères:   - 4 caractères correspondant à l&#39;année de création ou modification du formulaire. Les valeurs possibles vont de 2006 à l&#39;année courante dès avril, l&#39;année précédente sinon.   - 2 caractères correspondant au numéro de version du formulaire, commençant à 01</value>
        [DataMember(Name = "millesime", IsRequired = true, EmitDefaultValue = true)]
        public string Millesime { get; set; }

        /// <summary>
        /// Chaque entrée du tableau correspondant à couple code / valeur, spécifique au numéro d&#39;imprimé référencé à la clé &#x60;numero_imprime&#x60;
        /// </summary>
        /// <value>Chaque entrée du tableau correspondant à couple code / valeur, spécifique au numéro d&#39;imprimé référencé à la clé &#x60;numero_imprime&#x60;</value>
        [DataMember(Name = "donnees", IsRequired = true, EmitDefaultValue = true)]
        public List<DonnEsDeLImprimInner> Donnees { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V3DgfipUnitesLegalesSirenLiassesFiscalesYearGet200ResponseDataDeclarationsInner {\n");
            sb.Append("  NumeroImprime: ").Append(NumeroImprime).Append("\n");
            sb.Append("  Regime: ").Append(Regime).Append("\n");
            sb.Append("  DateDeclaration: ").Append(DateDeclaration).Append("\n");
            sb.Append("  DateFinExercice: ").Append(DateFinExercice).Append("\n");
            sb.Append("  DureeExercice: ").Append(DureeExercice).Append("\n");
            sb.Append("  Millesime: ").Append(Millesime).Append("\n");
            sb.Append("  Donnees: ").Append(Donnees).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V3DgfipUnitesLegalesSirenLiassesFiscalesYearGet200ResponseDataDeclarationsInner);
        }

        /// <summary>
        /// Returns true if V3DgfipUnitesLegalesSirenLiassesFiscalesYearGet200ResponseDataDeclarationsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of V3DgfipUnitesLegalesSirenLiassesFiscalesYearGet200ResponseDataDeclarationsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V3DgfipUnitesLegalesSirenLiassesFiscalesYearGet200ResponseDataDeclarationsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NumeroImprime == input.NumeroImprime ||
                    (this.NumeroImprime != null &&
                    this.NumeroImprime.Equals(input.NumeroImprime))
                ) && 
                (
                    this.Regime == input.Regime ||
                    (this.Regime != null &&
                    this.Regime.Equals(input.Regime))
                ) && 
                (
                    this.DateDeclaration == input.DateDeclaration ||
                    (this.DateDeclaration != null &&
                    this.DateDeclaration.Equals(input.DateDeclaration))
                ) && 
                (
                    this.DateFinExercice == input.DateFinExercice ||
                    (this.DateFinExercice != null &&
                    this.DateFinExercice.Equals(input.DateFinExercice))
                ) && 
                (
                    this.DureeExercice == input.DureeExercice ||
                    this.DureeExercice.Equals(input.DureeExercice)
                ) && 
                (
                    this.Millesime == input.Millesime ||
                    (this.Millesime != null &&
                    this.Millesime.Equals(input.Millesime))
                ) && 
                (
                    this.Donnees == input.Donnees ||
                    this.Donnees != null &&
                    input.Donnees != null &&
                    this.Donnees.SequenceEqual(input.Donnees)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NumeroImprime != null)
                {
                    hashCode = (hashCode * 59) + this.NumeroImprime.GetHashCode();
                }
                if (this.Regime != null)
                {
                    hashCode = (hashCode * 59) + this.Regime.GetHashCode();
                }
                if (this.DateDeclaration != null)
                {
                    hashCode = (hashCode * 59) + this.DateDeclaration.GetHashCode();
                }
                if (this.DateFinExercice != null)
                {
                    hashCode = (hashCode * 59) + this.DateFinExercice.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DureeExercice.GetHashCode();
                if (this.Millesime != null)
                {
                    hashCode = (hashCode * 59) + this.Millesime.GetHashCode();
                }
                if (this.Donnees != null)
                {
                    hashCode = (hashCode * 59) + this.Donnees.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
