/*
 * API Entreprise
 *
 * Cette page contient la documentation technique pour accéder à API Entreprise. Les API étant accessible uniquement sous habilitation, l'interaction avec l'environnement de production n'est possible que si vous êtes **en possession d'une clé d'accès (jeton).  ### Comment tester l'API ?  Il est possible de tester les API via notre environnement de **staging** qui vous retournera systématiquement des données fictives.  Il est nécessaire d'utiliser le jeton de staging indiqué ci-dessous.  - --  *eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1MmE1YmZjMi1jMzUwLTQ4ZjQtYjY5Ni05ZWE3NmRiM2VmMjkiLCJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJzY29wZXMiOlsiY2VydGlmaWNhdF9yZ2VfYWRlbWUiLCJtc2FfY290aXNhdGlvbnMiLCJlbnRyZXByaXNlcyIsImV4dHJhaXRzX3JjcyIsImNlcnRpZmljYXRfb3BxaWJpIiwiYXNzb2NpYXRpb25zIiwiZXRhYmxpc3NlbWVudHMiLCJmbnRwX2NhcnRlX3BybyIsInF1YWxpYmF0IiwiZW50cmVwcmlzZXNfYXJ0aXNhbmFsZXMiLCJjZXJ0aWZpY2F0X2NuZXRwIiwiZW9yaV9kb3VhbmVzIiwicHJvYnRwIiwiYWN0ZXNfaW5waSIsImV4dHJhaXRfY291cnRfaW5waSIsImF0dGVzdGF0aW9uc19zb2NpYWxlcyIsImxpYXNzZV9maXNjYWxlIiwiYXR0ZXN0YXRpb25zX2Zpc2NhbGVzIiwiZXhlcmNpY2VzIiwiY29udmVudGlvbnNfY29sbGVjdGl2ZXMiLCJiaWxhbnNfaW5waSIsImRvY3VtZW50c19hc3NvY2lhdGlvbiIsImNlcnRpZmljYXRfYWdlbmNlX2JpbyIsImJpbGFuc19lbnRyZXByaXNlX2JkZiIsImF0dGVzdGF0aW9uc19hZ2VmaXBoIiwibWVzcmlfaWRlbnRpZmlhbnQiLCJtZXNyaV9pZGVudGl0ZSIsIm1lc3JpX2luc2NyaXB0aW9uX2V0dWRpYW50IiwibWVzcmlfaW5zY3JpcHRpb25fYXV0cmUiLCJtZXNyaV9hZG1pc3Npb24iLCJtZXNyaV9ldGFibGlzc2VtZW50cyIsInBvbGVfZW1wbG9pX2lkZW50aXRlIiwicG9sZV9lbXBsb2lfYWRyZXNzZSIsInBvbGVfZW1wbG9pX2NvbnRhY3QiLCJwb2xlX2VtcGxvaV9pbnNjcmlwdGlvbiIsImNuYWZfcXVvdGllbnRfZmFtaWxpYWwiLCJjbmFmX2FsbG9jYXRhaXJlcyIsImNuYWZfZW5mYW50cyIsImNuYWZfYWRyZXNzZSIsImNub3VzX3N0YXR1dF9ib3Vyc2llciIsInVwdGltZSIsImNub3VzX2VjaGVsb25fYm91cnNlIiwiY25vdXNfZW1haWwiLCJjbm91c19wZXJpb2RlX3ZlcnNlbWVudCIsImNub3VzX3N0YXR1dF9ib3Vyc2UiLCJjbm91c192aWxsZV9ldHVkZXMiLCJjbm91c19pZGVudGl0ZSIsImRnZmlwX2RlY2xhcmFudDFfbm9tIiwiZGdmaXBfZGVjbGFyYW50MV9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50MV9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50MV9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RlY2xhcmFudDJfbm9tIiwiZGdmaXBfZGVjbGFyYW50Ml9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50Ml9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50Ml9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RhdGVfcmVjb3V2cmVtZW50IiwiZGdmaXBfZGF0ZV9ldGFibGlzc2VtZW50IiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX3RheGF0aW9uIiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX2FubmVlIiwiZGdmaXBfbm9tYnJlX3BhcnRzIiwiZGdmaXBfbm9tYnJlX3BlcnNvbm5lc19hX2NoYXJnZSIsImRnZmlwX3NpdHVhdGlvbl9mYW1pbGlhbGUiLCJkZ2ZpcF9yZXZlbnVfYnJ1dF9nbG9iYWwiLCJkZ2ZpcF9yZXZlbnVfaW1wb3NhYmxlIiwiZGdmaXBfaW1wb3RfcmV2ZW51X25ldF9hdmFudF9jb3JyZWN0aW9ucyIsImRnZmlwX21vbnRhbnRfaW1wb3QiLCJkZ2ZpcF9yZXZlbnVfZmlzY2FsX3JlZmVyZW5jZSIsImRnZmlwX2FubmVlX2ltcG90IiwiZGdmaXBfYW5uZWVfcmV2ZW51cyIsImRnZmlwX2VycmV1cl9jb3JyZWN0aWYiLCJkZ2ZpcF9zaXR1YXRpb25fcGFydGllbGxlIl0sInN1YiI6InN0YWdpbmcgZGV2ZWxvcG1lbnQiLCJpYXQiOjE2NjY4NjQwNzQsInZlcnNpb24iOiIxLjAiLCJleHAiOjE5ODI0ODMyNzR9.u2kMWzll3iCTczUOqMQbpS66VfrVzI2lLiyGEPcKAec*       
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@entreprise.api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EntreprisesApi.Client.OpenAPIDateConverter;

namespace EntreprisesApi.Model
{
    /// <summary>
    /// V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData
    /// </summary>
    [DataContract(Name = "_v3_ministere_interieur_rna_associations__siret_or_rna__get_200_response_data")]
    public partial class V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData : IEquatable<V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData" /> class.
        /// </summary>
        /// <param name="rnaId">rnaId (required).</param>
        /// <param name="titre">titre (required).</param>
        /// <param name="objet">Il s&#39;agit d&#39;une description courte mais exhaustive des activités de l&#39;organisme. (required).</param>
        /// <param name="siret">siret (required).</param>
        /// <param name="siretSiegeSocial">siretSiegeSocial (required).</param>
        /// <param name="dateCreation">Il s&#39;agit du jour de dépôt du dossier de création de l&#39;association à la Préfecture. (required).</param>
        /// <param name="dateDeclaration">Jour de la dernière déclaration faîte par l&#39;association. (required).</param>
        /// <param name="datePublication">Jour de la publication au journal officiel de l&#39;avis de création de l&#39;association. Toutes les assoiations ne sont pas forcément &#39;déclarées&#39;. La publication au Journal Officiel permet à l&#39;association de devenir une personne morale, a contrario des &#39;associations de fait&#39;, non déclarées au JO. (required).</param>
        /// <param name="dateDissolution">Si l&#39;association est dissolue, ce champ indique la date de dissolution, autrement, il est indiqué &#39;null&#39;. (required).</param>
        /// <param name="adresseSiege">adresseSiege (required).</param>
        /// <param name="etat">etat (required).</param>
        /// <param name="groupement">Trois modalités possibles : si l&#39;association n&#39;est pas un groupement, il est indiqué &#39;Simple&#39; ; si l&#39;association est un groupement, la valeur est &#39;Union&#39; ou &#39;Fédération&#39;. La valeur peut aussi être manquante (null) (required).</param>
        /// <param name="miseAJour">miseAJour (required).</param>
        public V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData(string rnaId = default(string), string titre = default(string), string objet = default(string), string siret = default(string), string siretSiegeSocial = default(string), string dateCreation = default(string), string dateDeclaration = default(string), string datePublication = default(string), string dateDissolution = default(string), V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseDataAdresseSiege adresseSiege = default(V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseDataAdresseSiege), string etat = default(string), string groupement = default(string), string miseAJour = default(string))
        {
            // to ensure "rnaId" is required (not null)
            if (rnaId == null)
            {
                throw new ArgumentNullException("rnaId is a required property for V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData and cannot be null");
            }
            this.RnaId = rnaId;
            // to ensure "titre" is required (not null)
            if (titre == null)
            {
                throw new ArgumentNullException("titre is a required property for V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData and cannot be null");
            }
            this.Titre = titre;
            // to ensure "objet" is required (not null)
            if (objet == null)
            {
                throw new ArgumentNullException("objet is a required property for V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData and cannot be null");
            }
            this.Objet = objet;
            // to ensure "siret" is required (not null)
            if (siret == null)
            {
                throw new ArgumentNullException("siret is a required property for V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData and cannot be null");
            }
            this.Siret = siret;
            // to ensure "siretSiegeSocial" is required (not null)
            if (siretSiegeSocial == null)
            {
                throw new ArgumentNullException("siretSiegeSocial is a required property for V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData and cannot be null");
            }
            this.SiretSiegeSocial = siretSiegeSocial;
            // to ensure "dateCreation" is required (not null)
            if (dateCreation == null)
            {
                throw new ArgumentNullException("dateCreation is a required property for V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData and cannot be null");
            }
            this.DateCreation = dateCreation;
            // to ensure "dateDeclaration" is required (not null)
            if (dateDeclaration == null)
            {
                throw new ArgumentNullException("dateDeclaration is a required property for V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData and cannot be null");
            }
            this.DateDeclaration = dateDeclaration;
            // to ensure "datePublication" is required (not null)
            if (datePublication == null)
            {
                throw new ArgumentNullException("datePublication is a required property for V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData and cannot be null");
            }
            this.DatePublication = datePublication;
            // to ensure "dateDissolution" is required (not null)
            if (dateDissolution == null)
            {
                throw new ArgumentNullException("dateDissolution is a required property for V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData and cannot be null");
            }
            this.DateDissolution = dateDissolution;
            // to ensure "adresseSiege" is required (not null)
            if (adresseSiege == null)
            {
                throw new ArgumentNullException("adresseSiege is a required property for V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData and cannot be null");
            }
            this.AdresseSiege = adresseSiege;
            // to ensure "etat" is required (not null)
            if (etat == null)
            {
                throw new ArgumentNullException("etat is a required property for V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData and cannot be null");
            }
            this.Etat = etat;
            // to ensure "groupement" is required (not null)
            if (groupement == null)
            {
                throw new ArgumentNullException("groupement is a required property for V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData and cannot be null");
            }
            this.Groupement = groupement;
            // to ensure "miseAJour" is required (not null)
            if (miseAJour == null)
            {
                throw new ArgumentNullException("miseAJour is a required property for V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData and cannot be null");
            }
            this.MiseAJour = miseAJour;
        }

        /// <summary>
        /// Gets or Sets RnaId
        /// </summary>
        [DataMember(Name = "rna_id", IsRequired = true, EmitDefaultValue = true)]
        public string RnaId { get; set; }

        /// <summary>
        /// Gets or Sets Titre
        /// </summary>
        [DataMember(Name = "titre", IsRequired = true, EmitDefaultValue = true)]
        public string Titre { get; set; }

        /// <summary>
        /// Il s&#39;agit d&#39;une description courte mais exhaustive des activités de l&#39;organisme.
        /// </summary>
        /// <value>Il s&#39;agit d&#39;une description courte mais exhaustive des activités de l&#39;organisme.</value>
        [DataMember(Name = "objet", IsRequired = true, EmitDefaultValue = true)]
        public string Objet { get; set; }

        /// <summary>
        /// Gets or Sets Siret
        /// </summary>
        [DataMember(Name = "siret", IsRequired = true, EmitDefaultValue = true)]
        public string Siret { get; set; }

        /// <summary>
        /// Gets or Sets SiretSiegeSocial
        /// </summary>
        [DataMember(Name = "siret_siege_social", IsRequired = true, EmitDefaultValue = true)]
        public string SiretSiegeSocial { get; set; }

        /// <summary>
        /// Il s&#39;agit du jour de dépôt du dossier de création de l&#39;association à la Préfecture.
        /// </summary>
        /// <value>Il s&#39;agit du jour de dépôt du dossier de création de l&#39;association à la Préfecture.</value>
        [DataMember(Name = "date_creation", IsRequired = true, EmitDefaultValue = true)]
        public string DateCreation { get; set; }

        /// <summary>
        /// Jour de la dernière déclaration faîte par l&#39;association.
        /// </summary>
        /// <value>Jour de la dernière déclaration faîte par l&#39;association.</value>
        [DataMember(Name = "date_declaration", IsRequired = true, EmitDefaultValue = true)]
        public string DateDeclaration { get; set; }

        /// <summary>
        /// Jour de la publication au journal officiel de l&#39;avis de création de l&#39;association. Toutes les assoiations ne sont pas forcément &#39;déclarées&#39;. La publication au Journal Officiel permet à l&#39;association de devenir une personne morale, a contrario des &#39;associations de fait&#39;, non déclarées au JO.
        /// </summary>
        /// <value>Jour de la publication au journal officiel de l&#39;avis de création de l&#39;association. Toutes les assoiations ne sont pas forcément &#39;déclarées&#39;. La publication au Journal Officiel permet à l&#39;association de devenir une personne morale, a contrario des &#39;associations de fait&#39;, non déclarées au JO.</value>
        [DataMember(Name = "date_publication", IsRequired = true, EmitDefaultValue = true)]
        public string DatePublication { get; set; }

        /// <summary>
        /// Si l&#39;association est dissolue, ce champ indique la date de dissolution, autrement, il est indiqué &#39;null&#39;.
        /// </summary>
        /// <value>Si l&#39;association est dissolue, ce champ indique la date de dissolution, autrement, il est indiqué &#39;null&#39;.</value>
        [DataMember(Name = "date_dissolution", IsRequired = true, EmitDefaultValue = true)]
        public string DateDissolution { get; set; }

        /// <summary>
        /// Gets or Sets AdresseSiege
        /// </summary>
        [DataMember(Name = "adresse_siege", IsRequired = true, EmitDefaultValue = true)]
        public V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseDataAdresseSiege AdresseSiege { get; set; }

        /// <summary>
        /// Gets or Sets Etat
        /// </summary>
        [DataMember(Name = "etat", IsRequired = true, EmitDefaultValue = true)]
        public string Etat { get; set; }

        /// <summary>
        /// Trois modalités possibles : si l&#39;association n&#39;est pas un groupement, il est indiqué &#39;Simple&#39; ; si l&#39;association est un groupement, la valeur est &#39;Union&#39; ou &#39;Fédération&#39;. La valeur peut aussi être manquante (null)
        /// </summary>
        /// <value>Trois modalités possibles : si l&#39;association n&#39;est pas un groupement, il est indiqué &#39;Simple&#39; ; si l&#39;association est un groupement, la valeur est &#39;Union&#39; ou &#39;Fédération&#39;. La valeur peut aussi être manquante (null)</value>
        [DataMember(Name = "groupement", IsRequired = true, EmitDefaultValue = true)]
        public string Groupement { get; set; }

        /// <summary>
        /// Gets or Sets MiseAJour
        /// </summary>
        [DataMember(Name = "mise_a_jour", IsRequired = true, EmitDefaultValue = true)]
        public string MiseAJour { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData {\n");
            sb.Append("  RnaId: ").Append(RnaId).Append("\n");
            sb.Append("  Titre: ").Append(Titre).Append("\n");
            sb.Append("  Objet: ").Append(Objet).Append("\n");
            sb.Append("  Siret: ").Append(Siret).Append("\n");
            sb.Append("  SiretSiegeSocial: ").Append(SiretSiegeSocial).Append("\n");
            sb.Append("  DateCreation: ").Append(DateCreation).Append("\n");
            sb.Append("  DateDeclaration: ").Append(DateDeclaration).Append("\n");
            sb.Append("  DatePublication: ").Append(DatePublication).Append("\n");
            sb.Append("  DateDissolution: ").Append(DateDissolution).Append("\n");
            sb.Append("  AdresseSiege: ").Append(AdresseSiege).Append("\n");
            sb.Append("  Etat: ").Append(Etat).Append("\n");
            sb.Append("  Groupement: ").Append(Groupement).Append("\n");
            sb.Append("  MiseAJour: ").Append(MiseAJour).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData);
        }

        /// <summary>
        /// Returns true if V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V3MinistereInterieurRnaAssociationsSiretOrRnaGet200ResponseData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RnaId == input.RnaId ||
                    (this.RnaId != null &&
                    this.RnaId.Equals(input.RnaId))
                ) && 
                (
                    this.Titre == input.Titre ||
                    (this.Titre != null &&
                    this.Titre.Equals(input.Titre))
                ) && 
                (
                    this.Objet == input.Objet ||
                    (this.Objet != null &&
                    this.Objet.Equals(input.Objet))
                ) && 
                (
                    this.Siret == input.Siret ||
                    (this.Siret != null &&
                    this.Siret.Equals(input.Siret))
                ) && 
                (
                    this.SiretSiegeSocial == input.SiretSiegeSocial ||
                    (this.SiretSiegeSocial != null &&
                    this.SiretSiegeSocial.Equals(input.SiretSiegeSocial))
                ) && 
                (
                    this.DateCreation == input.DateCreation ||
                    (this.DateCreation != null &&
                    this.DateCreation.Equals(input.DateCreation))
                ) && 
                (
                    this.DateDeclaration == input.DateDeclaration ||
                    (this.DateDeclaration != null &&
                    this.DateDeclaration.Equals(input.DateDeclaration))
                ) && 
                (
                    this.DatePublication == input.DatePublication ||
                    (this.DatePublication != null &&
                    this.DatePublication.Equals(input.DatePublication))
                ) && 
                (
                    this.DateDissolution == input.DateDissolution ||
                    (this.DateDissolution != null &&
                    this.DateDissolution.Equals(input.DateDissolution))
                ) && 
                (
                    this.AdresseSiege == input.AdresseSiege ||
                    (this.AdresseSiege != null &&
                    this.AdresseSiege.Equals(input.AdresseSiege))
                ) && 
                (
                    this.Etat == input.Etat ||
                    (this.Etat != null &&
                    this.Etat.Equals(input.Etat))
                ) && 
                (
                    this.Groupement == input.Groupement ||
                    (this.Groupement != null &&
                    this.Groupement.Equals(input.Groupement))
                ) && 
                (
                    this.MiseAJour == input.MiseAJour ||
                    (this.MiseAJour != null &&
                    this.MiseAJour.Equals(input.MiseAJour))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RnaId != null)
                {
                    hashCode = (hashCode * 59) + this.RnaId.GetHashCode();
                }
                if (this.Titre != null)
                {
                    hashCode = (hashCode * 59) + this.Titre.GetHashCode();
                }
                if (this.Objet != null)
                {
                    hashCode = (hashCode * 59) + this.Objet.GetHashCode();
                }
                if (this.Siret != null)
                {
                    hashCode = (hashCode * 59) + this.Siret.GetHashCode();
                }
                if (this.SiretSiegeSocial != null)
                {
                    hashCode = (hashCode * 59) + this.SiretSiegeSocial.GetHashCode();
                }
                if (this.DateCreation != null)
                {
                    hashCode = (hashCode * 59) + this.DateCreation.GetHashCode();
                }
                if (this.DateDeclaration != null)
                {
                    hashCode = (hashCode * 59) + this.DateDeclaration.GetHashCode();
                }
                if (this.DatePublication != null)
                {
                    hashCode = (hashCode * 59) + this.DatePublication.GetHashCode();
                }
                if (this.DateDissolution != null)
                {
                    hashCode = (hashCode * 59) + this.DateDissolution.GetHashCode();
                }
                if (this.AdresseSiege != null)
                {
                    hashCode = (hashCode * 59) + this.AdresseSiege.GetHashCode();
                }
                if (this.Etat != null)
                {
                    hashCode = (hashCode * 59) + this.Etat.GetHashCode();
                }
                if (this.Groupement != null)
                {
                    hashCode = (hashCode * 59) + this.Groupement.GetHashCode();
                }
                if (this.MiseAJour != null)
                {
                    hashCode = (hashCode * 59) + this.MiseAJour.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
