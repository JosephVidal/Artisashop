/*
 * API Entreprise
 *
 * Cette page contient la documentation technique pour accéder à API Entreprise. Les API étant accessible uniquement sous habilitation, l'interaction avec l'environnement de production n'est possible que si vous êtes **en possession d'une clé d'accès (jeton).  ### Comment tester l'API ?  Il est possible de tester les API via notre environnement de **staging** qui vous retournera systématiquement des données fictives.  Il est nécessaire d'utiliser le jeton de staging indiqué ci-dessous.  - --  *eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1MmE1YmZjMi1jMzUwLTQ4ZjQtYjY5Ni05ZWE3NmRiM2VmMjkiLCJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJzY29wZXMiOlsiY2VydGlmaWNhdF9yZ2VfYWRlbWUiLCJtc2FfY290aXNhdGlvbnMiLCJlbnRyZXByaXNlcyIsImV4dHJhaXRzX3JjcyIsImNlcnRpZmljYXRfb3BxaWJpIiwiYXNzb2NpYXRpb25zIiwiZXRhYmxpc3NlbWVudHMiLCJmbnRwX2NhcnRlX3BybyIsInF1YWxpYmF0IiwiZW50cmVwcmlzZXNfYXJ0aXNhbmFsZXMiLCJjZXJ0aWZpY2F0X2NuZXRwIiwiZW9yaV9kb3VhbmVzIiwicHJvYnRwIiwiYWN0ZXNfaW5waSIsImV4dHJhaXRfY291cnRfaW5waSIsImF0dGVzdGF0aW9uc19zb2NpYWxlcyIsImxpYXNzZV9maXNjYWxlIiwiYXR0ZXN0YXRpb25zX2Zpc2NhbGVzIiwiZXhlcmNpY2VzIiwiY29udmVudGlvbnNfY29sbGVjdGl2ZXMiLCJiaWxhbnNfaW5waSIsImRvY3VtZW50c19hc3NvY2lhdGlvbiIsImNlcnRpZmljYXRfYWdlbmNlX2JpbyIsImJpbGFuc19lbnRyZXByaXNlX2JkZiIsImF0dGVzdGF0aW9uc19hZ2VmaXBoIiwibWVzcmlfaWRlbnRpZmlhbnQiLCJtZXNyaV9pZGVudGl0ZSIsIm1lc3JpX2luc2NyaXB0aW9uX2V0dWRpYW50IiwibWVzcmlfaW5zY3JpcHRpb25fYXV0cmUiLCJtZXNyaV9hZG1pc3Npb24iLCJtZXNyaV9ldGFibGlzc2VtZW50cyIsInBvbGVfZW1wbG9pX2lkZW50aXRlIiwicG9sZV9lbXBsb2lfYWRyZXNzZSIsInBvbGVfZW1wbG9pX2NvbnRhY3QiLCJwb2xlX2VtcGxvaV9pbnNjcmlwdGlvbiIsImNuYWZfcXVvdGllbnRfZmFtaWxpYWwiLCJjbmFmX2FsbG9jYXRhaXJlcyIsImNuYWZfZW5mYW50cyIsImNuYWZfYWRyZXNzZSIsImNub3VzX3N0YXR1dF9ib3Vyc2llciIsInVwdGltZSIsImNub3VzX2VjaGVsb25fYm91cnNlIiwiY25vdXNfZW1haWwiLCJjbm91c19wZXJpb2RlX3ZlcnNlbWVudCIsImNub3VzX3N0YXR1dF9ib3Vyc2UiLCJjbm91c192aWxsZV9ldHVkZXMiLCJjbm91c19pZGVudGl0ZSIsImRnZmlwX2RlY2xhcmFudDFfbm9tIiwiZGdmaXBfZGVjbGFyYW50MV9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50MV9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50MV9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RlY2xhcmFudDJfbm9tIiwiZGdmaXBfZGVjbGFyYW50Ml9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50Ml9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50Ml9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RhdGVfcmVjb3V2cmVtZW50IiwiZGdmaXBfZGF0ZV9ldGFibGlzc2VtZW50IiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX3RheGF0aW9uIiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX2FubmVlIiwiZGdmaXBfbm9tYnJlX3BhcnRzIiwiZGdmaXBfbm9tYnJlX3BlcnNvbm5lc19hX2NoYXJnZSIsImRnZmlwX3NpdHVhdGlvbl9mYW1pbGlhbGUiLCJkZ2ZpcF9yZXZlbnVfYnJ1dF9nbG9iYWwiLCJkZ2ZpcF9yZXZlbnVfaW1wb3NhYmxlIiwiZGdmaXBfaW1wb3RfcmV2ZW51X25ldF9hdmFudF9jb3JyZWN0aW9ucyIsImRnZmlwX21vbnRhbnRfaW1wb3QiLCJkZ2ZpcF9yZXZlbnVfZmlzY2FsX3JlZmVyZW5jZSIsImRnZmlwX2FubmVlX2ltcG90IiwiZGdmaXBfYW5uZWVfcmV2ZW51cyIsImRnZmlwX2VycmV1cl9jb3JyZWN0aWYiLCJkZ2ZpcF9zaXR1YXRpb25fcGFydGllbGxlIl0sInN1YiI6InN0YWdpbmcgZGV2ZWxvcG1lbnQiLCJpYXQiOjE2NjY4NjQwNzQsInZlcnNpb24iOiIxLjAiLCJleHAiOjE5ODI0ODMyNzR9.u2kMWzll3iCTczUOqMQbpS66VfrVzI2lLiyGEPcKAec*       
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@entreprise.api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EntreprisesApi.Client.OpenAPIDateConverter;

namespace EntreprisesApi.Model
{
    /// <summary>
    /// V3InseeSireneEtablissementsSiretAdresseGet200ResponseData
    /// </summary>
    [DataContract(Name = "_v3_insee_sirene_etablissements__siret__adresse_get_200_response_data")]
    public partial class V3InseeSireneEtablissementsSiretAdresseGet200ResponseData : IEquatable<V3InseeSireneEtablissementsSiretAdresseGet200ResponseData>, IValidatableObject
    {
        /// <summary>
        /// Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/indrep
        /// </summary>
        /// <value>Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/indrep</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IndiceRepetitionVoieEnum
        {
            /// <summary>
            /// Enum Bis for value: bis
            /// </summary>
            [EnumMember(Value = "bis")]
            Bis = 1,

            /// <summary>
            /// Enum Ter for value: ter
            /// </summary>
            [EnumMember(Value = "ter")]
            Ter = 2,

            /// <summary>
            /// Enum Quarter for value: quarter
            /// </summary>
            [EnumMember(Value = "quarter")]
            Quarter = 3,

            /// <summary>
            /// Enum Quinquies for value: quinquies
            /// </summary>
            [EnumMember(Value = "quinquies")]
            Quinquies = 4,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 5

        }


        /// <summary>
        /// Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/indrep
        /// </summary>
        /// <value>Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/indrep</value>
        [DataMember(Name = "indice_repetition_voie", IsRequired = true, EmitDefaultValue = true)]
        public IndiceRepetitionVoieEnum IndiceRepetitionVoie { get; set; }
        /// <summary>
        /// Le type de la voie de localisation est indiquée en abrégé et en majuscules. L&#39;information n&#39;est pas toujours renseignée. Pour certaines petites communes, l&#39;information n&#39;existe pas.     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/typvoie
        /// </summary>
        /// <value>Le type de la voie de localisation est indiquée en abrégé et en majuscules. L&#39;information n&#39;est pas toujours renseignée. Pour certaines petites communes, l&#39;information n&#39;existe pas.     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/typvoie</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeVoieEnum
        {
            /// <summary>
            /// Enum ALLE for value: ALLÉE
            /// </summary>
            [EnumMember(Value = "ALLÉE")]
            ALLE = 1,

            /// <summary>
            /// Enum AVENUE for value: AVENUE
            /// </summary>
            [EnumMember(Value = "AVENUE")]
            AVENUE = 2,

            /// <summary>
            /// Enum BOULEVARD for value: BOULEVARD
            /// </summary>
            [EnumMember(Value = "BOULEVARD")]
            BOULEVARD = 3,

            /// <summary>
            /// Enum CARREFOUR for value: CARREFOUR
            /// </summary>
            [EnumMember(Value = "CARREFOUR")]
            CARREFOUR = 4,

            /// <summary>
            /// Enum CHEMIN for value: CHEMIN
            /// </summary>
            [EnumMember(Value = "CHEMIN")]
            CHEMIN = 5,

            /// <summary>
            /// Enum CHAUSSE for value: CHAUSSÉE
            /// </summary>
            [EnumMember(Value = "CHAUSSÉE")]
            CHAUSSE = 6,

            /// <summary>
            /// Enum CIT for value: CITÉ
            /// </summary>
            [EnumMember(Value = "CITÉ")]
            CIT = 7,

            /// <summary>
            /// Enum CORNICHE for value: CORNICHE
            /// </summary>
            [EnumMember(Value = "CORNICHE")]
            CORNICHE = 8,

            /// <summary>
            /// Enum COURS for value: COURS
            /// </summary>
            [EnumMember(Value = "COURS")]
            COURS = 9,

            /// <summary>
            /// Enum DOMAINE for value: DOMAINE
            /// </summary>
            [EnumMember(Value = "DOMAINE")]
            DOMAINE = 10,

            /// <summary>
            /// Enum DESCENTE for value: DESCENTE
            /// </summary>
            [EnumMember(Value = "DESCENTE")]
            DESCENTE = 11,

            /// <summary>
            /// Enum ECART for value: ECART
            /// </summary>
            [EnumMember(Value = "ECART")]
            ECART = 12,

            /// <summary>
            /// Enum ESPLANADE for value: ESPLANADE
            /// </summary>
            [EnumMember(Value = "ESPLANADE")]
            ESPLANADE = 13,

            /// <summary>
            /// Enum FAUBOURG for value: FAUBOURG
            /// </summary>
            [EnumMember(Value = "FAUBOURG")]
            FAUBOURG = 14,

            /// <summary>
            /// Enum GRANDERUE for value: GRANDE RUE
            /// </summary>
            [EnumMember(Value = "GRANDE RUE")]
            GRANDERUE = 15,

            /// <summary>
            /// Enum HAMEAU for value: HAMEAU
            /// </summary>
            [EnumMember(Value = "HAMEAU")]
            HAMEAU = 16,

            /// <summary>
            /// Enum HALLE for value: HALLE
            /// </summary>
            [EnumMember(Value = "HALLE")]
            HALLE = 17,

            /// <summary>
            /// Enum IMPASSE for value: IMPASSE
            /// </summary>
            [EnumMember(Value = "IMPASSE")]
            IMPASSE = 18,

            /// <summary>
            /// Enum LIEUDIT for value: LIEU-DIT
            /// </summary>
            [EnumMember(Value = "LIEU-DIT")]
            LIEUDIT = 19,

            /// <summary>
            /// Enum LOTISSEMENT for value: LOTISSEMENT
            /// </summary>
            [EnumMember(Value = "LOTISSEMENT")]
            LOTISSEMENT = 20,

            /// <summary>
            /// Enum MARCH for value: MARCHÉ
            /// </summary>
            [EnumMember(Value = "MARCHÉ")]
            MARCH = 21,

            /// <summary>
            /// Enum MONTE for value: MONTÉE
            /// </summary>
            [EnumMember(Value = "MONTÉE")]
            MONTE = 22,

            /// <summary>
            /// Enum PASSAGE for value: PASSAGE
            /// </summary>
            [EnumMember(Value = "PASSAGE")]
            PASSAGE = 23,

            /// <summary>
            /// Enum PLACE for value: PLACE
            /// </summary>
            [EnumMember(Value = "PLACE")]
            PLACE = 24,

            /// <summary>
            /// Enum PLAINE for value: PLAINE
            /// </summary>
            [EnumMember(Value = "PLAINE")]
            PLAINE = 25,

            /// <summary>
            /// Enum PLATEAU for value: PLATEAU
            /// </summary>
            [EnumMember(Value = "PLATEAU")]
            PLATEAU = 26,

            /// <summary>
            /// Enum PROMENADE for value: PROMENADE
            /// </summary>
            [EnumMember(Value = "PROMENADE")]
            PROMENADE = 27,

            /// <summary>
            /// Enum PARVIS for value: PARVIS
            /// </summary>
            [EnumMember(Value = "PARVIS")]
            PARVIS = 28,

            /// <summary>
            /// Enum QUARTIER for value: QUARTIER
            /// </summary>
            [EnumMember(Value = "QUARTIER")]
            QUARTIER = 29,

            /// <summary>
            /// Enum QUAI for value: QUAI
            /// </summary>
            [EnumMember(Value = "QUAI")]
            QUAI = 30,

            /// <summary>
            /// Enum RSIDENCE for value: RÉSIDENCE
            /// </summary>
            [EnumMember(Value = "RÉSIDENCE")]
            RSIDENCE = 31,

            /// <summary>
            /// Enum RUELLE for value: RUELLE
            /// </summary>
            [EnumMember(Value = "RUELLE")]
            RUELLE = 32,

            /// <summary>
            /// Enum ROCADE for value: ROCADE
            /// </summary>
            [EnumMember(Value = "ROCADE")]
            ROCADE = 33,

            /// <summary>
            /// Enum RONDPOINT for value: ROND-POINT
            /// </summary>
            [EnumMember(Value = "ROND-POINT")]
            RONDPOINT = 34,

            /// <summary>
            /// Enum ROUTE for value: ROUTE
            /// </summary>
            [EnumMember(Value = "ROUTE")]
            ROUTE = 35,

            /// <summary>
            /// Enum RUE for value: RUE
            /// </summary>
            [EnumMember(Value = "RUE")]
            RUE = 36,

            /// <summary>
            /// Enum SENTIER for value: SENTIER
            /// </summary>
            [EnumMember(Value = "SENTIER")]
            SENTIER = 37,

            /// <summary>
            /// Enum SQUARE for value: SQUARE
            /// </summary>
            [EnumMember(Value = "SQUARE")]
            SQUARE = 38,

            /// <summary>
            /// Enum TERREPLEIN for value: TERRE-PLEIN
            /// </summary>
            [EnumMember(Value = "TERRE-PLEIN")]
            TERREPLEIN = 39,

            /// <summary>
            /// Enum TRAVERSE for value: TRAVERSE
            /// </summary>
            [EnumMember(Value = "TRAVERSE")]
            TRAVERSE = 40,

            /// <summary>
            /// Enum VILLA for value: VILLA
            /// </summary>
            [EnumMember(Value = "VILLA")]
            VILLA = 41,

            /// <summary>
            /// Enum VILLAGE for value: VILLAGE
            /// </summary>
            [EnumMember(Value = "VILLAGE")]
            VILLAGE = 42,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 43

        }


        /// <summary>
        /// Le type de la voie de localisation est indiquée en abrégé et en majuscules. L&#39;information n&#39;est pas toujours renseignée. Pour certaines petites communes, l&#39;information n&#39;existe pas.     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/typvoie
        /// </summary>
        /// <value>Le type de la voie de localisation est indiquée en abrégé et en majuscules. L&#39;information n&#39;est pas toujours renseignée. Pour certaines petites communes, l&#39;information n&#39;existe pas.     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/typvoie</value>
        [DataMember(Name = "type_voie", IsRequired = true, EmitDefaultValue = true)]
        public TypeVoieEnum TypeVoie { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3InseeSireneEtablissementsSiretAdresseGet200ResponseData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V3InseeSireneEtablissementsSiretAdresseGet200ResponseData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3InseeSireneEtablissementsSiretAdresseGet200ResponseData" /> class.
        /// </summary>
        /// <param name="numeroVoie">numeroVoie (required).</param>
        /// <param name="indiceRepetitionVoie">Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/indrep (required).</param>
        /// <param name="typeVoie">Le type de la voie de localisation est indiquée en abrégé et en majuscules. L&#39;information n&#39;est pas toujours renseignée. Pour certaines petites communes, l&#39;information n&#39;existe pas.     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/typvoie (required).</param>
        /// <param name="libelleVoie">libelleVoie (required).</param>
        /// <param name="complementAdresse">Le complément d&#39;adresse correspond à des éléments situés à l&#39;extérieur du bâtiment qui permettent de compléter l&#39;adresse (résidence, bâtiment, entrée, etc..) (required).</param>
        /// <param name="codeCommune">Le code commune désigne le code de la commune de localisation de l&#39;établissement. Le code renvoyé correspond à la date de l&#39;appel, ce qui implique que toute modification du code commune est repercutée sur l&#39;ensemble des établissements concernés, y compris ceux qui sont fermés. Cette valeur est à &#39;null&#39; pour les entreprises à l&#39;étranger.     Les codes sont listés dans la table d&#39;appartenance géographique fournie par l&#39;Insee et disponible ici: https://www.insee.fr/fr/information/2028028 (required).</param>
        /// <param name="codePostal">codePostal (required).</param>
        /// <param name="distributionSpeciale">La distribution spéciale reprend les éléments particuliers qui accompagnent une adresse de distribution spéciale, la modalité la plus connue étant les adresses en &#39;CEDEX&#39;.     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : * https://www.sirene.fr/sirene/public/variable/distributionSpecialeEtablissement * https://www.sirene.fr/sirene/public/variable/l5-disp (required).</param>
        /// <param name="codeCedex">Plus d&#39;informations : https://fr.wikipedia.org/wiki/Courrier_d%27entreprise_%C3%A0_distribution_exceptionnelle (required).</param>
        /// <param name="libelleCedex">Ce champ indique le libellé correspondant au code cedex de l&#39;établissement. Si le code cedex est à &#39;null&#39;, ce champ est également à &#39;null&#39;. (required).</param>
        /// <param name="libelleCommune">Cette valeur est à &#39;null&#39; pour les établissements à l&#39;étranger. (required).</param>
        /// <param name="libelleCommuneEtranger">Cette valeur est à &#39;null&#39; pour les établissements en France. (required).</param>
        /// <param name="codePaysEtranger">La nomenclature des codes pays se trouve ici: https://www.insee.fr/fr/information/2028273 (required).</param>
        /// <param name="libellePaysEtranger">libellePaysEtranger (required).</param>
        /// <param name="acheminementPostal">acheminementPostal (required).</param>
        public V3InseeSireneEtablissementsSiretAdresseGet200ResponseData(string numeroVoie = default(string), IndiceRepetitionVoieEnum indiceRepetitionVoie = default(IndiceRepetitionVoieEnum), TypeVoieEnum typeVoie = default(TypeVoieEnum), string libelleVoie = default(string), string complementAdresse = default(string), string codeCommune = default(string), string codePostal = default(string), string distributionSpeciale = default(string), string codeCedex = default(string), string libelleCedex = default(string), string libelleCommune = default(string), string libelleCommuneEtranger = default(string), string codePaysEtranger = default(string), string libellePaysEtranger = default(string), LMentsConstitutifsDeLAdressePostalePourSonAcheminement acheminementPostal = default(LMentsConstitutifsDeLAdressePostalePourSonAcheminement))
        {
            // to ensure "numeroVoie" is required (not null)
            if (numeroVoie == null)
            {
                throw new ArgumentNullException("numeroVoie is a required property for V3InseeSireneEtablissementsSiretAdresseGet200ResponseData and cannot be null");
            }
            this.NumeroVoie = numeroVoie;
            this.IndiceRepetitionVoie = indiceRepetitionVoie;
            this.TypeVoie = typeVoie;
            // to ensure "libelleVoie" is required (not null)
            if (libelleVoie == null)
            {
                throw new ArgumentNullException("libelleVoie is a required property for V3InseeSireneEtablissementsSiretAdresseGet200ResponseData and cannot be null");
            }
            this.LibelleVoie = libelleVoie;
            // to ensure "complementAdresse" is required (not null)
            if (complementAdresse == null)
            {
                throw new ArgumentNullException("complementAdresse is a required property for V3InseeSireneEtablissementsSiretAdresseGet200ResponseData and cannot be null");
            }
            this.ComplementAdresse = complementAdresse;
            // to ensure "codeCommune" is required (not null)
            if (codeCommune == null)
            {
                throw new ArgumentNullException("codeCommune is a required property for V3InseeSireneEtablissementsSiretAdresseGet200ResponseData and cannot be null");
            }
            this.CodeCommune = codeCommune;
            // to ensure "codePostal" is required (not null)
            if (codePostal == null)
            {
                throw new ArgumentNullException("codePostal is a required property for V3InseeSireneEtablissementsSiretAdresseGet200ResponseData and cannot be null");
            }
            this.CodePostal = codePostal;
            // to ensure "distributionSpeciale" is required (not null)
            if (distributionSpeciale == null)
            {
                throw new ArgumentNullException("distributionSpeciale is a required property for V3InseeSireneEtablissementsSiretAdresseGet200ResponseData and cannot be null");
            }
            this.DistributionSpeciale = distributionSpeciale;
            // to ensure "codeCedex" is required (not null)
            if (codeCedex == null)
            {
                throw new ArgumentNullException("codeCedex is a required property for V3InseeSireneEtablissementsSiretAdresseGet200ResponseData and cannot be null");
            }
            this.CodeCedex = codeCedex;
            // to ensure "libelleCedex" is required (not null)
            if (libelleCedex == null)
            {
                throw new ArgumentNullException("libelleCedex is a required property for V3InseeSireneEtablissementsSiretAdresseGet200ResponseData and cannot be null");
            }
            this.LibelleCedex = libelleCedex;
            // to ensure "libelleCommune" is required (not null)
            if (libelleCommune == null)
            {
                throw new ArgumentNullException("libelleCommune is a required property for V3InseeSireneEtablissementsSiretAdresseGet200ResponseData and cannot be null");
            }
            this.LibelleCommune = libelleCommune;
            // to ensure "libelleCommuneEtranger" is required (not null)
            if (libelleCommuneEtranger == null)
            {
                throw new ArgumentNullException("libelleCommuneEtranger is a required property for V3InseeSireneEtablissementsSiretAdresseGet200ResponseData and cannot be null");
            }
            this.LibelleCommuneEtranger = libelleCommuneEtranger;
            // to ensure "codePaysEtranger" is required (not null)
            if (codePaysEtranger == null)
            {
                throw new ArgumentNullException("codePaysEtranger is a required property for V3InseeSireneEtablissementsSiretAdresseGet200ResponseData and cannot be null");
            }
            this.CodePaysEtranger = codePaysEtranger;
            // to ensure "libellePaysEtranger" is required (not null)
            if (libellePaysEtranger == null)
            {
                throw new ArgumentNullException("libellePaysEtranger is a required property for V3InseeSireneEtablissementsSiretAdresseGet200ResponseData and cannot be null");
            }
            this.LibellePaysEtranger = libellePaysEtranger;
            // to ensure "acheminementPostal" is required (not null)
            if (acheminementPostal == null)
            {
                throw new ArgumentNullException("acheminementPostal is a required property for V3InseeSireneEtablissementsSiretAdresseGet200ResponseData and cannot be null");
            }
            this.AcheminementPostal = acheminementPostal;
        }

        /// <summary>
        /// Gets or Sets NumeroVoie
        /// </summary>
        [DataMember(Name = "numero_voie", IsRequired = true, EmitDefaultValue = true)]
        public string NumeroVoie { get; set; }

        /// <summary>
        /// Gets or Sets LibelleVoie
        /// </summary>
        [DataMember(Name = "libelle_voie", IsRequired = true, EmitDefaultValue = true)]
        public string LibelleVoie { get; set; }

        /// <summary>
        /// Le complément d&#39;adresse correspond à des éléments situés à l&#39;extérieur du bâtiment qui permettent de compléter l&#39;adresse (résidence, bâtiment, entrée, etc..)
        /// </summary>
        /// <value>Le complément d&#39;adresse correspond à des éléments situés à l&#39;extérieur du bâtiment qui permettent de compléter l&#39;adresse (résidence, bâtiment, entrée, etc..)</value>
        [DataMember(Name = "complement_adresse", IsRequired = true, EmitDefaultValue = true)]
        public string ComplementAdresse { get; set; }

        /// <summary>
        /// Le code commune désigne le code de la commune de localisation de l&#39;établissement. Le code renvoyé correspond à la date de l&#39;appel, ce qui implique que toute modification du code commune est repercutée sur l&#39;ensemble des établissements concernés, y compris ceux qui sont fermés. Cette valeur est à &#39;null&#39; pour les entreprises à l&#39;étranger.     Les codes sont listés dans la table d&#39;appartenance géographique fournie par l&#39;Insee et disponible ici: https://www.insee.fr/fr/information/2028028
        /// </summary>
        /// <value>Le code commune désigne le code de la commune de localisation de l&#39;établissement. Le code renvoyé correspond à la date de l&#39;appel, ce qui implique que toute modification du code commune est repercutée sur l&#39;ensemble des établissements concernés, y compris ceux qui sont fermés. Cette valeur est à &#39;null&#39; pour les entreprises à l&#39;étranger.     Les codes sont listés dans la table d&#39;appartenance géographique fournie par l&#39;Insee et disponible ici: https://www.insee.fr/fr/information/2028028</value>
        [DataMember(Name = "code_commune", IsRequired = true, EmitDefaultValue = true)]
        public string CodeCommune { get; set; }

        /// <summary>
        /// Gets or Sets CodePostal
        /// </summary>
        [DataMember(Name = "code_postal", IsRequired = true, EmitDefaultValue = true)]
        public string CodePostal { get; set; }

        /// <summary>
        /// La distribution spéciale reprend les éléments particuliers qui accompagnent une adresse de distribution spéciale, la modalité la plus connue étant les adresses en &#39;CEDEX&#39;.     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : * https://www.sirene.fr/sirene/public/variable/distributionSpecialeEtablissement * https://www.sirene.fr/sirene/public/variable/l5-disp
        /// </summary>
        /// <value>La distribution spéciale reprend les éléments particuliers qui accompagnent une adresse de distribution spéciale, la modalité la plus connue étant les adresses en &#39;CEDEX&#39;.     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : * https://www.sirene.fr/sirene/public/variable/distributionSpecialeEtablissement * https://www.sirene.fr/sirene/public/variable/l5-disp</value>
        [DataMember(Name = "distribution_speciale", IsRequired = true, EmitDefaultValue = true)]
        public string DistributionSpeciale { get; set; }

        /// <summary>
        /// Plus d&#39;informations : https://fr.wikipedia.org/wiki/Courrier_d%27entreprise_%C3%A0_distribution_exceptionnelle
        /// </summary>
        /// <value>Plus d&#39;informations : https://fr.wikipedia.org/wiki/Courrier_d%27entreprise_%C3%A0_distribution_exceptionnelle</value>
        [DataMember(Name = "code_cedex", IsRequired = true, EmitDefaultValue = true)]
        public string CodeCedex { get; set; }

        /// <summary>
        /// Ce champ indique le libellé correspondant au code cedex de l&#39;établissement. Si le code cedex est à &#39;null&#39;, ce champ est également à &#39;null&#39;.
        /// </summary>
        /// <value>Ce champ indique le libellé correspondant au code cedex de l&#39;établissement. Si le code cedex est à &#39;null&#39;, ce champ est également à &#39;null&#39;.</value>
        [DataMember(Name = "libelle_cedex", IsRequired = true, EmitDefaultValue = true)]
        public string LibelleCedex { get; set; }

        /// <summary>
        /// Cette valeur est à &#39;null&#39; pour les établissements à l&#39;étranger.
        /// </summary>
        /// <value>Cette valeur est à &#39;null&#39; pour les établissements à l&#39;étranger.</value>
        [DataMember(Name = "libelle_commune", IsRequired = true, EmitDefaultValue = true)]
        public string LibelleCommune { get; set; }

        /// <summary>
        /// Cette valeur est à &#39;null&#39; pour les établissements en France.
        /// </summary>
        /// <value>Cette valeur est à &#39;null&#39; pour les établissements en France.</value>
        [DataMember(Name = "libelle_commune_etranger", IsRequired = true, EmitDefaultValue = true)]
        public string LibelleCommuneEtranger { get; set; }

        /// <summary>
        /// La nomenclature des codes pays se trouve ici: https://www.insee.fr/fr/information/2028273
        /// </summary>
        /// <value>La nomenclature des codes pays se trouve ici: https://www.insee.fr/fr/information/2028273</value>
        [DataMember(Name = "code_pays_etranger", IsRequired = true, EmitDefaultValue = true)]
        public string CodePaysEtranger { get; set; }

        /// <summary>
        /// Gets or Sets LibellePaysEtranger
        /// </summary>
        [DataMember(Name = "libelle_pays_etranger", IsRequired = true, EmitDefaultValue = true)]
        public string LibellePaysEtranger { get; set; }

        /// <summary>
        /// Gets or Sets AcheminementPostal
        /// </summary>
        [DataMember(Name = "acheminement_postal", IsRequired = true, EmitDefaultValue = true)]
        public LMentsConstitutifsDeLAdressePostalePourSonAcheminement AcheminementPostal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V3InseeSireneEtablissementsSiretAdresseGet200ResponseData {\n");
            sb.Append("  NumeroVoie: ").Append(NumeroVoie).Append("\n");
            sb.Append("  IndiceRepetitionVoie: ").Append(IndiceRepetitionVoie).Append("\n");
            sb.Append("  TypeVoie: ").Append(TypeVoie).Append("\n");
            sb.Append("  LibelleVoie: ").Append(LibelleVoie).Append("\n");
            sb.Append("  ComplementAdresse: ").Append(ComplementAdresse).Append("\n");
            sb.Append("  CodeCommune: ").Append(CodeCommune).Append("\n");
            sb.Append("  CodePostal: ").Append(CodePostal).Append("\n");
            sb.Append("  DistributionSpeciale: ").Append(DistributionSpeciale).Append("\n");
            sb.Append("  CodeCedex: ").Append(CodeCedex).Append("\n");
            sb.Append("  LibelleCedex: ").Append(LibelleCedex).Append("\n");
            sb.Append("  LibelleCommune: ").Append(LibelleCommune).Append("\n");
            sb.Append("  LibelleCommuneEtranger: ").Append(LibelleCommuneEtranger).Append("\n");
            sb.Append("  CodePaysEtranger: ").Append(CodePaysEtranger).Append("\n");
            sb.Append("  LibellePaysEtranger: ").Append(LibellePaysEtranger).Append("\n");
            sb.Append("  AcheminementPostal: ").Append(AcheminementPostal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V3InseeSireneEtablissementsSiretAdresseGet200ResponseData);
        }

        /// <summary>
        /// Returns true if V3InseeSireneEtablissementsSiretAdresseGet200ResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of V3InseeSireneEtablissementsSiretAdresseGet200ResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V3InseeSireneEtablissementsSiretAdresseGet200ResponseData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NumeroVoie == input.NumeroVoie ||
                    (this.NumeroVoie != null &&
                    this.NumeroVoie.Equals(input.NumeroVoie))
                ) && 
                (
                    this.IndiceRepetitionVoie == input.IndiceRepetitionVoie ||
                    this.IndiceRepetitionVoie.Equals(input.IndiceRepetitionVoie)
                ) && 
                (
                    this.TypeVoie == input.TypeVoie ||
                    this.TypeVoie.Equals(input.TypeVoie)
                ) && 
                (
                    this.LibelleVoie == input.LibelleVoie ||
                    (this.LibelleVoie != null &&
                    this.LibelleVoie.Equals(input.LibelleVoie))
                ) && 
                (
                    this.ComplementAdresse == input.ComplementAdresse ||
                    (this.ComplementAdresse != null &&
                    this.ComplementAdresse.Equals(input.ComplementAdresse))
                ) && 
                (
                    this.CodeCommune == input.CodeCommune ||
                    (this.CodeCommune != null &&
                    this.CodeCommune.Equals(input.CodeCommune))
                ) && 
                (
                    this.CodePostal == input.CodePostal ||
                    (this.CodePostal != null &&
                    this.CodePostal.Equals(input.CodePostal))
                ) && 
                (
                    this.DistributionSpeciale == input.DistributionSpeciale ||
                    (this.DistributionSpeciale != null &&
                    this.DistributionSpeciale.Equals(input.DistributionSpeciale))
                ) && 
                (
                    this.CodeCedex == input.CodeCedex ||
                    (this.CodeCedex != null &&
                    this.CodeCedex.Equals(input.CodeCedex))
                ) && 
                (
                    this.LibelleCedex == input.LibelleCedex ||
                    (this.LibelleCedex != null &&
                    this.LibelleCedex.Equals(input.LibelleCedex))
                ) && 
                (
                    this.LibelleCommune == input.LibelleCommune ||
                    (this.LibelleCommune != null &&
                    this.LibelleCommune.Equals(input.LibelleCommune))
                ) && 
                (
                    this.LibelleCommuneEtranger == input.LibelleCommuneEtranger ||
                    (this.LibelleCommuneEtranger != null &&
                    this.LibelleCommuneEtranger.Equals(input.LibelleCommuneEtranger))
                ) && 
                (
                    this.CodePaysEtranger == input.CodePaysEtranger ||
                    (this.CodePaysEtranger != null &&
                    this.CodePaysEtranger.Equals(input.CodePaysEtranger))
                ) && 
                (
                    this.LibellePaysEtranger == input.LibellePaysEtranger ||
                    (this.LibellePaysEtranger != null &&
                    this.LibellePaysEtranger.Equals(input.LibellePaysEtranger))
                ) && 
                (
                    this.AcheminementPostal == input.AcheminementPostal ||
                    (this.AcheminementPostal != null &&
                    this.AcheminementPostal.Equals(input.AcheminementPostal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NumeroVoie != null)
                {
                    hashCode = (hashCode * 59) + this.NumeroVoie.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IndiceRepetitionVoie.GetHashCode();
                hashCode = (hashCode * 59) + this.TypeVoie.GetHashCode();
                if (this.LibelleVoie != null)
                {
                    hashCode = (hashCode * 59) + this.LibelleVoie.GetHashCode();
                }
                if (this.ComplementAdresse != null)
                {
                    hashCode = (hashCode * 59) + this.ComplementAdresse.GetHashCode();
                }
                if (this.CodeCommune != null)
                {
                    hashCode = (hashCode * 59) + this.CodeCommune.GetHashCode();
                }
                if (this.CodePostal != null)
                {
                    hashCode = (hashCode * 59) + this.CodePostal.GetHashCode();
                }
                if (this.DistributionSpeciale != null)
                {
                    hashCode = (hashCode * 59) + this.DistributionSpeciale.GetHashCode();
                }
                if (this.CodeCedex != null)
                {
                    hashCode = (hashCode * 59) + this.CodeCedex.GetHashCode();
                }
                if (this.LibelleCedex != null)
                {
                    hashCode = (hashCode * 59) + this.LibelleCedex.GetHashCode();
                }
                if (this.LibelleCommune != null)
                {
                    hashCode = (hashCode * 59) + this.LibelleCommune.GetHashCode();
                }
                if (this.LibelleCommuneEtranger != null)
                {
                    hashCode = (hashCode * 59) + this.LibelleCommuneEtranger.GetHashCode();
                }
                if (this.CodePaysEtranger != null)
                {
                    hashCode = (hashCode * 59) + this.CodePaysEtranger.GetHashCode();
                }
                if (this.LibellePaysEtranger != null)
                {
                    hashCode = (hashCode * 59) + this.LibellePaysEtranger.GetHashCode();
                }
                if (this.AcheminementPostal != null)
                {
                    hashCode = (hashCode * 59) + this.AcheminementPostal.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
