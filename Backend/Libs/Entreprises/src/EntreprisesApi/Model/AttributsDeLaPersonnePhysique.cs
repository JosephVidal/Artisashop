/*
 * API Entreprise
 *
 * Cette page contient la documentation technique pour accéder à API Entreprise. Les API étant accessible uniquement sous habilitation, l'interaction avec l'environnement de production n'est possible que si vous êtes **en possession d'une clé d'accès (jeton).  ### Comment tester l'API ?  Il est possible de tester les API via notre environnement de **staging** qui vous retournera systématiquement des données fictives.  Il est nécessaire d'utiliser le jeton de staging indiqué ci-dessous.  - --  *eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1MmE1YmZjMi1jMzUwLTQ4ZjQtYjY5Ni05ZWE3NmRiM2VmMjkiLCJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJzY29wZXMiOlsiY2VydGlmaWNhdF9yZ2VfYWRlbWUiLCJtc2FfY290aXNhdGlvbnMiLCJlbnRyZXByaXNlcyIsImV4dHJhaXRzX3JjcyIsImNlcnRpZmljYXRfb3BxaWJpIiwiYXNzb2NpYXRpb25zIiwiZXRhYmxpc3NlbWVudHMiLCJmbnRwX2NhcnRlX3BybyIsInF1YWxpYmF0IiwiZW50cmVwcmlzZXNfYXJ0aXNhbmFsZXMiLCJjZXJ0aWZpY2F0X2NuZXRwIiwiZW9yaV9kb3VhbmVzIiwicHJvYnRwIiwiYWN0ZXNfaW5waSIsImV4dHJhaXRfY291cnRfaW5waSIsImF0dGVzdGF0aW9uc19zb2NpYWxlcyIsImxpYXNzZV9maXNjYWxlIiwiYXR0ZXN0YXRpb25zX2Zpc2NhbGVzIiwiZXhlcmNpY2VzIiwiY29udmVudGlvbnNfY29sbGVjdGl2ZXMiLCJiaWxhbnNfaW5waSIsImRvY3VtZW50c19hc3NvY2lhdGlvbiIsImNlcnRpZmljYXRfYWdlbmNlX2JpbyIsImJpbGFuc19lbnRyZXByaXNlX2JkZiIsImF0dGVzdGF0aW9uc19hZ2VmaXBoIiwibWVzcmlfaWRlbnRpZmlhbnQiLCJtZXNyaV9pZGVudGl0ZSIsIm1lc3JpX2luc2NyaXB0aW9uX2V0dWRpYW50IiwibWVzcmlfaW5zY3JpcHRpb25fYXV0cmUiLCJtZXNyaV9hZG1pc3Npb24iLCJtZXNyaV9ldGFibGlzc2VtZW50cyIsInBvbGVfZW1wbG9pX2lkZW50aXRlIiwicG9sZV9lbXBsb2lfYWRyZXNzZSIsInBvbGVfZW1wbG9pX2NvbnRhY3QiLCJwb2xlX2VtcGxvaV9pbnNjcmlwdGlvbiIsImNuYWZfcXVvdGllbnRfZmFtaWxpYWwiLCJjbmFmX2FsbG9jYXRhaXJlcyIsImNuYWZfZW5mYW50cyIsImNuYWZfYWRyZXNzZSIsImNub3VzX3N0YXR1dF9ib3Vyc2llciIsInVwdGltZSIsImNub3VzX2VjaGVsb25fYm91cnNlIiwiY25vdXNfZW1haWwiLCJjbm91c19wZXJpb2RlX3ZlcnNlbWVudCIsImNub3VzX3N0YXR1dF9ib3Vyc2UiLCJjbm91c192aWxsZV9ldHVkZXMiLCJjbm91c19pZGVudGl0ZSIsImRnZmlwX2RlY2xhcmFudDFfbm9tIiwiZGdmaXBfZGVjbGFyYW50MV9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50MV9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50MV9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RlY2xhcmFudDJfbm9tIiwiZGdmaXBfZGVjbGFyYW50Ml9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50Ml9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50Ml9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RhdGVfcmVjb3V2cmVtZW50IiwiZGdmaXBfZGF0ZV9ldGFibGlzc2VtZW50IiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX3RheGF0aW9uIiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX2FubmVlIiwiZGdmaXBfbm9tYnJlX3BhcnRzIiwiZGdmaXBfbm9tYnJlX3BlcnNvbm5lc19hX2NoYXJnZSIsImRnZmlwX3NpdHVhdGlvbl9mYW1pbGlhbGUiLCJkZ2ZpcF9yZXZlbnVfYnJ1dF9nbG9iYWwiLCJkZ2ZpcF9yZXZlbnVfaW1wb3NhYmxlIiwiZGdmaXBfaW1wb3RfcmV2ZW51X25ldF9hdmFudF9jb3JyZWN0aW9ucyIsImRnZmlwX21vbnRhbnRfaW1wb3QiLCJkZ2ZpcF9yZXZlbnVfZmlzY2FsX3JlZmVyZW5jZSIsImRnZmlwX2FubmVlX2ltcG90IiwiZGdmaXBfYW5uZWVfcmV2ZW51cyIsImRnZmlwX2VycmV1cl9jb3JyZWN0aWYiLCJkZ2ZpcF9zaXR1YXRpb25fcGFydGllbGxlIl0sInN1YiI6InN0YWdpbmcgZGV2ZWxvcG1lbnQiLCJpYXQiOjE2NjY4NjQwNzQsInZlcnNpb24iOiIxLjAiLCJleHAiOjE5ODI0ODMyNzR9.u2kMWzll3iCTczUOqMQbpS66VfrVzI2lLiyGEPcKAec*       
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@entreprise.api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EntreprisesApi.Client.OpenAPIDateConverter;

namespace EntreprisesApi.Model
{
    /// <summary>
    /// Attributs associés à la personne physique. Les valeurs sont à &#39;null&#39; pour les personnes morales.
    /// </summary>
    [DataContract(Name = "Attributs_de_la_personne_physique")]
    public partial class AttributsDeLaPersonnePhysique : IEquatable<AttributsDeLaPersonnePhysique>, IValidatableObject
    {
        /// <summary>
        /// Caractère féminin ou masculin de la personne physique. Cette valeur peut ne pas être renseignée pour une personne physique.
        /// </summary>
        /// <value>Caractère féminin ou masculin de la personne physique. Cette valeur peut ne pas être renseignée pour une personne physique.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SexeEnum
        {
            /// <summary>
            /// Enum M for value: M
            /// </summary>
            [EnumMember(Value = "M")]
            M = 1,

            /// <summary>
            /// Enum F for value: F
            /// </summary>
            [EnumMember(Value = "F")]
            F = 2,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 3

        }


        /// <summary>
        /// Caractère féminin ou masculin de la personne physique. Cette valeur peut ne pas être renseignée pour une personne physique.
        /// </summary>
        /// <value>Caractère féminin ou masculin de la personne physique. Cette valeur peut ne pas être renseignée pour une personne physique.</value>
        [DataMember(Name = "sexe", IsRequired = true, EmitDefaultValue = true)]
        public SexeEnum Sexe { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttributsDeLaPersonnePhysique" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AttributsDeLaPersonnePhysique() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttributsDeLaPersonnePhysique" /> class.
        /// </summary>
        /// <param name="pseudonyme">Le pseudonyme correspond au nom qu&#39;une personne utilise pour se désigner dans l&#39;exercice de son activité, généralement littéraire ou artistique. (required).</param>
        /// <param name="prenomUsuel">Le prénom usuel est le prénom par lequel une personne choisit de se faire appeler dans la vie courante. Ce prénom fait partie de ceux qui lui ont été donnés à sa naissance et qui sont inscrits à l&#39;état civil. (required).</param>
        /// <param name="prenom1">prenom1 (required).</param>
        /// <param name="prenom2">prenom2 (required).</param>
        /// <param name="prenom3">prenom3 (required).</param>
        /// <param name="prenom4">prenom4 (required).</param>
        /// <param name="nomUsage">Nom que la personne physique a choisi d&#39;utiliser. (required).</param>
        /// <param name="nomNaissance">nomNaissance (required).</param>
        /// <param name="sexe">Caractère féminin ou masculin de la personne physique. Cette valeur peut ne pas être renseignée pour une personne physique. (required).</param>
        public AttributsDeLaPersonnePhysique(string pseudonyme = default(string), string prenomUsuel = default(string), string prenom1 = default(string), string prenom2 = default(string), string prenom3 = default(string), string prenom4 = default(string), string nomUsage = default(string), string nomNaissance = default(string), SexeEnum sexe = default(SexeEnum))
        {
            // to ensure "pseudonyme" is required (not null)
            if (pseudonyme == null)
            {
                throw new ArgumentNullException("pseudonyme is a required property for AttributsDeLaPersonnePhysique and cannot be null");
            }
            this.Pseudonyme = pseudonyme;
            // to ensure "prenomUsuel" is required (not null)
            if (prenomUsuel == null)
            {
                throw new ArgumentNullException("prenomUsuel is a required property for AttributsDeLaPersonnePhysique and cannot be null");
            }
            this.PrenomUsuel = prenomUsuel;
            // to ensure "prenom1" is required (not null)
            if (prenom1 == null)
            {
                throw new ArgumentNullException("prenom1 is a required property for AttributsDeLaPersonnePhysique and cannot be null");
            }
            this.Prenom1 = prenom1;
            // to ensure "prenom2" is required (not null)
            if (prenom2 == null)
            {
                throw new ArgumentNullException("prenom2 is a required property for AttributsDeLaPersonnePhysique and cannot be null");
            }
            this.Prenom2 = prenom2;
            // to ensure "prenom3" is required (not null)
            if (prenom3 == null)
            {
                throw new ArgumentNullException("prenom3 is a required property for AttributsDeLaPersonnePhysique and cannot be null");
            }
            this.Prenom3 = prenom3;
            // to ensure "prenom4" is required (not null)
            if (prenom4 == null)
            {
                throw new ArgumentNullException("prenom4 is a required property for AttributsDeLaPersonnePhysique and cannot be null");
            }
            this.Prenom4 = prenom4;
            // to ensure "nomUsage" is required (not null)
            if (nomUsage == null)
            {
                throw new ArgumentNullException("nomUsage is a required property for AttributsDeLaPersonnePhysique and cannot be null");
            }
            this.NomUsage = nomUsage;
            // to ensure "nomNaissance" is required (not null)
            if (nomNaissance == null)
            {
                throw new ArgumentNullException("nomNaissance is a required property for AttributsDeLaPersonnePhysique and cannot be null");
            }
            this.NomNaissance = nomNaissance;
            this.Sexe = sexe;
        }

        /// <summary>
        /// Le pseudonyme correspond au nom qu&#39;une personne utilise pour se désigner dans l&#39;exercice de son activité, généralement littéraire ou artistique.
        /// </summary>
        /// <value>Le pseudonyme correspond au nom qu&#39;une personne utilise pour se désigner dans l&#39;exercice de son activité, généralement littéraire ou artistique.</value>
        [DataMember(Name = "pseudonyme", IsRequired = true, EmitDefaultValue = true)]
        public string Pseudonyme { get; set; }

        /// <summary>
        /// Le prénom usuel est le prénom par lequel une personne choisit de se faire appeler dans la vie courante. Ce prénom fait partie de ceux qui lui ont été donnés à sa naissance et qui sont inscrits à l&#39;état civil.
        /// </summary>
        /// <value>Le prénom usuel est le prénom par lequel une personne choisit de se faire appeler dans la vie courante. Ce prénom fait partie de ceux qui lui ont été donnés à sa naissance et qui sont inscrits à l&#39;état civil.</value>
        [DataMember(Name = "prenom_usuel", IsRequired = true, EmitDefaultValue = true)]
        public string PrenomUsuel { get; set; }

        /// <summary>
        /// Gets or Sets Prenom1
        /// </summary>
        [DataMember(Name = "prenom_1", IsRequired = true, EmitDefaultValue = true)]
        public string Prenom1 { get; set; }

        /// <summary>
        /// Gets or Sets Prenom2
        /// </summary>
        [DataMember(Name = "prenom_2", IsRequired = true, EmitDefaultValue = true)]
        public string Prenom2 { get; set; }

        /// <summary>
        /// Gets or Sets Prenom3
        /// </summary>
        [DataMember(Name = "prenom_3", IsRequired = true, EmitDefaultValue = true)]
        public string Prenom3 { get; set; }

        /// <summary>
        /// Gets or Sets Prenom4
        /// </summary>
        [DataMember(Name = "prenom_4", IsRequired = true, EmitDefaultValue = true)]
        public string Prenom4 { get; set; }

        /// <summary>
        /// Nom que la personne physique a choisi d&#39;utiliser.
        /// </summary>
        /// <value>Nom que la personne physique a choisi d&#39;utiliser.</value>
        [DataMember(Name = "nom_usage", IsRequired = true, EmitDefaultValue = true)]
        public string NomUsage { get; set; }

        /// <summary>
        /// Gets or Sets NomNaissance
        /// </summary>
        [DataMember(Name = "nom_naissance", IsRequired = true, EmitDefaultValue = true)]
        public string NomNaissance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttributsDeLaPersonnePhysique {\n");
            sb.Append("  Pseudonyme: ").Append(Pseudonyme).Append("\n");
            sb.Append("  PrenomUsuel: ").Append(PrenomUsuel).Append("\n");
            sb.Append("  Prenom1: ").Append(Prenom1).Append("\n");
            sb.Append("  Prenom2: ").Append(Prenom2).Append("\n");
            sb.Append("  Prenom3: ").Append(Prenom3).Append("\n");
            sb.Append("  Prenom4: ").Append(Prenom4).Append("\n");
            sb.Append("  NomUsage: ").Append(NomUsage).Append("\n");
            sb.Append("  NomNaissance: ").Append(NomNaissance).Append("\n");
            sb.Append("  Sexe: ").Append(Sexe).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AttributsDeLaPersonnePhysique);
        }

        /// <summary>
        /// Returns true if AttributsDeLaPersonnePhysique instances are equal
        /// </summary>
        /// <param name="input">Instance of AttributsDeLaPersonnePhysique to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttributsDeLaPersonnePhysique input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Pseudonyme == input.Pseudonyme ||
                    (this.Pseudonyme != null &&
                    this.Pseudonyme.Equals(input.Pseudonyme))
                ) && 
                (
                    this.PrenomUsuel == input.PrenomUsuel ||
                    (this.PrenomUsuel != null &&
                    this.PrenomUsuel.Equals(input.PrenomUsuel))
                ) && 
                (
                    this.Prenom1 == input.Prenom1 ||
                    (this.Prenom1 != null &&
                    this.Prenom1.Equals(input.Prenom1))
                ) && 
                (
                    this.Prenom2 == input.Prenom2 ||
                    (this.Prenom2 != null &&
                    this.Prenom2.Equals(input.Prenom2))
                ) && 
                (
                    this.Prenom3 == input.Prenom3 ||
                    (this.Prenom3 != null &&
                    this.Prenom3.Equals(input.Prenom3))
                ) && 
                (
                    this.Prenom4 == input.Prenom4 ||
                    (this.Prenom4 != null &&
                    this.Prenom4.Equals(input.Prenom4))
                ) && 
                (
                    this.NomUsage == input.NomUsage ||
                    (this.NomUsage != null &&
                    this.NomUsage.Equals(input.NomUsage))
                ) && 
                (
                    this.NomNaissance == input.NomNaissance ||
                    (this.NomNaissance != null &&
                    this.NomNaissance.Equals(input.NomNaissance))
                ) && 
                (
                    this.Sexe == input.Sexe ||
                    this.Sexe.Equals(input.Sexe)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pseudonyme != null)
                {
                    hashCode = (hashCode * 59) + this.Pseudonyme.GetHashCode();
                }
                if (this.PrenomUsuel != null)
                {
                    hashCode = (hashCode * 59) + this.PrenomUsuel.GetHashCode();
                }
                if (this.Prenom1 != null)
                {
                    hashCode = (hashCode * 59) + this.Prenom1.GetHashCode();
                }
                if (this.Prenom2 != null)
                {
                    hashCode = (hashCode * 59) + this.Prenom2.GetHashCode();
                }
                if (this.Prenom3 != null)
                {
                    hashCode = (hashCode * 59) + this.Prenom3.GetHashCode();
                }
                if (this.Prenom4 != null)
                {
                    hashCode = (hashCode * 59) + this.Prenom4.GetHashCode();
                }
                if (this.NomUsage != null)
                {
                    hashCode = (hashCode * 59) + this.NomUsage.GetHashCode();
                }
                if (this.NomNaissance != null)
                {
                    hashCode = (hashCode * 59) + this.NomNaissance.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Sexe.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
