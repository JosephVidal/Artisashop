/*
 * API Entreprise
 *
 * Cette page contient la documentation technique pour accéder à API Entreprise. Les API étant accessible uniquement sous habilitation, l'interaction avec l'environnement de production n'est possible que si vous êtes **en possession d'une clé d'accès (jeton).  ### Comment tester l'API ?  Il est possible de tester les API via notre environnement de **staging** qui vous retournera systématiquement des données fictives.  Il est nécessaire d'utiliser le jeton de staging indiqué ci-dessous.  - --  *eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1MmE1YmZjMi1jMzUwLTQ4ZjQtYjY5Ni05ZWE3NmRiM2VmMjkiLCJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJzY29wZXMiOlsiY2VydGlmaWNhdF9yZ2VfYWRlbWUiLCJtc2FfY290aXNhdGlvbnMiLCJlbnRyZXByaXNlcyIsImV4dHJhaXRzX3JjcyIsImNlcnRpZmljYXRfb3BxaWJpIiwiYXNzb2NpYXRpb25zIiwiZXRhYmxpc3NlbWVudHMiLCJmbnRwX2NhcnRlX3BybyIsInF1YWxpYmF0IiwiZW50cmVwcmlzZXNfYXJ0aXNhbmFsZXMiLCJjZXJ0aWZpY2F0X2NuZXRwIiwiZW9yaV9kb3VhbmVzIiwicHJvYnRwIiwiYWN0ZXNfaW5waSIsImV4dHJhaXRfY291cnRfaW5waSIsImF0dGVzdGF0aW9uc19zb2NpYWxlcyIsImxpYXNzZV9maXNjYWxlIiwiYXR0ZXN0YXRpb25zX2Zpc2NhbGVzIiwiZXhlcmNpY2VzIiwiY29udmVudGlvbnNfY29sbGVjdGl2ZXMiLCJiaWxhbnNfaW5waSIsImRvY3VtZW50c19hc3NvY2lhdGlvbiIsImNlcnRpZmljYXRfYWdlbmNlX2JpbyIsImJpbGFuc19lbnRyZXByaXNlX2JkZiIsImF0dGVzdGF0aW9uc19hZ2VmaXBoIiwibWVzcmlfaWRlbnRpZmlhbnQiLCJtZXNyaV9pZGVudGl0ZSIsIm1lc3JpX2luc2NyaXB0aW9uX2V0dWRpYW50IiwibWVzcmlfaW5zY3JpcHRpb25fYXV0cmUiLCJtZXNyaV9hZG1pc3Npb24iLCJtZXNyaV9ldGFibGlzc2VtZW50cyIsInBvbGVfZW1wbG9pX2lkZW50aXRlIiwicG9sZV9lbXBsb2lfYWRyZXNzZSIsInBvbGVfZW1wbG9pX2NvbnRhY3QiLCJwb2xlX2VtcGxvaV9pbnNjcmlwdGlvbiIsImNuYWZfcXVvdGllbnRfZmFtaWxpYWwiLCJjbmFmX2FsbG9jYXRhaXJlcyIsImNuYWZfZW5mYW50cyIsImNuYWZfYWRyZXNzZSIsImNub3VzX3N0YXR1dF9ib3Vyc2llciIsInVwdGltZSIsImNub3VzX2VjaGVsb25fYm91cnNlIiwiY25vdXNfZW1haWwiLCJjbm91c19wZXJpb2RlX3ZlcnNlbWVudCIsImNub3VzX3N0YXR1dF9ib3Vyc2UiLCJjbm91c192aWxsZV9ldHVkZXMiLCJjbm91c19pZGVudGl0ZSIsImRnZmlwX2RlY2xhcmFudDFfbm9tIiwiZGdmaXBfZGVjbGFyYW50MV9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50MV9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50MV9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RlY2xhcmFudDJfbm9tIiwiZGdmaXBfZGVjbGFyYW50Ml9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50Ml9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50Ml9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RhdGVfcmVjb3V2cmVtZW50IiwiZGdmaXBfZGF0ZV9ldGFibGlzc2VtZW50IiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX3RheGF0aW9uIiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX2FubmVlIiwiZGdmaXBfbm9tYnJlX3BhcnRzIiwiZGdmaXBfbm9tYnJlX3BlcnNvbm5lc19hX2NoYXJnZSIsImRnZmlwX3NpdHVhdGlvbl9mYW1pbGlhbGUiLCJkZ2ZpcF9yZXZlbnVfYnJ1dF9nbG9iYWwiLCJkZ2ZpcF9yZXZlbnVfaW1wb3NhYmxlIiwiZGdmaXBfaW1wb3RfcmV2ZW51X25ldF9hdmFudF9jb3JyZWN0aW9ucyIsImRnZmlwX21vbnRhbnRfaW1wb3QiLCJkZ2ZpcF9yZXZlbnVfZmlzY2FsX3JlZmVyZW5jZSIsImRnZmlwX2FubmVlX2ltcG90IiwiZGdmaXBfYW5uZWVfcmV2ZW51cyIsImRnZmlwX2VycmV1cl9jb3JyZWN0aWYiLCJkZ2ZpcF9zaXR1YXRpb25fcGFydGllbGxlIl0sInN1YiI6InN0YWdpbmcgZGV2ZWxvcG1lbnQiLCJpYXQiOjE2NjY4NjQwNzQsInZlcnNpb24iOiIxLjAiLCJleHAiOjE5ODI0ODMyNzR9.u2kMWzll3iCTczUOqMQbpS66VfrVzI2lLiyGEPcKAec*       
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@entreprise.api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EntreprisesApi.Client.OpenAPIDateConverter;

namespace EntreprisesApi.Model
{
    /// <summary>
    /// Informations sur l&#39;entreprise s&#39;il s&#39;agit d&#39;une personne physique. Les champs sont vides si l&#39;entreprise est une personne morale.
    /// </summary>
    [DataContract(Name = "Personne_physique")]
    public partial class PersonnePhysique : IEquatable<PersonnePhysique>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonnePhysique" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PersonnePhysique() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonnePhysique" /> class.
        /// </summary>
        /// <param name="adresse">adresse (required).</param>
        /// <param name="nationalite">nationalite (required).</param>
        /// <param name="nom">Nom de la personne physique. (required).</param>
        /// <param name="prenom">Prénom de la personne physique. (required).</param>
        /// <param name="naissance">naissance (required).</param>
        public PersonnePhysique(Adresse adresse = default(Adresse), Nationalit nationalite = default(Nationalit), string nom = default(string), string prenom = default(string), Naissance naissance = default(Naissance))
        {
            // to ensure "adresse" is required (not null)
            if (adresse == null)
            {
                throw new ArgumentNullException("adresse is a required property for PersonnePhysique and cannot be null");
            }
            this.Adresse = adresse;
            // to ensure "nationalite" is required (not null)
            if (nationalite == null)
            {
                throw new ArgumentNullException("nationalite is a required property for PersonnePhysique and cannot be null");
            }
            this.Nationalite = nationalite;
            // to ensure "nom" is required (not null)
            if (nom == null)
            {
                throw new ArgumentNullException("nom is a required property for PersonnePhysique and cannot be null");
            }
            this.Nom = nom;
            // to ensure "prenom" is required (not null)
            if (prenom == null)
            {
                throw new ArgumentNullException("prenom is a required property for PersonnePhysique and cannot be null");
            }
            this.Prenom = prenom;
            // to ensure "naissance" is required (not null)
            if (naissance == null)
            {
                throw new ArgumentNullException("naissance is a required property for PersonnePhysique and cannot be null");
            }
            this.Naissance = naissance;
        }

        /// <summary>
        /// Gets or Sets Adresse
        /// </summary>
        [DataMember(Name = "adresse", IsRequired = true, EmitDefaultValue = true)]
        public Adresse Adresse { get; set; }

        /// <summary>
        /// Gets or Sets Nationalite
        /// </summary>
        [DataMember(Name = "nationalite", IsRequired = true, EmitDefaultValue = true)]
        public Nationalit Nationalite { get; set; }

        /// <summary>
        /// Nom de la personne physique.
        /// </summary>
        /// <value>Nom de la personne physique.</value>
        [DataMember(Name = "nom", IsRequired = true, EmitDefaultValue = true)]
        public string Nom { get; set; }

        /// <summary>
        /// Prénom de la personne physique.
        /// </summary>
        /// <value>Prénom de la personne physique.</value>
        [DataMember(Name = "prenom", IsRequired = true, EmitDefaultValue = true)]
        public string Prenom { get; set; }

        /// <summary>
        /// Gets or Sets Naissance
        /// </summary>
        [DataMember(Name = "naissance", IsRequired = true, EmitDefaultValue = true)]
        public Naissance Naissance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PersonnePhysique {\n");
            sb.Append("  Adresse: ").Append(Adresse).Append("\n");
            sb.Append("  Nationalite: ").Append(Nationalite).Append("\n");
            sb.Append("  Nom: ").Append(Nom).Append("\n");
            sb.Append("  Prenom: ").Append(Prenom).Append("\n");
            sb.Append("  Naissance: ").Append(Naissance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PersonnePhysique);
        }

        /// <summary>
        /// Returns true if PersonnePhysique instances are equal
        /// </summary>
        /// <param name="input">Instance of PersonnePhysique to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonnePhysique input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Adresse == input.Adresse ||
                    (this.Adresse != null &&
                    this.Adresse.Equals(input.Adresse))
                ) && 
                (
                    this.Nationalite == input.Nationalite ||
                    (this.Nationalite != null &&
                    this.Nationalite.Equals(input.Nationalite))
                ) && 
                (
                    this.Nom == input.Nom ||
                    (this.Nom != null &&
                    this.Nom.Equals(input.Nom))
                ) && 
                (
                    this.Prenom == input.Prenom ||
                    (this.Prenom != null &&
                    this.Prenom.Equals(input.Prenom))
                ) && 
                (
                    this.Naissance == input.Naissance ||
                    (this.Naissance != null &&
                    this.Naissance.Equals(input.Naissance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Adresse != null)
                {
                    hashCode = (hashCode * 59) + this.Adresse.GetHashCode();
                }
                if (this.Nationalite != null)
                {
                    hashCode = (hashCode * 59) + this.Nationalite.GetHashCode();
                }
                if (this.Nom != null)
                {
                    hashCode = (hashCode * 59) + this.Nom.GetHashCode();
                }
                if (this.Prenom != null)
                {
                    hashCode = (hashCode * 59) + this.Prenom.GetHashCode();
                }
                if (this.Naissance != null)
                {
                    hashCode = (hashCode * 59) + this.Naissance.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
