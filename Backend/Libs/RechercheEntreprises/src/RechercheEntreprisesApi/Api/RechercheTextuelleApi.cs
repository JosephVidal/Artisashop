/*
 * API Recherche d’entreprises
 *
 * # Bienvenue sur la documentation interactive d'API Recherche d’entreprises ! L’API Recherche d’entreprises permet à tout le monde de rechercher et de trouver  une entreprise française par sa dénomination, ou son adresse. ## Données accessibles dans l'API L’API étant totalement ouverte d'accès, elle comporte des limitations. Ainsi ne sont pas accessibles dans l'API : - les prédécesseurs et successeurs d'un établissement - les entreprises non-diffusibles - les entreprises qui se sont vues refuser leurs immatriculation au RCS  **Attention :** cette API ne permet pas d'accèder aux données complètes de  la  base Sirene, mais uniquement de rechercher une entreprise, par sa dénomination ou son adresse. Pour savoir comment obtenir les données complètes, consultez [notre fiche explicative.](https://api.gouv.fr/guides/quelle-api-sirene)  ## Commencer à utiliser l'API L'API est accessible à partir de cette adresse : [https://recherche-entreprises.api.gouv.fr](https://recherche-entreprises.api.gouv.fr)  **Attention :** Vous devez rajouter votre requête sur l’adresse. ## Limite des requêtes    Le serveur accepte un maximum de 7 requêtes par seconde. Au delà, un code 429 est renvoyé indiquant que la volumétrie d'appels a été dépassée.     ## Monitoring de l'API Une supervision du service en temps réel est disponible à cette adresse : [https://stats.uptimerobot.com/kXzwzfk7BE](https://stats.uptimerobot.com/kXzwzfk7BE) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: recherche-entreprises@api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using RechercheEntreprisesApi.Client;
using RechercheEntreprisesApi.Model;

namespace RechercheEntreprisesApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRechercheTextuelleApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Recherche textuelle
        /// </summary>
        /// <remarks>
        /// Cet endpoint permet de récupérer les unités légales correspondantes à la  recherche textuelle effectuée sur la dénomination ou l&#39;adresse.  **Paramètres d&#39;appel :** dénomination de l&#39;entreprise, code postal, code commune, activité  principale et section d&#39;activité principale de l&#39;entreprise, entrepreneur  individuel, tranche d&#39;effectif salarié, nom de dirigeant, prénom(s) de  dirigeant et les valeurs minimale et maximale de la date de naissance de  dirigeant. 
        /// </remarks>
        /// <exception cref="RechercheEntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Termes de la recherche (dénomination et/ou adresse) (optional)</param>
        /// <param name="codePostal">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/codpos&gt;Code postal en 5 chiffres&lt;/a&gt; (optional)</param>
        /// <param name="departement"> (optional)</param>
        /// <param name="codeCommune">&lt;a href&#x3D;https://www.insee.fr/fr/information/2114819&gt;Code commune (INSEE) en 5 caractères&lt;/a&gt; (optional)</param>
        /// <param name="activitePrincipale">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/apet700-rev2&gt;Le code NAF ou code APE, un code d&#39;activité suivant la nomenclature de l&#39;INSEE&lt;/a&gt; (optional)</param>
        /// <param name="sectionActivitePrincipale">&lt;a href&#x3D;https://www.insee.fr/fr/information/2120875&gt;Section de  l&#39;activité principale :&lt;/a&gt;    * &#x60;A&#x60; - Agriculture, sylviculture et pêche   * &#x60;B&#x60; - Industries extractives   * &#x60;C&#x60; - Industrie manufacturière   * &#x60;D&#x60; - Production et distribution d&#39;électricité, de gaz, de vapeur et d&#39;air conditionné   * &#x60;E&#x60; - Production et distribution d&#39;eau ; assainissement, gestion des déchets et dépollution   * &#x60;F&#x60; -  Construction   * &#x60;G&#x60; -  Commerce ; réparation d&#39;automobiles et de motocycles   * &#x60;H&#x60; -  Transports et entreposage   * &#x60;I&#x60; -  Hébergement et restauration   * &#x60;J&#x60; -  Information et communication   * &#x60;K&#x60; -  Activités financières et d&#39;assurance   * &#x60;L&#x60; -  Activités immobilières   * &#x60;M&#x60; -  Activités spécialisées, scientifiques et techniques   * &#x60;N&#x60; -  Activités de services administratifs et de soutien   * &#x60;O&#x60; -  Administration publique   * &#x60;P&#x60; -  Enseignement   * &#x60;Q&#x60; -  Santé humaine et action sociale   * &#x60;R&#x60; -  Arts, spectacles et activités récréatives   * &#x60;S&#x60; -  Autres activités de services   * &#x60;T&#x60; -  Activités des ménages en tant qu&#39;employeurs ; activités indifférenciées des ménages en tant que producteurs de biens et services pour usage propre   * &#x60;U&#x60; -  Activités extra-territoriales  (optional)</param>
        /// <param name="isEntrepreneurIndividuel">Uniquement les entreprises individuelles (optional)</param>
        /// <param name="trancheEffectifSalarie">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/tefen&gt;Tranche d&#39;effectif salarié de l&#39;entreprise&lt;/a&gt; (optional)</param>
        /// <param name="nomDirigeant">Nom du dirigeant (optional)</param>
        /// <param name="prenomsDirigeant">Prenom(s) du dirigeant (optional)</param>
        /// <param name="dateNaissanceDirigeantMin">Valeur minimale de la date de naissance du dirigeant (optional)</param>
        /// <param name="dateNaissanceDirigeantMax">Valeur maximale de la date de naissance du dirigeant (optional)</param>
        /// <param name="page">Le numéro de la page à retourner (optional, default to 1)</param>
        /// <param name="perPage">Le nombre de résultats par page (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchGet200Response</returns>
        SearchGet200Response SearchGet(string? q = default(string?), string? codePostal = default(string?), string? departement = default(string?), string? codeCommune = default(string?), string? activitePrincipale = default(string?), string? sectionActivitePrincipale = default(string?), string? isEntrepreneurIndividuel = default(string?), string? trancheEffectifSalarie = default(string?), string? nomDirigeant = default(string?), string? prenomsDirigeant = default(string?), DateTime? dateNaissanceDirigeantMin = default(DateTime?), DateTime? dateNaissanceDirigeantMax = default(DateTime?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// Recherche textuelle
        /// </summary>
        /// <remarks>
        /// Cet endpoint permet de récupérer les unités légales correspondantes à la  recherche textuelle effectuée sur la dénomination ou l&#39;adresse.  **Paramètres d&#39;appel :** dénomination de l&#39;entreprise, code postal, code commune, activité  principale et section d&#39;activité principale de l&#39;entreprise, entrepreneur  individuel, tranche d&#39;effectif salarié, nom de dirigeant, prénom(s) de  dirigeant et les valeurs minimale et maximale de la date de naissance de  dirigeant. 
        /// </remarks>
        /// <exception cref="RechercheEntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Termes de la recherche (dénomination et/ou adresse) (optional)</param>
        /// <param name="codePostal">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/codpos&gt;Code postal en 5 chiffres&lt;/a&gt; (optional)</param>
        /// <param name="departement"> (optional)</param>
        /// <param name="codeCommune">&lt;a href&#x3D;https://www.insee.fr/fr/information/2114819&gt;Code commune (INSEE) en 5 caractères&lt;/a&gt; (optional)</param>
        /// <param name="activitePrincipale">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/apet700-rev2&gt;Le code NAF ou code APE, un code d&#39;activité suivant la nomenclature de l&#39;INSEE&lt;/a&gt; (optional)</param>
        /// <param name="sectionActivitePrincipale">&lt;a href&#x3D;https://www.insee.fr/fr/information/2120875&gt;Section de  l&#39;activité principale :&lt;/a&gt;    * &#x60;A&#x60; - Agriculture, sylviculture et pêche   * &#x60;B&#x60; - Industries extractives   * &#x60;C&#x60; - Industrie manufacturière   * &#x60;D&#x60; - Production et distribution d&#39;électricité, de gaz, de vapeur et d&#39;air conditionné   * &#x60;E&#x60; - Production et distribution d&#39;eau ; assainissement, gestion des déchets et dépollution   * &#x60;F&#x60; -  Construction   * &#x60;G&#x60; -  Commerce ; réparation d&#39;automobiles et de motocycles   * &#x60;H&#x60; -  Transports et entreposage   * &#x60;I&#x60; -  Hébergement et restauration   * &#x60;J&#x60; -  Information et communication   * &#x60;K&#x60; -  Activités financières et d&#39;assurance   * &#x60;L&#x60; -  Activités immobilières   * &#x60;M&#x60; -  Activités spécialisées, scientifiques et techniques   * &#x60;N&#x60; -  Activités de services administratifs et de soutien   * &#x60;O&#x60; -  Administration publique   * &#x60;P&#x60; -  Enseignement   * &#x60;Q&#x60; -  Santé humaine et action sociale   * &#x60;R&#x60; -  Arts, spectacles et activités récréatives   * &#x60;S&#x60; -  Autres activités de services   * &#x60;T&#x60; -  Activités des ménages en tant qu&#39;employeurs ; activités indifférenciées des ménages en tant que producteurs de biens et services pour usage propre   * &#x60;U&#x60; -  Activités extra-territoriales  (optional)</param>
        /// <param name="isEntrepreneurIndividuel">Uniquement les entreprises individuelles (optional)</param>
        /// <param name="trancheEffectifSalarie">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/tefen&gt;Tranche d&#39;effectif salarié de l&#39;entreprise&lt;/a&gt; (optional)</param>
        /// <param name="nomDirigeant">Nom du dirigeant (optional)</param>
        /// <param name="prenomsDirigeant">Prenom(s) du dirigeant (optional)</param>
        /// <param name="dateNaissanceDirigeantMin">Valeur minimale de la date de naissance du dirigeant (optional)</param>
        /// <param name="dateNaissanceDirigeantMax">Valeur maximale de la date de naissance du dirigeant (optional)</param>
        /// <param name="page">Le numéro de la page à retourner (optional, default to 1)</param>
        /// <param name="perPage">Le nombre de résultats par page (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchGet200Response</returns>
        ApiResponse<SearchGet200Response> SearchGetWithHttpInfo(string? q = default(string?), string? codePostal = default(string?), string? departement = default(string?), string? codeCommune = default(string?), string? activitePrincipale = default(string?), string? sectionActivitePrincipale = default(string?), string? isEntrepreneurIndividuel = default(string?), string? trancheEffectifSalarie = default(string?), string? nomDirigeant = default(string?), string? prenomsDirigeant = default(string?), DateTime? dateNaissanceDirigeantMin = default(DateTime?), DateTime? dateNaissanceDirigeantMax = default(DateTime?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRechercheTextuelleApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Recherche textuelle
        /// </summary>
        /// <remarks>
        /// Cet endpoint permet de récupérer les unités légales correspondantes à la  recherche textuelle effectuée sur la dénomination ou l&#39;adresse.  **Paramètres d&#39;appel :** dénomination de l&#39;entreprise, code postal, code commune, activité  principale et section d&#39;activité principale de l&#39;entreprise, entrepreneur  individuel, tranche d&#39;effectif salarié, nom de dirigeant, prénom(s) de  dirigeant et les valeurs minimale et maximale de la date de naissance de  dirigeant. 
        /// </remarks>
        /// <exception cref="RechercheEntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Termes de la recherche (dénomination et/ou adresse) (optional)</param>
        /// <param name="codePostal">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/codpos&gt;Code postal en 5 chiffres&lt;/a&gt; (optional)</param>
        /// <param name="departement"> (optional)</param>
        /// <param name="codeCommune">&lt;a href&#x3D;https://www.insee.fr/fr/information/2114819&gt;Code commune (INSEE) en 5 caractères&lt;/a&gt; (optional)</param>
        /// <param name="activitePrincipale">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/apet700-rev2&gt;Le code NAF ou code APE, un code d&#39;activité suivant la nomenclature de l&#39;INSEE&lt;/a&gt; (optional)</param>
        /// <param name="sectionActivitePrincipale">&lt;a href&#x3D;https://www.insee.fr/fr/information/2120875&gt;Section de  l&#39;activité principale :&lt;/a&gt;    * &#x60;A&#x60; - Agriculture, sylviculture et pêche   * &#x60;B&#x60; - Industries extractives   * &#x60;C&#x60; - Industrie manufacturière   * &#x60;D&#x60; - Production et distribution d&#39;électricité, de gaz, de vapeur et d&#39;air conditionné   * &#x60;E&#x60; - Production et distribution d&#39;eau ; assainissement, gestion des déchets et dépollution   * &#x60;F&#x60; -  Construction   * &#x60;G&#x60; -  Commerce ; réparation d&#39;automobiles et de motocycles   * &#x60;H&#x60; -  Transports et entreposage   * &#x60;I&#x60; -  Hébergement et restauration   * &#x60;J&#x60; -  Information et communication   * &#x60;K&#x60; -  Activités financières et d&#39;assurance   * &#x60;L&#x60; -  Activités immobilières   * &#x60;M&#x60; -  Activités spécialisées, scientifiques et techniques   * &#x60;N&#x60; -  Activités de services administratifs et de soutien   * &#x60;O&#x60; -  Administration publique   * &#x60;P&#x60; -  Enseignement   * &#x60;Q&#x60; -  Santé humaine et action sociale   * &#x60;R&#x60; -  Arts, spectacles et activités récréatives   * &#x60;S&#x60; -  Autres activités de services   * &#x60;T&#x60; -  Activités des ménages en tant qu&#39;employeurs ; activités indifférenciées des ménages en tant que producteurs de biens et services pour usage propre   * &#x60;U&#x60; -  Activités extra-territoriales  (optional)</param>
        /// <param name="isEntrepreneurIndividuel">Uniquement les entreprises individuelles (optional)</param>
        /// <param name="trancheEffectifSalarie">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/tefen&gt;Tranche d&#39;effectif salarié de l&#39;entreprise&lt;/a&gt; (optional)</param>
        /// <param name="nomDirigeant">Nom du dirigeant (optional)</param>
        /// <param name="prenomsDirigeant">Prenom(s) du dirigeant (optional)</param>
        /// <param name="dateNaissanceDirigeantMin">Valeur minimale de la date de naissance du dirigeant (optional)</param>
        /// <param name="dateNaissanceDirigeantMax">Valeur maximale de la date de naissance du dirigeant (optional)</param>
        /// <param name="page">Le numéro de la page à retourner (optional, default to 1)</param>
        /// <param name="perPage">Le nombre de résultats par page (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchGet200Response</returns>
        System.Threading.Tasks.Task<SearchGet200Response> SearchGetAsync(string? q = default(string?), string? codePostal = default(string?), string? departement = default(string?), string? codeCommune = default(string?), string? activitePrincipale = default(string?), string? sectionActivitePrincipale = default(string?), string? isEntrepreneurIndividuel = default(string?), string? trancheEffectifSalarie = default(string?), string? nomDirigeant = default(string?), string? prenomsDirigeant = default(string?), DateTime? dateNaissanceDirigeantMin = default(DateTime?), DateTime? dateNaissanceDirigeantMax = default(DateTime?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recherche textuelle
        /// </summary>
        /// <remarks>
        /// Cet endpoint permet de récupérer les unités légales correspondantes à la  recherche textuelle effectuée sur la dénomination ou l&#39;adresse.  **Paramètres d&#39;appel :** dénomination de l&#39;entreprise, code postal, code commune, activité  principale et section d&#39;activité principale de l&#39;entreprise, entrepreneur  individuel, tranche d&#39;effectif salarié, nom de dirigeant, prénom(s) de  dirigeant et les valeurs minimale et maximale de la date de naissance de  dirigeant. 
        /// </remarks>
        /// <exception cref="RechercheEntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Termes de la recherche (dénomination et/ou adresse) (optional)</param>
        /// <param name="codePostal">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/codpos&gt;Code postal en 5 chiffres&lt;/a&gt; (optional)</param>
        /// <param name="departement"> (optional)</param>
        /// <param name="codeCommune">&lt;a href&#x3D;https://www.insee.fr/fr/information/2114819&gt;Code commune (INSEE) en 5 caractères&lt;/a&gt; (optional)</param>
        /// <param name="activitePrincipale">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/apet700-rev2&gt;Le code NAF ou code APE, un code d&#39;activité suivant la nomenclature de l&#39;INSEE&lt;/a&gt; (optional)</param>
        /// <param name="sectionActivitePrincipale">&lt;a href&#x3D;https://www.insee.fr/fr/information/2120875&gt;Section de  l&#39;activité principale :&lt;/a&gt;    * &#x60;A&#x60; - Agriculture, sylviculture et pêche   * &#x60;B&#x60; - Industries extractives   * &#x60;C&#x60; - Industrie manufacturière   * &#x60;D&#x60; - Production et distribution d&#39;électricité, de gaz, de vapeur et d&#39;air conditionné   * &#x60;E&#x60; - Production et distribution d&#39;eau ; assainissement, gestion des déchets et dépollution   * &#x60;F&#x60; -  Construction   * &#x60;G&#x60; -  Commerce ; réparation d&#39;automobiles et de motocycles   * &#x60;H&#x60; -  Transports et entreposage   * &#x60;I&#x60; -  Hébergement et restauration   * &#x60;J&#x60; -  Information et communication   * &#x60;K&#x60; -  Activités financières et d&#39;assurance   * &#x60;L&#x60; -  Activités immobilières   * &#x60;M&#x60; -  Activités spécialisées, scientifiques et techniques   * &#x60;N&#x60; -  Activités de services administratifs et de soutien   * &#x60;O&#x60; -  Administration publique   * &#x60;P&#x60; -  Enseignement   * &#x60;Q&#x60; -  Santé humaine et action sociale   * &#x60;R&#x60; -  Arts, spectacles et activités récréatives   * &#x60;S&#x60; -  Autres activités de services   * &#x60;T&#x60; -  Activités des ménages en tant qu&#39;employeurs ; activités indifférenciées des ménages en tant que producteurs de biens et services pour usage propre   * &#x60;U&#x60; -  Activités extra-territoriales  (optional)</param>
        /// <param name="isEntrepreneurIndividuel">Uniquement les entreprises individuelles (optional)</param>
        /// <param name="trancheEffectifSalarie">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/tefen&gt;Tranche d&#39;effectif salarié de l&#39;entreprise&lt;/a&gt; (optional)</param>
        /// <param name="nomDirigeant">Nom du dirigeant (optional)</param>
        /// <param name="prenomsDirigeant">Prenom(s) du dirigeant (optional)</param>
        /// <param name="dateNaissanceDirigeantMin">Valeur minimale de la date de naissance du dirigeant (optional)</param>
        /// <param name="dateNaissanceDirigeantMax">Valeur maximale de la date de naissance du dirigeant (optional)</param>
        /// <param name="page">Le numéro de la page à retourner (optional, default to 1)</param>
        /// <param name="perPage">Le nombre de résultats par page (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchGet200Response>> SearchGetWithHttpInfoAsync(string? q = default(string?), string? codePostal = default(string?), string? departement = default(string?), string? codeCommune = default(string?), string? activitePrincipale = default(string?), string? sectionActivitePrincipale = default(string?), string? isEntrepreneurIndividuel = default(string?), string? trancheEffectifSalarie = default(string?), string? nomDirigeant = default(string?), string? prenomsDirigeant = default(string?), DateTime? dateNaissanceDirigeantMin = default(DateTime?), DateTime? dateNaissanceDirigeantMax = default(DateTime?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRechercheTextuelleApi : IRechercheTextuelleApiSync, IRechercheTextuelleApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RechercheTextuelleApi : IRechercheTextuelleApi
    {
        private RechercheEntreprisesApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RechercheTextuelleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RechercheTextuelleApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RechercheTextuelleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RechercheTextuelleApi(string basePath)
        {
            this.Configuration = RechercheEntreprisesApi.Client.Configuration.MergeConfigurations(
                RechercheEntreprisesApi.Client.GlobalConfiguration.Instance,
                new RechercheEntreprisesApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new RechercheEntreprisesApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RechercheEntreprisesApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = RechercheEntreprisesApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RechercheTextuelleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RechercheTextuelleApi(RechercheEntreprisesApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = RechercheEntreprisesApi.Client.Configuration.MergeConfigurations(
                RechercheEntreprisesApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new RechercheEntreprisesApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new RechercheEntreprisesApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = RechercheEntreprisesApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RechercheTextuelleApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RechercheTextuelleApi(RechercheEntreprisesApi.Client.ISynchronousClient client, RechercheEntreprisesApi.Client.IAsynchronousClient asyncClient, RechercheEntreprisesApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = RechercheEntreprisesApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public RechercheEntreprisesApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public RechercheEntreprisesApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public RechercheEntreprisesApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public RechercheEntreprisesApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Recherche textuelle Cet endpoint permet de récupérer les unités légales correspondantes à la  recherche textuelle effectuée sur la dénomination ou l&#39;adresse.  **Paramètres d&#39;appel :** dénomination de l&#39;entreprise, code postal, code commune, activité  principale et section d&#39;activité principale de l&#39;entreprise, entrepreneur  individuel, tranche d&#39;effectif salarié, nom de dirigeant, prénom(s) de  dirigeant et les valeurs minimale et maximale de la date de naissance de  dirigeant. 
        /// </summary>
        /// <exception cref="RechercheEntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Termes de la recherche (dénomination et/ou adresse) (optional)</param>
        /// <param name="codePostal">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/codpos&gt;Code postal en 5 chiffres&lt;/a&gt; (optional)</param>
        /// <param name="departement"> (optional)</param>
        /// <param name="codeCommune">&lt;a href&#x3D;https://www.insee.fr/fr/information/2114819&gt;Code commune (INSEE) en 5 caractères&lt;/a&gt; (optional)</param>
        /// <param name="activitePrincipale">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/apet700-rev2&gt;Le code NAF ou code APE, un code d&#39;activité suivant la nomenclature de l&#39;INSEE&lt;/a&gt; (optional)</param>
        /// <param name="sectionActivitePrincipale">&lt;a href&#x3D;https://www.insee.fr/fr/information/2120875&gt;Section de  l&#39;activité principale :&lt;/a&gt;    * &#x60;A&#x60; - Agriculture, sylviculture et pêche   * &#x60;B&#x60; - Industries extractives   * &#x60;C&#x60; - Industrie manufacturière   * &#x60;D&#x60; - Production et distribution d&#39;électricité, de gaz, de vapeur et d&#39;air conditionné   * &#x60;E&#x60; - Production et distribution d&#39;eau ; assainissement, gestion des déchets et dépollution   * &#x60;F&#x60; -  Construction   * &#x60;G&#x60; -  Commerce ; réparation d&#39;automobiles et de motocycles   * &#x60;H&#x60; -  Transports et entreposage   * &#x60;I&#x60; -  Hébergement et restauration   * &#x60;J&#x60; -  Information et communication   * &#x60;K&#x60; -  Activités financières et d&#39;assurance   * &#x60;L&#x60; -  Activités immobilières   * &#x60;M&#x60; -  Activités spécialisées, scientifiques et techniques   * &#x60;N&#x60; -  Activités de services administratifs et de soutien   * &#x60;O&#x60; -  Administration publique   * &#x60;P&#x60; -  Enseignement   * &#x60;Q&#x60; -  Santé humaine et action sociale   * &#x60;R&#x60; -  Arts, spectacles et activités récréatives   * &#x60;S&#x60; -  Autres activités de services   * &#x60;T&#x60; -  Activités des ménages en tant qu&#39;employeurs ; activités indifférenciées des ménages en tant que producteurs de biens et services pour usage propre   * &#x60;U&#x60; -  Activités extra-territoriales  (optional)</param>
        /// <param name="isEntrepreneurIndividuel">Uniquement les entreprises individuelles (optional)</param>
        /// <param name="trancheEffectifSalarie">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/tefen&gt;Tranche d&#39;effectif salarié de l&#39;entreprise&lt;/a&gt; (optional)</param>
        /// <param name="nomDirigeant">Nom du dirigeant (optional)</param>
        /// <param name="prenomsDirigeant">Prenom(s) du dirigeant (optional)</param>
        /// <param name="dateNaissanceDirigeantMin">Valeur minimale de la date de naissance du dirigeant (optional)</param>
        /// <param name="dateNaissanceDirigeantMax">Valeur maximale de la date de naissance du dirigeant (optional)</param>
        /// <param name="page">Le numéro de la page à retourner (optional, default to 1)</param>
        /// <param name="perPage">Le nombre de résultats par page (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchGet200Response</returns>
        public SearchGet200Response SearchGet(string? q = default(string?), string? codePostal = default(string?), string? departement = default(string?), string? codeCommune = default(string?), string? activitePrincipale = default(string?), string? sectionActivitePrincipale = default(string?), string? isEntrepreneurIndividuel = default(string?), string? trancheEffectifSalarie = default(string?), string? nomDirigeant = default(string?), string? prenomsDirigeant = default(string?), DateTime? dateNaissanceDirigeantMin = default(DateTime?), DateTime? dateNaissanceDirigeantMax = default(DateTime?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            RechercheEntreprisesApi.Client.ApiResponse<SearchGet200Response> localVarResponse = SearchGetWithHttpInfo(q, codePostal, departement, codeCommune, activitePrincipale, sectionActivitePrincipale, isEntrepreneurIndividuel, trancheEffectifSalarie, nomDirigeant, prenomsDirigeant, dateNaissanceDirigeantMin, dateNaissanceDirigeantMax, page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recherche textuelle Cet endpoint permet de récupérer les unités légales correspondantes à la  recherche textuelle effectuée sur la dénomination ou l&#39;adresse.  **Paramètres d&#39;appel :** dénomination de l&#39;entreprise, code postal, code commune, activité  principale et section d&#39;activité principale de l&#39;entreprise, entrepreneur  individuel, tranche d&#39;effectif salarié, nom de dirigeant, prénom(s) de  dirigeant et les valeurs minimale et maximale de la date de naissance de  dirigeant. 
        /// </summary>
        /// <exception cref="RechercheEntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Termes de la recherche (dénomination et/ou adresse) (optional)</param>
        /// <param name="codePostal">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/codpos&gt;Code postal en 5 chiffres&lt;/a&gt; (optional)</param>
        /// <param name="departement"> (optional)</param>
        /// <param name="codeCommune">&lt;a href&#x3D;https://www.insee.fr/fr/information/2114819&gt;Code commune (INSEE) en 5 caractères&lt;/a&gt; (optional)</param>
        /// <param name="activitePrincipale">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/apet700-rev2&gt;Le code NAF ou code APE, un code d&#39;activité suivant la nomenclature de l&#39;INSEE&lt;/a&gt; (optional)</param>
        /// <param name="sectionActivitePrincipale">&lt;a href&#x3D;https://www.insee.fr/fr/information/2120875&gt;Section de  l&#39;activité principale :&lt;/a&gt;    * &#x60;A&#x60; - Agriculture, sylviculture et pêche   * &#x60;B&#x60; - Industries extractives   * &#x60;C&#x60; - Industrie manufacturière   * &#x60;D&#x60; - Production et distribution d&#39;électricité, de gaz, de vapeur et d&#39;air conditionné   * &#x60;E&#x60; - Production et distribution d&#39;eau ; assainissement, gestion des déchets et dépollution   * &#x60;F&#x60; -  Construction   * &#x60;G&#x60; -  Commerce ; réparation d&#39;automobiles et de motocycles   * &#x60;H&#x60; -  Transports et entreposage   * &#x60;I&#x60; -  Hébergement et restauration   * &#x60;J&#x60; -  Information et communication   * &#x60;K&#x60; -  Activités financières et d&#39;assurance   * &#x60;L&#x60; -  Activités immobilières   * &#x60;M&#x60; -  Activités spécialisées, scientifiques et techniques   * &#x60;N&#x60; -  Activités de services administratifs et de soutien   * &#x60;O&#x60; -  Administration publique   * &#x60;P&#x60; -  Enseignement   * &#x60;Q&#x60; -  Santé humaine et action sociale   * &#x60;R&#x60; -  Arts, spectacles et activités récréatives   * &#x60;S&#x60; -  Autres activités de services   * &#x60;T&#x60; -  Activités des ménages en tant qu&#39;employeurs ; activités indifférenciées des ménages en tant que producteurs de biens et services pour usage propre   * &#x60;U&#x60; -  Activités extra-territoriales  (optional)</param>
        /// <param name="isEntrepreneurIndividuel">Uniquement les entreprises individuelles (optional)</param>
        /// <param name="trancheEffectifSalarie">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/tefen&gt;Tranche d&#39;effectif salarié de l&#39;entreprise&lt;/a&gt; (optional)</param>
        /// <param name="nomDirigeant">Nom du dirigeant (optional)</param>
        /// <param name="prenomsDirigeant">Prenom(s) du dirigeant (optional)</param>
        /// <param name="dateNaissanceDirigeantMin">Valeur minimale de la date de naissance du dirigeant (optional)</param>
        /// <param name="dateNaissanceDirigeantMax">Valeur maximale de la date de naissance du dirigeant (optional)</param>
        /// <param name="page">Le numéro de la page à retourner (optional, default to 1)</param>
        /// <param name="perPage">Le nombre de résultats par page (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchGet200Response</returns>
        public RechercheEntreprisesApi.Client.ApiResponse<SearchGet200Response> SearchGetWithHttpInfo(string? q = default(string?), string? codePostal = default(string?), string? departement = default(string?), string? codeCommune = default(string?), string? activitePrincipale = default(string?), string? sectionActivitePrincipale = default(string?), string? isEntrepreneurIndividuel = default(string?), string? trancheEffectifSalarie = default(string?), string? nomDirigeant = default(string?), string? prenomsDirigeant = default(string?), DateTime? dateNaissanceDirigeantMin = default(DateTime?), DateTime? dateNaissanceDirigeantMax = default(DateTime?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            RechercheEntreprisesApi.Client.RequestOptions localVarRequestOptions = new RechercheEntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RechercheEntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = RechercheEntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (codePostal != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "code_postal", codePostal));
            }
            if (departement != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "departement", departement));
            }
            if (codeCommune != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "code_commune", codeCommune));
            }
            if (activitePrincipale != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "activite_principale", activitePrincipale));
            }
            if (sectionActivitePrincipale != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "section_activite_principale", sectionActivitePrincipale));
            }
            if (isEntrepreneurIndividuel != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "is_entrepreneur_individuel", isEntrepreneurIndividuel));
            }
            if (trancheEffectifSalarie != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "tranche_effectif_salarie", trancheEffectifSalarie));
            }
            if (nomDirigeant != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "nom_dirigeant", nomDirigeant));
            }
            if (prenomsDirigeant != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "prenoms_dirigeant", prenomsDirigeant));
            }
            if (dateNaissanceDirigeantMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "date_naissance_dirigeant_min", dateNaissanceDirigeantMin));
            }
            if (dateNaissanceDirigeantMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "date_naissance_dirigeant_max", dateNaissanceDirigeantMax));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "RechercheTextuelleApi.SearchGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchGet200Response>("/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recherche textuelle Cet endpoint permet de récupérer les unités légales correspondantes à la  recherche textuelle effectuée sur la dénomination ou l&#39;adresse.  **Paramètres d&#39;appel :** dénomination de l&#39;entreprise, code postal, code commune, activité  principale et section d&#39;activité principale de l&#39;entreprise, entrepreneur  individuel, tranche d&#39;effectif salarié, nom de dirigeant, prénom(s) de  dirigeant et les valeurs minimale et maximale de la date de naissance de  dirigeant. 
        /// </summary>
        /// <exception cref="RechercheEntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Termes de la recherche (dénomination et/ou adresse) (optional)</param>
        /// <param name="codePostal">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/codpos&gt;Code postal en 5 chiffres&lt;/a&gt; (optional)</param>
        /// <param name="departement"> (optional)</param>
        /// <param name="codeCommune">&lt;a href&#x3D;https://www.insee.fr/fr/information/2114819&gt;Code commune (INSEE) en 5 caractères&lt;/a&gt; (optional)</param>
        /// <param name="activitePrincipale">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/apet700-rev2&gt;Le code NAF ou code APE, un code d&#39;activité suivant la nomenclature de l&#39;INSEE&lt;/a&gt; (optional)</param>
        /// <param name="sectionActivitePrincipale">&lt;a href&#x3D;https://www.insee.fr/fr/information/2120875&gt;Section de  l&#39;activité principale :&lt;/a&gt;    * &#x60;A&#x60; - Agriculture, sylviculture et pêche   * &#x60;B&#x60; - Industries extractives   * &#x60;C&#x60; - Industrie manufacturière   * &#x60;D&#x60; - Production et distribution d&#39;électricité, de gaz, de vapeur et d&#39;air conditionné   * &#x60;E&#x60; - Production et distribution d&#39;eau ; assainissement, gestion des déchets et dépollution   * &#x60;F&#x60; -  Construction   * &#x60;G&#x60; -  Commerce ; réparation d&#39;automobiles et de motocycles   * &#x60;H&#x60; -  Transports et entreposage   * &#x60;I&#x60; -  Hébergement et restauration   * &#x60;J&#x60; -  Information et communication   * &#x60;K&#x60; -  Activités financières et d&#39;assurance   * &#x60;L&#x60; -  Activités immobilières   * &#x60;M&#x60; -  Activités spécialisées, scientifiques et techniques   * &#x60;N&#x60; -  Activités de services administratifs et de soutien   * &#x60;O&#x60; -  Administration publique   * &#x60;P&#x60; -  Enseignement   * &#x60;Q&#x60; -  Santé humaine et action sociale   * &#x60;R&#x60; -  Arts, spectacles et activités récréatives   * &#x60;S&#x60; -  Autres activités de services   * &#x60;T&#x60; -  Activités des ménages en tant qu&#39;employeurs ; activités indifférenciées des ménages en tant que producteurs de biens et services pour usage propre   * &#x60;U&#x60; -  Activités extra-territoriales  (optional)</param>
        /// <param name="isEntrepreneurIndividuel">Uniquement les entreprises individuelles (optional)</param>
        /// <param name="trancheEffectifSalarie">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/tefen&gt;Tranche d&#39;effectif salarié de l&#39;entreprise&lt;/a&gt; (optional)</param>
        /// <param name="nomDirigeant">Nom du dirigeant (optional)</param>
        /// <param name="prenomsDirigeant">Prenom(s) du dirigeant (optional)</param>
        /// <param name="dateNaissanceDirigeantMin">Valeur minimale de la date de naissance du dirigeant (optional)</param>
        /// <param name="dateNaissanceDirigeantMax">Valeur maximale de la date de naissance du dirigeant (optional)</param>
        /// <param name="page">Le numéro de la page à retourner (optional, default to 1)</param>
        /// <param name="perPage">Le nombre de résultats par page (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchGet200Response</returns>
        public async System.Threading.Tasks.Task<SearchGet200Response> SearchGetAsync(string? q = default(string?), string? codePostal = default(string?), string? departement = default(string?), string? codeCommune = default(string?), string? activitePrincipale = default(string?), string? sectionActivitePrincipale = default(string?), string? isEntrepreneurIndividuel = default(string?), string? trancheEffectifSalarie = default(string?), string? nomDirigeant = default(string?), string? prenomsDirigeant = default(string?), DateTime? dateNaissanceDirigeantMin = default(DateTime?), DateTime? dateNaissanceDirigeantMax = default(DateTime?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            RechercheEntreprisesApi.Client.ApiResponse<SearchGet200Response> localVarResponse = await SearchGetWithHttpInfoAsync(q, codePostal, departement, codeCommune, activitePrincipale, sectionActivitePrincipale, isEntrepreneurIndividuel, trancheEffectifSalarie, nomDirigeant, prenomsDirigeant, dateNaissanceDirigeantMin, dateNaissanceDirigeantMax, page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recherche textuelle Cet endpoint permet de récupérer les unités légales correspondantes à la  recherche textuelle effectuée sur la dénomination ou l&#39;adresse.  **Paramètres d&#39;appel :** dénomination de l&#39;entreprise, code postal, code commune, activité  principale et section d&#39;activité principale de l&#39;entreprise, entrepreneur  individuel, tranche d&#39;effectif salarié, nom de dirigeant, prénom(s) de  dirigeant et les valeurs minimale et maximale de la date de naissance de  dirigeant. 
        /// </summary>
        /// <exception cref="RechercheEntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Termes de la recherche (dénomination et/ou adresse) (optional)</param>
        /// <param name="codePostal">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/codpos&gt;Code postal en 5 chiffres&lt;/a&gt; (optional)</param>
        /// <param name="departement"> (optional)</param>
        /// <param name="codeCommune">&lt;a href&#x3D;https://www.insee.fr/fr/information/2114819&gt;Code commune (INSEE) en 5 caractères&lt;/a&gt; (optional)</param>
        /// <param name="activitePrincipale">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/apet700-rev2&gt;Le code NAF ou code APE, un code d&#39;activité suivant la nomenclature de l&#39;INSEE&lt;/a&gt; (optional)</param>
        /// <param name="sectionActivitePrincipale">&lt;a href&#x3D;https://www.insee.fr/fr/information/2120875&gt;Section de  l&#39;activité principale :&lt;/a&gt;    * &#x60;A&#x60; - Agriculture, sylviculture et pêche   * &#x60;B&#x60; - Industries extractives   * &#x60;C&#x60; - Industrie manufacturière   * &#x60;D&#x60; - Production et distribution d&#39;électricité, de gaz, de vapeur et d&#39;air conditionné   * &#x60;E&#x60; - Production et distribution d&#39;eau ; assainissement, gestion des déchets et dépollution   * &#x60;F&#x60; -  Construction   * &#x60;G&#x60; -  Commerce ; réparation d&#39;automobiles et de motocycles   * &#x60;H&#x60; -  Transports et entreposage   * &#x60;I&#x60; -  Hébergement et restauration   * &#x60;J&#x60; -  Information et communication   * &#x60;K&#x60; -  Activités financières et d&#39;assurance   * &#x60;L&#x60; -  Activités immobilières   * &#x60;M&#x60; -  Activités spécialisées, scientifiques et techniques   * &#x60;N&#x60; -  Activités de services administratifs et de soutien   * &#x60;O&#x60; -  Administration publique   * &#x60;P&#x60; -  Enseignement   * &#x60;Q&#x60; -  Santé humaine et action sociale   * &#x60;R&#x60; -  Arts, spectacles et activités récréatives   * &#x60;S&#x60; -  Autres activités de services   * &#x60;T&#x60; -  Activités des ménages en tant qu&#39;employeurs ; activités indifférenciées des ménages en tant que producteurs de biens et services pour usage propre   * &#x60;U&#x60; -  Activités extra-territoriales  (optional)</param>
        /// <param name="isEntrepreneurIndividuel">Uniquement les entreprises individuelles (optional)</param>
        /// <param name="trancheEffectifSalarie">&lt;a href&#x3D;https://www.sirene.fr/sirene/public/variable/tefen&gt;Tranche d&#39;effectif salarié de l&#39;entreprise&lt;/a&gt; (optional)</param>
        /// <param name="nomDirigeant">Nom du dirigeant (optional)</param>
        /// <param name="prenomsDirigeant">Prenom(s) du dirigeant (optional)</param>
        /// <param name="dateNaissanceDirigeantMin">Valeur minimale de la date de naissance du dirigeant (optional)</param>
        /// <param name="dateNaissanceDirigeantMax">Valeur maximale de la date de naissance du dirigeant (optional)</param>
        /// <param name="page">Le numéro de la page à retourner (optional, default to 1)</param>
        /// <param name="perPage">Le nombre de résultats par page (optional, default to 1)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchGet200Response)</returns>
        public async System.Threading.Tasks.Task<RechercheEntreprisesApi.Client.ApiResponse<SearchGet200Response>> SearchGetWithHttpInfoAsync(string? q = default(string?), string? codePostal = default(string?), string? departement = default(string?), string? codeCommune = default(string?), string? activitePrincipale = default(string?), string? sectionActivitePrincipale = default(string?), string? isEntrepreneurIndividuel = default(string?), string? trancheEffectifSalarie = default(string?), string? nomDirigeant = default(string?), string? prenomsDirigeant = default(string?), DateTime? dateNaissanceDirigeantMin = default(DateTime?), DateTime? dateNaissanceDirigeantMax = default(DateTime?), int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RechercheEntreprisesApi.Client.RequestOptions localVarRequestOptions = new RechercheEntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = RechercheEntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = RechercheEntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (codePostal != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "code_postal", codePostal));
            }
            if (departement != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "departement", departement));
            }
            if (codeCommune != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "code_commune", codeCommune));
            }
            if (activitePrincipale != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "activite_principale", activitePrincipale));
            }
            if (sectionActivitePrincipale != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "section_activite_principale", sectionActivitePrincipale));
            }
            if (isEntrepreneurIndividuel != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "is_entrepreneur_individuel", isEntrepreneurIndividuel));
            }
            if (trancheEffectifSalarie != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "tranche_effectif_salarie", trancheEffectifSalarie));
            }
            if (nomDirigeant != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "nom_dirigeant", nomDirigeant));
            }
            if (prenomsDirigeant != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "prenoms_dirigeant", prenomsDirigeant));
            }
            if (dateNaissanceDirigeantMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "date_naissance_dirigeant_min", dateNaissanceDirigeantMin));
            }
            if (dateNaissanceDirigeantMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "date_naissance_dirigeant_max", dateNaissanceDirigeantMax));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(RechercheEntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "RechercheTextuelleApi.SearchGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchGet200Response>("/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
