/*
 * API Recherche d’entreprises
 *
 * # Bienvenue sur la documentation interactive d'API Recherche d’entreprises ! L’API Recherche d’entreprises permet à tout le monde de rechercher et de trouver  une entreprise française par sa dénomination, ou son adresse. ## Données accessibles dans l'API L’API étant totalement ouverte d'accès, elle comporte des limitations. Ainsi ne sont pas accessibles dans l'API : - les prédécesseurs et successeurs d'un établissement - les entreprises non-diffusibles - les entreprises qui se sont vues refuser leurs immatriculation au RCS  **Attention :** cette API ne permet pas d'accèder aux données complètes de  la  base Sirene, mais uniquement de rechercher une entreprise, par sa dénomination ou son adresse. Pour savoir comment obtenir les données complètes, consultez [notre fiche explicative.](https://api.gouv.fr/guides/quelle-api-sirene)  ## Commencer à utiliser l'API L'API est accessible à partir de cette adresse : [https://recherche-entreprises.api.gouv.fr](https://recherche-entreprises.api.gouv.fr)  **Attention :** Vous devez rajouter votre requête sur l’adresse. ## Limite des requêtes    Le serveur accepte un maximum de 7 requêtes par seconde. Au delà, un code 429 est renvoyé indiquant que la volumétrie d'appels a été dépassée.     ## Monitoring de l'API Une supervision du service en temps réel est disponible à cette adresse : [https://stats.uptimerobot.com/kXzwzfk7BE](https://stats.uptimerobot.com/kXzwzfk7BE) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: recherche-entreprises@api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = RechercheEntreprisesApi.Client.OpenAPIDateConverter;

namespace RechercheEntreprisesApi.Model
{
    /// <summary>
    /// SearchGet200ResponseResultsInner
    /// </summary>
    [DataContract(Name = "_search_get_200_response_results_inner")]
    public partial class SearchGet200ResponseResultsInner : IEquatable<SearchGet200ResponseResultsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchGet200ResponseResultsInner" /> class.
        /// </summary>
        /// <param name="siren">le numéro unique de l&#39;entreprise.</param>
        /// <param name="siege">siege.</param>
        /// <param name="dateCreation">dateCreation.</param>
        /// <param name="trancheEffectifSalarie">trancheEffectifSalarie.</param>
        /// <param name="dateMiseAJour">dateMiseAJour.</param>
        /// <param name="categorieEntreprise">categorieEntreprise.</param>
        /// <param name="etatAdministratif">etatAdministratif.</param>
        /// <param name="nomRaisonSociale">nomRaisonSociale.</param>
        /// <param name="natureJuridique">natureJuridique.</param>
        /// <param name="activitePrincipale">activitePrincipale.</param>
        /// <param name="sectionActivitePrincipale">sectionActivitePrincipale.</param>
        /// <param name="economieSocialeSolidaire">economieSocialeSolidaire.</param>
        /// <param name="nomComplet">nomComplet.</param>
        /// <param name="nombreEtablissements">nombreEtablissements.</param>
        /// <param name="nombreEtablissementsOuverts">nombreEtablissementsOuverts.</param>
        /// <param name="isEntrepreneurIndividuel">Entreprises individuelles.</param>
        /// <param name="dirigeants">dirigeants.</param>
        public SearchGet200ResponseResultsInner(string siren = default(string), SearchGet200ResponseResultsInnerSiege siege = default(SearchGet200ResponseResultsInnerSiege), DateTime dateCreation = default(DateTime), string trancheEffectifSalarie = default(string), DateTime dateMiseAJour = default(DateTime), string categorieEntreprise = default(string), string etatAdministratif = default(string), string nomRaisonSociale = default(string), string natureJuridique = default(string), string activitePrincipale = default(string), string sectionActivitePrincipale = default(string), string economieSocialeSolidaire = default(string), string nomComplet = default(string), int nombreEtablissements = default(int), int nombreEtablissementsOuverts = default(int), bool isEntrepreneurIndividuel = default(bool), List<SearchGet200ResponseResultsInnerDirigeantsInner> dirigeants = default(List<SearchGet200ResponseResultsInnerDirigeantsInner>))
        {
            this.Siren = siren;
            this.Siege = siege;
            this.DateCreation = dateCreation;
            this.TrancheEffectifSalarie = trancheEffectifSalarie;
            this.DateMiseAJour = dateMiseAJour;
            this.CategorieEntreprise = categorieEntreprise;
            this.EtatAdministratif = etatAdministratif;
            this.NomRaisonSociale = nomRaisonSociale;
            this.NatureJuridique = natureJuridique;
            this.ActivitePrincipale = activitePrincipale;
            this.SectionActivitePrincipale = sectionActivitePrincipale;
            this.EconomieSocialeSolidaire = economieSocialeSolidaire;
            this.NomComplet = nomComplet;
            this.NombreEtablissements = nombreEtablissements;
            this.NombreEtablissementsOuverts = nombreEtablissementsOuverts;
            this.IsEntrepreneurIndividuel = isEntrepreneurIndividuel;
            this.Dirigeants = dirigeants;
        }

        /// <summary>
        /// le numéro unique de l&#39;entreprise
        /// </summary>
        /// <value>le numéro unique de l&#39;entreprise</value>
        [DataMember(Name = "siren", EmitDefaultValue = false)]
        public string Siren { get; set; }

        /// <summary>
        /// Gets or Sets Siege
        /// </summary>
        [DataMember(Name = "siege", EmitDefaultValue = false)]
        public SearchGet200ResponseResultsInnerSiege Siege { get; set; }

        /// <summary>
        /// Gets or Sets DateCreation
        /// </summary>
        [DataMember(Name = "date_creation", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateCreation { get; set; }

        /// <summary>
        /// Gets or Sets TrancheEffectifSalarie
        /// </summary>
        [DataMember(Name = "tranche_effectif_salarie", EmitDefaultValue = false)]
        public string TrancheEffectifSalarie { get; set; }

        /// <summary>
        /// Gets or Sets DateMiseAJour
        /// </summary>
        [DataMember(Name = "date_mise_a_jour", EmitDefaultValue = false)]
        public DateTime DateMiseAJour { get; set; }

        /// <summary>
        /// Gets or Sets CategorieEntreprise
        /// </summary>
        [DataMember(Name = "categorie_entreprise", EmitDefaultValue = false)]
        public string CategorieEntreprise { get; set; }

        /// <summary>
        /// Gets or Sets EtatAdministratif
        /// </summary>
        [DataMember(Name = "etat_administratif", EmitDefaultValue = false)]
        public string EtatAdministratif { get; set; }

        /// <summary>
        /// Gets or Sets NomRaisonSociale
        /// </summary>
        [DataMember(Name = "nom_raison_sociale", EmitDefaultValue = false)]
        public string NomRaisonSociale { get; set; }

        /// <summary>
        /// Gets or Sets NatureJuridique
        /// </summary>
        [DataMember(Name = "nature_juridique", EmitDefaultValue = false)]
        public string NatureJuridique { get; set; }

        /// <summary>
        /// Gets or Sets ActivitePrincipale
        /// </summary>
        [DataMember(Name = "activite_principale", EmitDefaultValue = false)]
        public string ActivitePrincipale { get; set; }

        /// <summary>
        /// Gets or Sets SectionActivitePrincipale
        /// </summary>
        [DataMember(Name = "section_activite_principale", EmitDefaultValue = false)]
        public string SectionActivitePrincipale { get; set; }

        /// <summary>
        /// Gets or Sets EconomieSocialeSolidaire
        /// </summary>
        [DataMember(Name = "economie_sociale_solidaire", EmitDefaultValue = false)]
        public string EconomieSocialeSolidaire { get; set; }

        /// <summary>
        /// Gets or Sets NomComplet
        /// </summary>
        [DataMember(Name = "nom_complet", EmitDefaultValue = false)]
        public string NomComplet { get; set; }

        /// <summary>
        /// Gets or Sets NombreEtablissements
        /// </summary>
        [DataMember(Name = "nombre_etablissements", EmitDefaultValue = false)]
        public int NombreEtablissements { get; set; }

        /// <summary>
        /// Gets or Sets NombreEtablissementsOuverts
        /// </summary>
        [DataMember(Name = "nombre_etablissements_ouverts", EmitDefaultValue = false)]
        public int NombreEtablissementsOuverts { get; set; }

        /// <summary>
        /// Entreprises individuelles
        /// </summary>
        /// <value>Entreprises individuelles</value>
        [DataMember(Name = "is_entrepreneur_individuel", EmitDefaultValue = true)]
        public bool IsEntrepreneurIndividuel { get; set; }

        /// <summary>
        /// Gets or Sets Dirigeants
        /// </summary>
        [DataMember(Name = "dirigeants", EmitDefaultValue = false)]
        public List<SearchGet200ResponseResultsInnerDirigeantsInner> Dirigeants { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchGet200ResponseResultsInner {\n");
            sb.Append("  Siren: ").Append(Siren).Append("\n");
            sb.Append("  Siege: ").Append(Siege).Append("\n");
            sb.Append("  DateCreation: ").Append(DateCreation).Append("\n");
            sb.Append("  TrancheEffectifSalarie: ").Append(TrancheEffectifSalarie).Append("\n");
            sb.Append("  DateMiseAJour: ").Append(DateMiseAJour).Append("\n");
            sb.Append("  CategorieEntreprise: ").Append(CategorieEntreprise).Append("\n");
            sb.Append("  EtatAdministratif: ").Append(EtatAdministratif).Append("\n");
            sb.Append("  NomRaisonSociale: ").Append(NomRaisonSociale).Append("\n");
            sb.Append("  NatureJuridique: ").Append(NatureJuridique).Append("\n");
            sb.Append("  ActivitePrincipale: ").Append(ActivitePrincipale).Append("\n");
            sb.Append("  SectionActivitePrincipale: ").Append(SectionActivitePrincipale).Append("\n");
            sb.Append("  EconomieSocialeSolidaire: ").Append(EconomieSocialeSolidaire).Append("\n");
            sb.Append("  NomComplet: ").Append(NomComplet).Append("\n");
            sb.Append("  NombreEtablissements: ").Append(NombreEtablissements).Append("\n");
            sb.Append("  NombreEtablissementsOuverts: ").Append(NombreEtablissementsOuverts).Append("\n");
            sb.Append("  IsEntrepreneurIndividuel: ").Append(IsEntrepreneurIndividuel).Append("\n");
            sb.Append("  Dirigeants: ").Append(Dirigeants).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchGet200ResponseResultsInner);
        }

        /// <summary>
        /// Returns true if SearchGet200ResponseResultsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchGet200ResponseResultsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchGet200ResponseResultsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Siren == input.Siren ||
                    (this.Siren != null &&
                    this.Siren.Equals(input.Siren))
                ) && 
                (
                    this.Siege == input.Siege ||
                    (this.Siege != null &&
                    this.Siege.Equals(input.Siege))
                ) && 
                (
                    this.DateCreation == input.DateCreation ||
                    (this.DateCreation != null &&
                    this.DateCreation.Equals(input.DateCreation))
                ) && 
                (
                    this.TrancheEffectifSalarie == input.TrancheEffectifSalarie ||
                    (this.TrancheEffectifSalarie != null &&
                    this.TrancheEffectifSalarie.Equals(input.TrancheEffectifSalarie))
                ) && 
                (
                    this.DateMiseAJour == input.DateMiseAJour ||
                    (this.DateMiseAJour != null &&
                    this.DateMiseAJour.Equals(input.DateMiseAJour))
                ) && 
                (
                    this.CategorieEntreprise == input.CategorieEntreprise ||
                    (this.CategorieEntreprise != null &&
                    this.CategorieEntreprise.Equals(input.CategorieEntreprise))
                ) && 
                (
                    this.EtatAdministratif == input.EtatAdministratif ||
                    (this.EtatAdministratif != null &&
                    this.EtatAdministratif.Equals(input.EtatAdministratif))
                ) && 
                (
                    this.NomRaisonSociale == input.NomRaisonSociale ||
                    (this.NomRaisonSociale != null &&
                    this.NomRaisonSociale.Equals(input.NomRaisonSociale))
                ) && 
                (
                    this.NatureJuridique == input.NatureJuridique ||
                    (this.NatureJuridique != null &&
                    this.NatureJuridique.Equals(input.NatureJuridique))
                ) && 
                (
                    this.ActivitePrincipale == input.ActivitePrincipale ||
                    (this.ActivitePrincipale != null &&
                    this.ActivitePrincipale.Equals(input.ActivitePrincipale))
                ) && 
                (
                    this.SectionActivitePrincipale == input.SectionActivitePrincipale ||
                    (this.SectionActivitePrincipale != null &&
                    this.SectionActivitePrincipale.Equals(input.SectionActivitePrincipale))
                ) && 
                (
                    this.EconomieSocialeSolidaire == input.EconomieSocialeSolidaire ||
                    (this.EconomieSocialeSolidaire != null &&
                    this.EconomieSocialeSolidaire.Equals(input.EconomieSocialeSolidaire))
                ) && 
                (
                    this.NomComplet == input.NomComplet ||
                    (this.NomComplet != null &&
                    this.NomComplet.Equals(input.NomComplet))
                ) && 
                (
                    this.NombreEtablissements == input.NombreEtablissements ||
                    this.NombreEtablissements.Equals(input.NombreEtablissements)
                ) && 
                (
                    this.NombreEtablissementsOuverts == input.NombreEtablissementsOuverts ||
                    this.NombreEtablissementsOuverts.Equals(input.NombreEtablissementsOuverts)
                ) && 
                (
                    this.IsEntrepreneurIndividuel == input.IsEntrepreneurIndividuel ||
                    this.IsEntrepreneurIndividuel.Equals(input.IsEntrepreneurIndividuel)
                ) && 
                (
                    this.Dirigeants == input.Dirigeants ||
                    this.Dirigeants != null &&
                    input.Dirigeants != null &&
                    this.Dirigeants.SequenceEqual(input.Dirigeants)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Siren != null)
                {
                    hashCode = (hashCode * 59) + this.Siren.GetHashCode();
                }
                if (this.Siege != null)
                {
                    hashCode = (hashCode * 59) + this.Siege.GetHashCode();
                }
                if (this.DateCreation != null)
                {
                    hashCode = (hashCode * 59) + this.DateCreation.GetHashCode();
                }
                if (this.TrancheEffectifSalarie != null)
                {
                    hashCode = (hashCode * 59) + this.TrancheEffectifSalarie.GetHashCode();
                }
                if (this.DateMiseAJour != null)
                {
                    hashCode = (hashCode * 59) + this.DateMiseAJour.GetHashCode();
                }
                if (this.CategorieEntreprise != null)
                {
                    hashCode = (hashCode * 59) + this.CategorieEntreprise.GetHashCode();
                }
                if (this.EtatAdministratif != null)
                {
                    hashCode = (hashCode * 59) + this.EtatAdministratif.GetHashCode();
                }
                if (this.NomRaisonSociale != null)
                {
                    hashCode = (hashCode * 59) + this.NomRaisonSociale.GetHashCode();
                }
                if (this.NatureJuridique != null)
                {
                    hashCode = (hashCode * 59) + this.NatureJuridique.GetHashCode();
                }
                if (this.ActivitePrincipale != null)
                {
                    hashCode = (hashCode * 59) + this.ActivitePrincipale.GetHashCode();
                }
                if (this.SectionActivitePrincipale != null)
                {
                    hashCode = (hashCode * 59) + this.SectionActivitePrincipale.GetHashCode();
                }
                if (this.EconomieSocialeSolidaire != null)
                {
                    hashCode = (hashCode * 59) + this.EconomieSocialeSolidaire.GetHashCode();
                }
                if (this.NomComplet != null)
                {
                    hashCode = (hashCode * 59) + this.NomComplet.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NombreEtablissements.GetHashCode();
                hashCode = (hashCode * 59) + this.NombreEtablissementsOuverts.GetHashCode();
                hashCode = (hashCode * 59) + this.IsEntrepreneurIndividuel.GetHashCode();
                if (this.Dirigeants != null)
                {
                    hashCode = (hashCode * 59) + this.Dirigeants.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
