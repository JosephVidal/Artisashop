/*
 * API Recherche d’entreprises
 *
 * # Bienvenue sur la documentation interactive d'API Recherche d’entreprises ! L’API Recherche d’entreprises permet à tout le monde de rechercher et de trouver  une entreprise française par sa dénomination, ou son adresse. ## Données accessibles dans l'API L’API étant totalement ouverte d'accès, elle comporte des limitations. Ainsi ne sont pas accessibles dans l'API : - les prédécesseurs et successeurs d'un établissement - les entreprises non-diffusibles - les entreprises qui se sont vues refuser leurs immatriculation au RCS  **Attention :** cette API ne permet pas d'accèder aux données complètes de  la  base Sirene, mais uniquement de rechercher une entreprise, par sa dénomination ou son adresse. Pour savoir comment obtenir les données complètes, consultez [notre fiche explicative.](https://api.gouv.fr/guides/quelle-api-sirene)  ## Commencer à utiliser l'API L'API est accessible à partir de cette adresse : [https://recherche-entreprises.api.gouv.fr](https://recherche-entreprises.api.gouv.fr)  **Attention :** Vous devez rajouter votre requête sur l’adresse. ## Limite des requêtes    Le serveur accepte un maximum de 7 requêtes par seconde. Au delà, un code 429 est renvoyé indiquant que la volumétrie d'appels a été dépassée.     ## Monitoring de l'API Une supervision du service en temps réel est disponible à cette adresse : [https://stats.uptimerobot.com/kXzwzfk7BE](https://stats.uptimerobot.com/kXzwzfk7BE) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: recherche-entreprises@api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = RechercheEntreprisesApi.Client.OpenAPIDateConverter;
using System.Reflection;

namespace RechercheEntreprisesApi.Model
{
    /// <summary>
    /// SearchGet200ResponseResultsInnerDirigeantsInner
    /// </summary>
    [JsonConverter(typeof(SearchGet200ResponseResultsInnerDirigeantsInnerJsonConverter))]
    [DataContract(Name = "_search_get_200_response_results_inner_dirigeants_inner")]
    public partial class SearchGet200ResponseResultsInnerDirigeantsInner : AbstractOpenAPISchema, IEquatable<SearchGet200ResponseResultsInnerDirigeantsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchGet200ResponseResultsInnerDirigeantsInner" /> class
        /// with the <see cref="DirigeantPp" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DirigeantPp.</param>
        public SearchGet200ResponseResultsInnerDirigeantsInner(DirigeantPp actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchGet200ResponseResultsInnerDirigeantsInner" /> class
        /// with the <see cref="DirigeantPm" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DirigeantPm.</param>
        public SearchGet200ResponseResultsInnerDirigeantsInner(DirigeantPm actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(DirigeantPm))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DirigeantPp))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: DirigeantPm, DirigeantPp");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `DirigeantPp`. If the actual instance is not `DirigeantPp`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DirigeantPp</returns>
        public DirigeantPp GetDirigeantPp()
        {
            return (DirigeantPp)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DirigeantPm`. If the actual instance is not `DirigeantPm`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DirigeantPm</returns>
        public DirigeantPm GetDirigeantPm()
        {
            return (DirigeantPm)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchGet200ResponseResultsInnerDirigeantsInner {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, SearchGet200ResponseResultsInnerDirigeantsInner.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of SearchGet200ResponseResultsInnerDirigeantsInner
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of SearchGet200ResponseResultsInnerDirigeantsInner</returns>
        public static SearchGet200ResponseResultsInnerDirigeantsInner FromJson(string jsonString)
        {
            SearchGet200ResponseResultsInnerDirigeantsInner newSearchGet200ResponseResultsInnerDirigeantsInner = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newSearchGet200ResponseResultsInnerDirigeantsInner;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DirigeantPm).GetProperty("AdditionalProperties") == null)
                {
                    newSearchGet200ResponseResultsInnerDirigeantsInner = new SearchGet200ResponseResultsInnerDirigeantsInner(JsonConvert.DeserializeObject<DirigeantPm>(jsonString, SearchGet200ResponseResultsInnerDirigeantsInner.SerializerSettings));
                }
                else
                {
                    newSearchGet200ResponseResultsInnerDirigeantsInner = new SearchGet200ResponseResultsInnerDirigeantsInner(JsonConvert.DeserializeObject<DirigeantPm>(jsonString, SearchGet200ResponseResultsInnerDirigeantsInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DirigeantPm");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DirigeantPm: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DirigeantPp).GetProperty("AdditionalProperties") == null)
                {
                    newSearchGet200ResponseResultsInnerDirigeantsInner = new SearchGet200ResponseResultsInnerDirigeantsInner(JsonConvert.DeserializeObject<DirigeantPp>(jsonString, SearchGet200ResponseResultsInnerDirigeantsInner.SerializerSettings));
                }
                else
                {
                    newSearchGet200ResponseResultsInnerDirigeantsInner = new SearchGet200ResponseResultsInnerDirigeantsInner(JsonConvert.DeserializeObject<DirigeantPp>(jsonString, SearchGet200ResponseResultsInnerDirigeantsInner.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DirigeantPp");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DirigeantPp: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newSearchGet200ResponseResultsInnerDirigeantsInner;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchGet200ResponseResultsInnerDirigeantsInner);
        }

        /// <summary>
        /// Returns true if SearchGet200ResponseResultsInnerDirigeantsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchGet200ResponseResultsInnerDirigeantsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchGet200ResponseResultsInnerDirigeantsInner input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for SearchGet200ResponseResultsInnerDirigeantsInner
    /// </summary>
    public class SearchGet200ResponseResultsInnerDirigeantsInnerJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(SearchGet200ResponseResultsInnerDirigeantsInner).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return SearchGet200ResponseResultsInnerDirigeantsInner.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
