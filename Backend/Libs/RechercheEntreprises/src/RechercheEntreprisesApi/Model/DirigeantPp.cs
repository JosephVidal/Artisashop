/*
 * API Recherche d’entreprises
 *
 * # Bienvenue sur la documentation interactive d'API Recherche d’entreprises ! L’API Recherche d’entreprises permet à tout le monde de rechercher et de trouver  une entreprise française par sa dénomination, ou son adresse. ## Données accessibles dans l'API L’API étant totalement ouverte d'accès, elle comporte des limitations. Ainsi ne sont pas accessibles dans l'API : - les prédécesseurs et successeurs d'un établissement - les entreprises non-diffusibles - les entreprises qui se sont vues refuser leurs immatriculation au RCS  **Attention :** cette API ne permet pas d'accèder aux données complètes de  la  base Sirene, mais uniquement de rechercher une entreprise, par sa dénomination ou son adresse. Pour savoir comment obtenir les données complètes, consultez [notre fiche explicative.](https://api.gouv.fr/guides/quelle-api-sirene)  ## Commencer à utiliser l'API L'API est accessible à partir de cette adresse : [https://recherche-entreprises.api.gouv.fr](https://recherche-entreprises.api.gouv.fr)  **Attention :** Vous devez rajouter votre requête sur l’adresse. ## Limite des requêtes    Le serveur accepte un maximum de 7 requêtes par seconde. Au delà, un code 429 est renvoyé indiquant que la volumétrie d'appels a été dépassée.     ## Monitoring de l'API Une supervision du service en temps réel est disponible à cette adresse : [https://stats.uptimerobot.com/kXzwzfk7BE](https://stats.uptimerobot.com/kXzwzfk7BE) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: recherche-entreprises@api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = RechercheEntreprisesApi.Client.OpenAPIDateConverter;

namespace RechercheEntreprisesApi.Model
{
    /// <summary>
    /// DirigeantPp
    /// </summary>
    [DataContract(Name = "dirigeant_pp")]
    public partial class DirigeantPp : IEquatable<DirigeantPp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DirigeantPp" /> class.
        /// </summary>
        /// <param name="nom">nom.</param>
        /// <param name="prenoms">prenoms.</param>
        /// <param name="anneeDeNaissance">anneeDeNaissance.</param>
        /// <param name="qualite">qualite.</param>
        public DirigeantPp(string nom = default(string), string prenoms = default(string), string anneeDeNaissance = default(string), string qualite = default(string))
        {
            this.Nom = nom;
            this.Prenoms = prenoms;
            this.AnneeDeNaissance = anneeDeNaissance;
            this.Qualite = qualite;
        }

        /// <summary>
        /// Gets or Sets Nom
        /// </summary>
        [DataMember(Name = "nom", EmitDefaultValue = false)]
        public string Nom { get; set; }

        /// <summary>
        /// Gets or Sets Prenoms
        /// </summary>
        [DataMember(Name = "prenoms", EmitDefaultValue = false)]
        public string Prenoms { get; set; }

        /// <summary>
        /// Gets or Sets AnneeDeNaissance
        /// </summary>
        [DataMember(Name = "annee_de_naissance", EmitDefaultValue = false)]
        public string AnneeDeNaissance { get; set; }

        /// <summary>
        /// Gets or Sets Qualite
        /// </summary>
        [DataMember(Name = "qualite", EmitDefaultValue = false)]
        public string Qualite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DirigeantPp {\n");
            sb.Append("  Nom: ").Append(Nom).Append("\n");
            sb.Append("  Prenoms: ").Append(Prenoms).Append("\n");
            sb.Append("  AnneeDeNaissance: ").Append(AnneeDeNaissance).Append("\n");
            sb.Append("  Qualite: ").Append(Qualite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DirigeantPp);
        }

        /// <summary>
        /// Returns true if DirigeantPp instances are equal
        /// </summary>
        /// <param name="input">Instance of DirigeantPp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DirigeantPp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Nom == input.Nom ||
                    (this.Nom != null &&
                    this.Nom.Equals(input.Nom))
                ) && 
                (
                    this.Prenoms == input.Prenoms ||
                    (this.Prenoms != null &&
                    this.Prenoms.Equals(input.Prenoms))
                ) && 
                (
                    this.AnneeDeNaissance == input.AnneeDeNaissance ||
                    (this.AnneeDeNaissance != null &&
                    this.AnneeDeNaissance.Equals(input.AnneeDeNaissance))
                ) && 
                (
                    this.Qualite == input.Qualite ||
                    (this.Qualite != null &&
                    this.Qualite.Equals(input.Qualite))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Nom != null)
                {
                    hashCode = (hashCode * 59) + this.Nom.GetHashCode();
                }
                if (this.Prenoms != null)
                {
                    hashCode = (hashCode * 59) + this.Prenoms.GetHashCode();
                }
                if (this.AnneeDeNaissance != null)
                {
                    hashCode = (hashCode * 59) + this.AnneeDeNaissance.GetHashCode();
                }
                if (this.Qualite != null)
                {
                    hashCode = (hashCode * 59) + this.Qualite.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
