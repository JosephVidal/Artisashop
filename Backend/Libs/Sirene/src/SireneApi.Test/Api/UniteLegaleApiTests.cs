/*
 * API Sirene
 *
 * <p><span style=\"color:red;\"> <b></b></p><br></span><span style=\"color:blue;\"> <b>Les tranches d’effectifs et les catégories d’entreprises du millésime 2020 sont désormais disponibles</b></span> <br><br><span style=\"color:blue;\"><i>La documentation des services est désormais au format html (Cf. Onglet Documentation)</i></span></p> <p><h4 class=\"add-margin-top-5x\"><b>Les données du répertoire Sirene depuis 1973</b></h4><p>API Sirene donne accès aux informations concernant les entreprises et les établissements enregistrés au répertoire interadministratif Sirene depuis sa création en 1973, y compris les unités fermées.</p> <p>La recherche peut être unitaire, multicritère, phonétique et porter sur les données courantes et historisées.</p> <p></p> <p>Les services actuellement disponibles interrogent :</p> <ul> <li> les unités légales (siren) </li> <li> les établissements (siret). </li> </ul> <p>Le service informations permet de connaître les dates de dernières mises à jour.</p> <p>Le service Liens de succession informe sur les prédécesseurs et les successeurs des établissements.</p> <p align=\"justify\" style=\"margin-top: 0.6cm\">Le service nonDiffusibles restitue les siren et siret des personnes physiques ayant demandé à être exclues de la diffusion publique conformément à l'article A123-96 du code de commerce. Les informations les concernant ne peuvent alors être rediffusées, ni utilisées à des fins de prospection. Les utilisateurs ayant un référentiel en interne peuvent ainsi le mettre à jour quotidiennement.</p> <p>La lettre <b>Sirene open data actualités</b> est destinée aux utilisateurs des données Sirene. Pour vous abonner, <a href=\"https://insee.fr/fr/information/1405555\">suivez ce lien</a>. Pour consulter les précédents numéros, <a href=\"https://insee.fr/fr/information/3711739\">cliquez ici</a>.</p>
 *
 * The version of the OpenAPI document: 3.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SireneApi.Client;
using SireneApi.Api;
// uncomment below to import models
//using SireneApi.Model;

namespace SireneApi.Test.Api
{
    /// <summary>
    ///  Class for testing UniteLegaleApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UniteLegaleApiTests : IDisposable
    {
        private UniteLegaleApi instance;

        public UniteLegaleApiTests()
        {
            instance = new UniteLegaleApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UniteLegaleApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UniteLegaleApi
            //Assert.IsType<UniteLegaleApi>(instance);
        }

        /// <summary>
        /// Test FindBySiren
        /// </summary>
        [Fact]
        public void FindBySirenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string siren = null;
            //string? date = null;
            //string? champs = null;
            //bool? masquerValeursNulles = null;
            //var response = instance.FindBySiren(siren, date, champs, masquerValeursNulles);
            //Assert.IsType<ReponseUniteLegale>(response);
        }

        /// <summary>
        /// Test FindRefusImmatriculationRCSByQ
        /// </summary>
        [Fact]
        public void FindRefusImmatriculationRCSByQTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? q = null;
            //int? nombre = null;
            //int? debut = null;
            //var response = instance.FindRefusImmatriculationRCSByQ(q, nombre, debut);
            //Assert.IsType<ReponseRefusImmatriculationRCS>(response);
        }

        /// <summary>
        /// Test FindSirenByQ
        /// </summary>
        [Fact]
        public void FindSirenByQTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? q = null;
            //string? date = null;
            //string? champs = null;
            //bool? masquerValeursNulles = null;
            //string? facetteChamp = null;
            //string? tri = null;
            //int? nombre = null;
            //int? debut = null;
            //string? curseur = null;
            //var response = instance.FindSirenByQ(q, date, champs, masquerValeursNulles, facetteChamp, tri, nombre, debut, curseur);
            //Assert.IsType<ReponseUnitesLegales>(response);
        }

        /// <summary>
        /// Test FindSirenByQPost
        /// </summary>
        [Fact]
        public void FindSirenByQPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? q = null;
            //string? date = null;
            //string? champs = null;
            //bool? masquerValeursNulles = null;
            //string? facetteChamp = null;
            //string? tri = null;
            //int? nombre = null;
            //int? debut = null;
            //string? curseur = null;
            //var response = instance.FindSirenByQPost(q, date, champs, masquerValeursNulles, facetteChamp, tri, nombre, debut, curseur);
            //Assert.IsType<ReponseUnitesLegales>(response);
        }

        /// <summary>
        /// Test FindSirenNonDiffusiblesByQ
        /// </summary>
        [Fact]
        public void FindSirenNonDiffusiblesByQTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? q = null;
            //int? nombre = null;
            //int? debut = null;
            //string? curseur = null;
            //string? champs = null;
            //var response = instance.FindSirenNonDiffusiblesByQ(q, nombre, debut, curseur, champs);
            //Assert.IsType<ReponseUnitesLegalesNonDiffusibles>(response);
        }
    }
}
