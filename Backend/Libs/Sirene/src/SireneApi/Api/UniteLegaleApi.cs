/*
 * API Sirene
 *
 * <p><span style=\"color:red;\"> <b></b></p><br></span><span style=\"color:blue;\"> <b>Les tranches d’effectifs et les catégories d’entreprises du millésime 2020 sont désormais disponibles</b></span> <br><br><span style=\"color:blue;\"><i>La documentation des services est désormais au format html (Cf. Onglet Documentation)</i></span></p> <p><h4 class=\"add-margin-top-5x\"><b>Les données du répertoire Sirene depuis 1973</b></h4><p>API Sirene donne accès aux informations concernant les entreprises et les établissements enregistrés au répertoire interadministratif Sirene depuis sa création en 1973, y compris les unités fermées.</p> <p>La recherche peut être unitaire, multicritère, phonétique et porter sur les données courantes et historisées.</p> <p></p> <p>Les services actuellement disponibles interrogent :</p> <ul> <li> les unités légales (siren) </li> <li> les établissements (siret). </li> </ul> <p>Le service informations permet de connaître les dates de dernières mises à jour.</p> <p>Le service Liens de succession informe sur les prédécesseurs et les successeurs des établissements.</p> <p align=\"justify\" style=\"margin-top: 0.6cm\">Le service nonDiffusibles restitue les siren et siret des personnes physiques ayant demandé à être exclues de la diffusion publique conformément à l'article A123-96 du code de commerce. Les informations les concernant ne peuvent alors être rediffusées, ni utilisées à des fins de prospection. Les utilisateurs ayant un référentiel en interne peuvent ainsi le mettre à jour quotidiennement.</p> <p>La lettre <b>Sirene open data actualités</b> est destinée aux utilisateurs des données Sirene. Pour vous abonner, <a href=\"https://insee.fr/fr/information/1405555\">suivez ce lien</a>. Pour consulter les précédents numéros, <a href=\"https://insee.fr/fr/information/3711739\">cliquez ici</a>.</p>
 *
 * The version of the OpenAPI document: 3.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SireneApi.Client;
using SireneApi.Client.Auth;
using SireneApi.Model;

namespace SireneApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUniteLegaleApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Recherche d&#39;une unité légale par son numéro Siren (9 chiffres)
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Identifiant de l&#39;unité légale (9 chiffres)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReponseUniteLegale</returns>
        ReponseUniteLegale FindBySiren(string siren, string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Recherche d&#39;une unité légale par son numéro Siren (9 chiffres)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Identifiant de l&#39;unité légale (9 chiffres)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReponseUniteLegale</returns>
        ApiResponse<ReponseUniteLegale> FindBySirenWithHttpInfo(string siren, string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Recherche sur les refus d&#39;immatriculation au RCS
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q-rr.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReponseRefusImmatriculationRCS</returns>
        ReponseRefusImmatriculationRCS FindRefusImmatriculationRCSByQ(string? q = default(string?), int? nombre = default(int?), int? debut = default(int?), int operationIndex = 0);

        /// <summary>
        /// Recherche sur les refus d&#39;immatriculation au RCS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q-rr.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReponseRefusImmatriculationRCS</returns>
        ApiResponse<ReponseRefusImmatriculationRCS> FindRefusImmatriculationRCSByQWithHttpInfo(string? q = default(string?), int? nombre = default(int?), int? debut = default(int?), int operationIndex = 0);
        /// <summary>
        /// Recherche multicritère d&#39;unités légales
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="facetteChamp">Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_facettes.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="tri">Champs sur lesquels des tris seront effectués, séparés par des virgules. Voir la &lt;a target&#x3D;_blank href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_tri.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReponseUnitesLegales</returns>
        ReponseUnitesLegales FindSirenByQ(string? q = default(string?), string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), string? facetteChamp = default(string?), string? tri = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), int operationIndex = 0);

        /// <summary>
        /// Recherche multicritère d&#39;unités légales
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="facetteChamp">Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_facettes.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="tri">Champs sur lesquels des tris seront effectués, séparés par des virgules. Voir la &lt;a target&#x3D;_blank href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_tri.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReponseUnitesLegales</returns>
        ApiResponse<ReponseUnitesLegales> FindSirenByQWithHttpInfo(string? q = default(string?), string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), string? facetteChamp = default(string?), string? tri = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), int operationIndex = 0);
        /// <summary>
        /// Recherche multicritère d&#39;unités légales
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q.pdf\\\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\\\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="facetteChamp">Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_facettes.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="tri">Champs sur lesquels des tris seront effectués, séparés par des virgules. Voir la &lt;a target&#x3D;_blank href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_tri.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\\\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReponseUnitesLegales</returns>
        ReponseUnitesLegales FindSirenByQPost(string? q = default(string?), string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), string? facetteChamp = default(string?), string? tri = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), int operationIndex = 0);

        /// <summary>
        /// Recherche multicritère d&#39;unités légales
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q.pdf\\\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\\\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="facetteChamp">Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_facettes.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="tri">Champs sur lesquels des tris seront effectués, séparés par des virgules. Voir la &lt;a target&#x3D;_blank href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_tri.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\\\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReponseUnitesLegales</returns>
        ApiResponse<ReponseUnitesLegales> FindSirenByQPostWithHttpInfo(string? q = default(string?), string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), string? facetteChamp = default(string?), string? tri = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), int operationIndex = 0);
        /// <summary>
        /// Recherche sur les non diffusibles
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q-nd.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReponseUnitesLegalesNonDiffusibles</returns>
        ReponseUnitesLegalesNonDiffusibles FindSirenNonDiffusiblesByQ(string? q = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), string? champs = default(string?), int operationIndex = 0);

        /// <summary>
        /// Recherche sur les non diffusibles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q-nd.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReponseUnitesLegalesNonDiffusibles</returns>
        ApiResponse<ReponseUnitesLegalesNonDiffusibles> FindSirenNonDiffusiblesByQWithHttpInfo(string? q = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), string? champs = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUniteLegaleApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Recherche d&#39;une unité légale par son numéro Siren (9 chiffres)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Identifiant de l&#39;unité légale (9 chiffres)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReponseUniteLegale</returns>
        System.Threading.Tasks.Task<ReponseUniteLegale> FindBySirenAsync(string siren, string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recherche d&#39;une unité légale par son numéro Siren (9 chiffres)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Identifiant de l&#39;unité légale (9 chiffres)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReponseUniteLegale)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReponseUniteLegale>> FindBySirenWithHttpInfoAsync(string siren, string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recherche sur les refus d&#39;immatriculation au RCS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q-rr.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReponseRefusImmatriculationRCS</returns>
        System.Threading.Tasks.Task<ReponseRefusImmatriculationRCS> FindRefusImmatriculationRCSByQAsync(string? q = default(string?), int? nombre = default(int?), int? debut = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recherche sur les refus d&#39;immatriculation au RCS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q-rr.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReponseRefusImmatriculationRCS)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReponseRefusImmatriculationRCS>> FindRefusImmatriculationRCSByQWithHttpInfoAsync(string? q = default(string?), int? nombre = default(int?), int? debut = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recherche multicritère d&#39;unités légales
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="facetteChamp">Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_facettes.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="tri">Champs sur lesquels des tris seront effectués, séparés par des virgules. Voir la &lt;a target&#x3D;_blank href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_tri.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReponseUnitesLegales</returns>
        System.Threading.Tasks.Task<ReponseUnitesLegales> FindSirenByQAsync(string? q = default(string?), string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), string? facetteChamp = default(string?), string? tri = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recherche multicritère d&#39;unités légales
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="facetteChamp">Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_facettes.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="tri">Champs sur lesquels des tris seront effectués, séparés par des virgules. Voir la &lt;a target&#x3D;_blank href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_tri.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReponseUnitesLegales)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReponseUnitesLegales>> FindSirenByQWithHttpInfoAsync(string? q = default(string?), string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), string? facetteChamp = default(string?), string? tri = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recherche multicritère d&#39;unités légales
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q.pdf\\\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\\\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="facetteChamp">Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_facettes.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="tri">Champs sur lesquels des tris seront effectués, séparés par des virgules. Voir la &lt;a target&#x3D;_blank href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_tri.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\\\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReponseUnitesLegales</returns>
        System.Threading.Tasks.Task<ReponseUnitesLegales> FindSirenByQPostAsync(string? q = default(string?), string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), string? facetteChamp = default(string?), string? tri = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recherche multicritère d&#39;unités légales
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q.pdf\\\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\\\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="facetteChamp">Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_facettes.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="tri">Champs sur lesquels des tris seront effectués, séparés par des virgules. Voir la &lt;a target&#x3D;_blank href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_tri.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\\\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReponseUnitesLegales)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReponseUnitesLegales>> FindSirenByQPostWithHttpInfoAsync(string? q = default(string?), string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), string? facetteChamp = default(string?), string? tri = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recherche sur les non diffusibles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q-nd.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReponseUnitesLegalesNonDiffusibles</returns>
        System.Threading.Tasks.Task<ReponseUnitesLegalesNonDiffusibles> FindSirenNonDiffusiblesByQAsync(string? q = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), string? champs = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recherche sur les non diffusibles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q-nd.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReponseUnitesLegalesNonDiffusibles)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReponseUnitesLegalesNonDiffusibles>> FindSirenNonDiffusiblesByQWithHttpInfoAsync(string? q = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), string? champs = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUniteLegaleApi : IUniteLegaleApiSync, IUniteLegaleApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UniteLegaleApi : IUniteLegaleApi
    {
        private SireneApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UniteLegaleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UniteLegaleApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UniteLegaleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UniteLegaleApi(string basePath)
        {
            this.Configuration = SireneApi.Client.Configuration.MergeConfigurations(
                SireneApi.Client.GlobalConfiguration.Instance,
                new SireneApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SireneApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SireneApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SireneApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UniteLegaleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UniteLegaleApi(SireneApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SireneApi.Client.Configuration.MergeConfigurations(
                SireneApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SireneApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SireneApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SireneApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UniteLegaleApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UniteLegaleApi(SireneApi.Client.ISynchronousClient client, SireneApi.Client.IAsynchronousClient asyncClient, SireneApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SireneApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SireneApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SireneApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SireneApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SireneApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Recherche d&#39;une unité légale par son numéro Siren (9 chiffres) 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Identifiant de l&#39;unité légale (9 chiffres)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReponseUniteLegale</returns>
        public ReponseUniteLegale FindBySiren(string siren, string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), int operationIndex = 0)
        {
            SireneApi.Client.ApiResponse<ReponseUniteLegale> localVarResponse = FindBySirenWithHttpInfo(siren, date, champs, masquerValeursNulles);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recherche d&#39;une unité légale par son numéro Siren (9 chiffres) 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Identifiant de l&#39;unité légale (9 chiffres)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReponseUniteLegale</returns>
        public SireneApi.Client.ApiResponse<ReponseUniteLegale> FindBySirenWithHttpInfo(string siren, string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new SireneApi.Client.ApiException(400, "Missing required parameter 'siren' when calling UniteLegaleApi->FindBySiren");
            }

            SireneApi.Client.RequestOptions localVarRequestOptions = new SireneApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SireneApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SireneApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", SireneApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (champs != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "champs", champs));
            }
            if (masquerValeursNulles != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "masquerValeursNulles", masquerValeursNulles));
            }

            localVarRequestOptions.Operation = "UniteLegaleApi.FindBySiren";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ReponseUniteLegale>("/siren/{siren}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindBySiren", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recherche d&#39;une unité légale par son numéro Siren (9 chiffres) 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Identifiant de l&#39;unité légale (9 chiffres)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReponseUniteLegale</returns>
        public async System.Threading.Tasks.Task<ReponseUniteLegale> FindBySirenAsync(string siren, string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SireneApi.Client.ApiResponse<ReponseUniteLegale> localVarResponse = await FindBySirenWithHttpInfoAsync(siren, date, champs, masquerValeursNulles, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recherche d&#39;une unité légale par son numéro Siren (9 chiffres) 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Identifiant de l&#39;unité légale (9 chiffres)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReponseUniteLegale)</returns>
        public async System.Threading.Tasks.Task<SireneApi.Client.ApiResponse<ReponseUniteLegale>> FindBySirenWithHttpInfoAsync(string siren, string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new SireneApi.Client.ApiException(400, "Missing required parameter 'siren' when calling UniteLegaleApi->FindBySiren");
            }


            SireneApi.Client.RequestOptions localVarRequestOptions = new SireneApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SireneApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SireneApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", SireneApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (champs != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "champs", champs));
            }
            if (masquerValeursNulles != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "masquerValeursNulles", masquerValeursNulles));
            }

            localVarRequestOptions.Operation = "UniteLegaleApi.FindBySiren";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReponseUniteLegale>("/siren/{siren}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindBySiren", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recherche sur les refus d&#39;immatriculation au RCS 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q-rr.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReponseRefusImmatriculationRCS</returns>
        public ReponseRefusImmatriculationRCS FindRefusImmatriculationRCSByQ(string? q = default(string?), int? nombre = default(int?), int? debut = default(int?), int operationIndex = 0)
        {
            SireneApi.Client.ApiResponse<ReponseRefusImmatriculationRCS> localVarResponse = FindRefusImmatriculationRCSByQWithHttpInfo(q, nombre, debut);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recherche sur les refus d&#39;immatriculation au RCS 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q-rr.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReponseRefusImmatriculationRCS</returns>
        public SireneApi.Client.ApiResponse<ReponseRefusImmatriculationRCS> FindRefusImmatriculationRCSByQWithHttpInfo(string? q = default(string?), int? nombre = default(int?), int? debut = default(int?), int operationIndex = 0)
        {
            SireneApi.Client.RequestOptions localVarRequestOptions = new SireneApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = SireneApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SireneApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (nombre != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "nombre", nombre));
            }
            if (debut != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "debut", debut));
            }

            localVarRequestOptions.Operation = "UniteLegaleApi.FindRefusImmatriculationRCSByQ";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ReponseRefusImmatriculationRCS>("/siren/refusImmatriculationRcs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindRefusImmatriculationRCSByQ", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recherche sur les refus d&#39;immatriculation au RCS 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q-rr.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReponseRefusImmatriculationRCS</returns>
        public async System.Threading.Tasks.Task<ReponseRefusImmatriculationRCS> FindRefusImmatriculationRCSByQAsync(string? q = default(string?), int? nombre = default(int?), int? debut = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SireneApi.Client.ApiResponse<ReponseRefusImmatriculationRCS> localVarResponse = await FindRefusImmatriculationRCSByQWithHttpInfoAsync(q, nombre, debut, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recherche sur les refus d&#39;immatriculation au RCS 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q-rr.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReponseRefusImmatriculationRCS)</returns>
        public async System.Threading.Tasks.Task<SireneApi.Client.ApiResponse<ReponseRefusImmatriculationRCS>> FindRefusImmatriculationRCSByQWithHttpInfoAsync(string? q = default(string?), int? nombre = default(int?), int? debut = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SireneApi.Client.RequestOptions localVarRequestOptions = new SireneApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = SireneApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SireneApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (nombre != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "nombre", nombre));
            }
            if (debut != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "debut", debut));
            }

            localVarRequestOptions.Operation = "UniteLegaleApi.FindRefusImmatriculationRCSByQ";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReponseRefusImmatriculationRCS>("/siren/refusImmatriculationRcs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindRefusImmatriculationRCSByQ", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recherche multicritère d&#39;unités légales 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="facetteChamp">Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_facettes.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="tri">Champs sur lesquels des tris seront effectués, séparés par des virgules. Voir la &lt;a target&#x3D;_blank href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_tri.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReponseUnitesLegales</returns>
        public ReponseUnitesLegales FindSirenByQ(string? q = default(string?), string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), string? facetteChamp = default(string?), string? tri = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), int operationIndex = 0)
        {
            SireneApi.Client.ApiResponse<ReponseUnitesLegales> localVarResponse = FindSirenByQWithHttpInfo(q, date, champs, masquerValeursNulles, facetteChamp, tri, nombre, debut, curseur);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recherche multicritère d&#39;unités légales 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="facetteChamp">Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_facettes.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="tri">Champs sur lesquels des tris seront effectués, séparés par des virgules. Voir la &lt;a target&#x3D;_blank href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_tri.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReponseUnitesLegales</returns>
        public SireneApi.Client.ApiResponse<ReponseUnitesLegales> FindSirenByQWithHttpInfo(string? q = default(string?), string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), string? facetteChamp = default(string?), string? tri = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), int operationIndex = 0)
        {
            SireneApi.Client.RequestOptions localVarRequestOptions = new SireneApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = SireneApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SireneApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (champs != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "champs", champs));
            }
            if (masquerValeursNulles != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "masquerValeursNulles", masquerValeursNulles));
            }
            if (facetteChamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "facette.champ", facetteChamp));
            }
            if (tri != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "tri", tri));
            }
            if (nombre != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "nombre", nombre));
            }
            if (debut != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "debut", debut));
            }
            if (curseur != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "curseur", curseur));
            }

            localVarRequestOptions.Operation = "UniteLegaleApi.FindSirenByQ";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ReponseUnitesLegales>("/siren", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSirenByQ", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recherche multicritère d&#39;unités légales 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="facetteChamp">Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_facettes.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="tri">Champs sur lesquels des tris seront effectués, séparés par des virgules. Voir la &lt;a target&#x3D;_blank href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_tri.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReponseUnitesLegales</returns>
        public async System.Threading.Tasks.Task<ReponseUnitesLegales> FindSirenByQAsync(string? q = default(string?), string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), string? facetteChamp = default(string?), string? tri = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SireneApi.Client.ApiResponse<ReponseUnitesLegales> localVarResponse = await FindSirenByQWithHttpInfoAsync(q, date, champs, masquerValeursNulles, facetteChamp, tri, nombre, debut, curseur, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recherche multicritère d&#39;unités légales 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="facetteChamp">Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_facettes.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="tri">Champs sur lesquels des tris seront effectués, séparés par des virgules. Voir la &lt;a target&#x3D;_blank href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_tri.pdf\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReponseUnitesLegales)</returns>
        public async System.Threading.Tasks.Task<SireneApi.Client.ApiResponse<ReponseUnitesLegales>> FindSirenByQWithHttpInfoAsync(string? q = default(string?), string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), string? facetteChamp = default(string?), string? tri = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SireneApi.Client.RequestOptions localVarRequestOptions = new SireneApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = SireneApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SireneApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (champs != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "champs", champs));
            }
            if (masquerValeursNulles != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "masquerValeursNulles", masquerValeursNulles));
            }
            if (facetteChamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "facette.champ", facetteChamp));
            }
            if (tri != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "tri", tri));
            }
            if (nombre != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "nombre", nombre));
            }
            if (debut != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "debut", debut));
            }
            if (curseur != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "curseur", curseur));
            }

            localVarRequestOptions.Operation = "UniteLegaleApi.FindSirenByQ";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReponseUnitesLegales>("/siren", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSirenByQ", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recherche multicritère d&#39;unités légales 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q.pdf\\\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\\\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="facetteChamp">Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_facettes.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="tri">Champs sur lesquels des tris seront effectués, séparés par des virgules. Voir la &lt;a target&#x3D;_blank href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_tri.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\\\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReponseUnitesLegales</returns>
        public ReponseUnitesLegales FindSirenByQPost(string? q = default(string?), string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), string? facetteChamp = default(string?), string? tri = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), int operationIndex = 0)
        {
            SireneApi.Client.ApiResponse<ReponseUnitesLegales> localVarResponse = FindSirenByQPostWithHttpInfo(q, date, champs, masquerValeursNulles, facetteChamp, tri, nombre, debut, curseur);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recherche multicritère d&#39;unités légales 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q.pdf\\\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\\\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="facetteChamp">Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_facettes.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="tri">Champs sur lesquels des tris seront effectués, séparés par des virgules. Voir la &lt;a target&#x3D;_blank href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_tri.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\\\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReponseUnitesLegales</returns>
        public SireneApi.Client.ApiResponse<ReponseUnitesLegales> FindSirenByQPostWithHttpInfo(string? q = default(string?), string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), string? facetteChamp = default(string?), string? tri = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), int operationIndex = 0)
        {
            SireneApi.Client.RequestOptions localVarRequestOptions = new SireneApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = SireneApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SireneApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.FormParameters.Add("q", SireneApi.Client.ClientUtils.ParameterToString(q)); // form parameter
            }
            if (date != null)
            {
                localVarRequestOptions.FormParameters.Add("date", SireneApi.Client.ClientUtils.ParameterToString(date)); // form parameter
            }
            if (champs != null)
            {
                localVarRequestOptions.FormParameters.Add("champs", SireneApi.Client.ClientUtils.ParameterToString(champs)); // form parameter
            }
            if (masquerValeursNulles != null)
            {
                localVarRequestOptions.FormParameters.Add("masquerValeursNulles", SireneApi.Client.ClientUtils.ParameterToString(masquerValeursNulles)); // form parameter
            }
            if (facetteChamp != null)
            {
                localVarRequestOptions.FormParameters.Add("facette.champ", SireneApi.Client.ClientUtils.ParameterToString(facetteChamp)); // form parameter
            }
            if (tri != null)
            {
                localVarRequestOptions.FormParameters.Add("tri", SireneApi.Client.ClientUtils.ParameterToString(tri)); // form parameter
            }
            if (nombre != null)
            {
                localVarRequestOptions.FormParameters.Add("nombre", SireneApi.Client.ClientUtils.ParameterToString(nombre)); // form parameter
            }
            if (debut != null)
            {
                localVarRequestOptions.FormParameters.Add("debut", SireneApi.Client.ClientUtils.ParameterToString(debut)); // form parameter
            }
            if (curseur != null)
            {
                localVarRequestOptions.FormParameters.Add("curseur", SireneApi.Client.ClientUtils.ParameterToString(curseur)); // form parameter
            }

            localVarRequestOptions.Operation = "UniteLegaleApi.FindSirenByQPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ReponseUnitesLegales>("/siren", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSirenByQPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recherche multicritère d&#39;unités légales 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q.pdf\\\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\\\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="facetteChamp">Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_facettes.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="tri">Champs sur lesquels des tris seront effectués, séparés par des virgules. Voir la &lt;a target&#x3D;_blank href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_tri.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\\\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReponseUnitesLegales</returns>
        public async System.Threading.Tasks.Task<ReponseUnitesLegales> FindSirenByQPostAsync(string? q = default(string?), string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), string? facetteChamp = default(string?), string? tri = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SireneApi.Client.ApiResponse<ReponseUnitesLegales> localVarResponse = await FindSirenByQPostWithHttpInfoAsync(q, date, champs, masquerValeursNulles, facetteChamp, tri, nombre, debut, curseur, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recherche multicritère d&#39;unités légales 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q.pdf\\\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="date">Date à laquelle s&#39;appliqueront les critères de recherche sur les champs historisés, format AAAA-MM-JJ. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_dates.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\\\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="masquerValeursNulles">Masque (true) ou affiche (false, par défaut) les attributs qui n&#39;ont pas de valeur (optional)</param>
        /// <param name="facetteChamp">Liste des champs sur lesquels des comptages seront effectués, séparés par des virgules. Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_facettes.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="tri">Champs sur lesquels des tris seront effectués, séparés par des virgules. Voir la &lt;a target&#x3D;_blank href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_tri.pdf\\\&quot;&gt;documentation&lt;/a&gt; (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\\\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\\\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReponseUnitesLegales)</returns>
        public async System.Threading.Tasks.Task<SireneApi.Client.ApiResponse<ReponseUnitesLegales>> FindSirenByQPostWithHttpInfoAsync(string? q = default(string?), string? date = default(string?), string? champs = default(string?), bool? masquerValeursNulles = default(bool?), string? facetteChamp = default(string?), string? tri = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SireneApi.Client.RequestOptions localVarRequestOptions = new SireneApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = SireneApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SireneApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.FormParameters.Add("q", SireneApi.Client.ClientUtils.ParameterToString(q)); // form parameter
            }
            if (date != null)
            {
                localVarRequestOptions.FormParameters.Add("date", SireneApi.Client.ClientUtils.ParameterToString(date)); // form parameter
            }
            if (champs != null)
            {
                localVarRequestOptions.FormParameters.Add("champs", SireneApi.Client.ClientUtils.ParameterToString(champs)); // form parameter
            }
            if (masquerValeursNulles != null)
            {
                localVarRequestOptions.FormParameters.Add("masquerValeursNulles", SireneApi.Client.ClientUtils.ParameterToString(masquerValeursNulles)); // form parameter
            }
            if (facetteChamp != null)
            {
                localVarRequestOptions.FormParameters.Add("facette.champ", SireneApi.Client.ClientUtils.ParameterToString(facetteChamp)); // form parameter
            }
            if (tri != null)
            {
                localVarRequestOptions.FormParameters.Add("tri", SireneApi.Client.ClientUtils.ParameterToString(tri)); // form parameter
            }
            if (nombre != null)
            {
                localVarRequestOptions.FormParameters.Add("nombre", SireneApi.Client.ClientUtils.ParameterToString(nombre)); // form parameter
            }
            if (debut != null)
            {
                localVarRequestOptions.FormParameters.Add("debut", SireneApi.Client.ClientUtils.ParameterToString(debut)); // form parameter
            }
            if (curseur != null)
            {
                localVarRequestOptions.FormParameters.Add("curseur", SireneApi.Client.ClientUtils.ParameterToString(curseur)); // form parameter
            }

            localVarRequestOptions.Operation = "UniteLegaleApi.FindSirenByQPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ReponseUnitesLegales>("/siren", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSirenByQPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recherche sur les non diffusibles 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q-nd.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReponseUnitesLegalesNonDiffusibles</returns>
        public ReponseUnitesLegalesNonDiffusibles FindSirenNonDiffusiblesByQ(string? q = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), string? champs = default(string?), int operationIndex = 0)
        {
            SireneApi.Client.ApiResponse<ReponseUnitesLegalesNonDiffusibles> localVarResponse = FindSirenNonDiffusiblesByQWithHttpInfo(q, nombre, debut, curseur, champs);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recherche sur les non diffusibles 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q-nd.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReponseUnitesLegalesNonDiffusibles</returns>
        public SireneApi.Client.ApiResponse<ReponseUnitesLegalesNonDiffusibles> FindSirenNonDiffusiblesByQWithHttpInfo(string? q = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), string? champs = default(string?), int operationIndex = 0)
        {
            SireneApi.Client.RequestOptions localVarRequestOptions = new SireneApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = SireneApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SireneApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (nombre != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "nombre", nombre));
            }
            if (debut != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "debut", debut));
            }
            if (curseur != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "curseur", curseur));
            }
            if (champs != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "champs", champs));
            }

            localVarRequestOptions.Operation = "UniteLegaleApi.FindSirenNonDiffusiblesByQ";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ReponseUnitesLegalesNonDiffusibles>("/siren/nonDiffusibles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSirenNonDiffusiblesByQ", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recherche sur les non diffusibles 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q-nd.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReponseUnitesLegalesNonDiffusibles</returns>
        public async System.Threading.Tasks.Task<ReponseUnitesLegalesNonDiffusibles> FindSirenNonDiffusiblesByQAsync(string? q = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), string? champs = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SireneApi.Client.ApiResponse<ReponseUnitesLegalesNonDiffusibles> localVarResponse = await FindSirenNonDiffusiblesByQWithHttpInfoAsync(q, nombre, debut, curseur, champs, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recherche sur les non diffusibles 
        /// </summary>
        /// <exception cref="SireneApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Contenu de la requête multicritères, voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_q-nd.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="nombre">Nombre d&#39;éléments demandés dans la réponse, défaut 20 (optional)</param>
        /// <param name="debut">Rang du premier élément demandé dans la réponse, défaut 0 (optional)</param>
        /// <param name="curseur">Paramètre utilisé pour la pagination profonde, voir la Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-Extrait_curseurs.pdf\&quot;&gt;documentation&lt;/a&gt; pour plus de précisions (optional)</param>
        /// <param name="champs">Liste des champs demandés, séparés par des virgules. Voir la &lt;a href&#x3D;\&quot;https://www.sirene.fr/static-resources/doc/INSEE_Documentation-champs-siren.pdf\&quot;&gt;liste&lt;/a&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReponseUnitesLegalesNonDiffusibles)</returns>
        public async System.Threading.Tasks.Task<SireneApi.Client.ApiResponse<ReponseUnitesLegalesNonDiffusibles>> FindSirenNonDiffusiblesByQWithHttpInfoAsync(string? q = default(string?), int? nombre = default(int?), int? debut = default(int?), string? curseur = default(string?), string? champs = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SireneApi.Client.RequestOptions localVarRequestOptions = new SireneApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/csv"
            };

            var localVarContentType = SireneApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SireneApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (nombre != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "nombre", nombre));
            }
            if (debut != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "debut", debut));
            }
            if (curseur != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "curseur", curseur));
            }
            if (champs != null)
            {
                localVarRequestOptions.QueryParameters.Add(SireneApi.Client.ClientUtils.ParameterToMultiMap("", "champs", champs));
            }

            localVarRequestOptions.Operation = "UniteLegaleApi.FindSirenNonDiffusiblesByQ";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReponseUnitesLegalesNonDiffusibles>("/siren/nonDiffusibles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSirenNonDiffusiblesByQ", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
