/*
 * API Sirene
 *
 * <p><span style=\"color:red;\"> <b></b></p><br></span><span style=\"color:blue;\"> <b>Les tranches d’effectifs et les catégories d’entreprises du millésime 2020 sont désormais disponibles</b></span> <br><br><span style=\"color:blue;\"><i>La documentation des services est désormais au format html (Cf. Onglet Documentation)</i></span></p> <p><h4 class=\"add-margin-top-5x\"><b>Les données du répertoire Sirene depuis 1973</b></h4><p>API Sirene donne accès aux informations concernant les entreprises et les établissements enregistrés au répertoire interadministratif Sirene depuis sa création en 1973, y compris les unités fermées.</p> <p>La recherche peut être unitaire, multicritère, phonétique et porter sur les données courantes et historisées.</p> <p></p> <p>Les services actuellement disponibles interrogent :</p> <ul> <li> les unités légales (siren) </li> <li> les établissements (siret). </li> </ul> <p>Le service informations permet de connaître les dates de dernières mises à jour.</p> <p>Le service Liens de succession informe sur les prédécesseurs et les successeurs des établissements.</p> <p align=\"justify\" style=\"margin-top: 0.6cm\">Le service nonDiffusibles restitue les siren et siret des personnes physiques ayant demandé à être exclues de la diffusion publique conformément à l'article A123-96 du code de commerce. Les informations les concernant ne peuvent alors être rediffusées, ni utilisées à des fins de prospection. Les utilisateurs ayant un référentiel en interne peuvent ainsi le mettre à jour quotidiennement.</p> <p>La lettre <b>Sirene open data actualités</b> est destinée aux utilisateurs des données Sirene. Pour vous abonner, <a href=\"https://insee.fr/fr/information/1405555\">suivez ce lien</a>. Pour consulter les précédents numéros, <a href=\"https://insee.fr/fr/information/3711739\">cliquez ici</a>.</p>
 *
 * The version of the OpenAPI document: 3.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SireneApi.Client.OpenAPIDateConverter;

namespace SireneApi.Model
{
    /// <summary>
    /// Objet renvoyé en cas de requête demandant les informations sur le service
    /// </summary>
    [DataContract(Name = "ReponseInformations")]
    public partial class ReponseInformations : IEquatable<ReponseInformations>, IValidatableObject
    {
        /// <summary>
        /// État actuel du service
        /// </summary>
        /// <value>État actuel du service</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EtatServiceEnum
        {
            /// <summary>
            /// Enum UP for value: UP
            /// </summary>
            [EnumMember(Value = "UP")]
            UP = 1,

            /// <summary>
            /// Enum DOWN for value: DOWN
            /// </summary>
            [EnumMember(Value = "DOWN")]
            DOWN = 2

        }


        /// <summary>
        /// État actuel du service
        /// </summary>
        /// <value>État actuel du service</value>
        [DataMember(Name = "etatService", EmitDefaultValue = false)]
        public EtatServiceEnum? EtatService { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReponseInformations" /> class.
        /// </summary>
        /// <param name="etatService">État actuel du service.</param>
        /// <param name="etatsDesServices">Etats des services.</param>
        /// <param name="versionService">Numéro de la version.</param>
        /// <param name="journalDesModifications">Historique des versions de l&#39;API Sirene.</param>
        /// <param name="datesDernieresMisesAJourDesDonnees">Dates des dernières mises à jour de chaque collection de données.</param>
        public ReponseInformations(EtatServiceEnum? etatService = default(EtatServiceEnum?), List<EtatCollection> etatsDesServices = default(List<EtatCollection>), string versionService = default(string), string journalDesModifications = default(string), List<DatesMiseAJourDonnees> datesDernieresMisesAJourDesDonnees = default(List<DatesMiseAJourDonnees>))
        {
            this.EtatService = etatService;
            this.EtatsDesServices = etatsDesServices;
            this.VersionService = versionService;
            this.JournalDesModifications = journalDesModifications;
            this.DatesDernieresMisesAJourDesDonnees = datesDernieresMisesAJourDesDonnees;
        }

        /// <summary>
        /// Etats des services
        /// </summary>
        /// <value>Etats des services</value>
        [DataMember(Name = "etatsDesServices", EmitDefaultValue = false)]
        public List<EtatCollection> EtatsDesServices { get; set; }

        /// <summary>
        /// Numéro de la version
        /// </summary>
        /// <value>Numéro de la version</value>
        [DataMember(Name = "versionService", EmitDefaultValue = false)]
        public string VersionService { get; set; }

        /// <summary>
        /// Historique des versions de l&#39;API Sirene
        /// </summary>
        /// <value>Historique des versions de l&#39;API Sirene</value>
        [DataMember(Name = "journalDesModifications", EmitDefaultValue = false)]
        public string JournalDesModifications { get; set; }

        /// <summary>
        /// Dates des dernières mises à jour de chaque collection de données
        /// </summary>
        /// <value>Dates des dernières mises à jour de chaque collection de données</value>
        [DataMember(Name = "datesDernieresMisesAJourDesDonnees", EmitDefaultValue = false)]
        public List<DatesMiseAJourDonnees> DatesDernieresMisesAJourDesDonnees { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReponseInformations {\n");
            sb.Append("  EtatService: ").Append(EtatService).Append("\n");
            sb.Append("  EtatsDesServices: ").Append(EtatsDesServices).Append("\n");
            sb.Append("  VersionService: ").Append(VersionService).Append("\n");
            sb.Append("  JournalDesModifications: ").Append(JournalDesModifications).Append("\n");
            sb.Append("  DatesDernieresMisesAJourDesDonnees: ").Append(DatesDernieresMisesAJourDesDonnees).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReponseInformations);
        }

        /// <summary>
        /// Returns true if ReponseInformations instances are equal
        /// </summary>
        /// <param name="input">Instance of ReponseInformations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReponseInformations input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EtatService == input.EtatService ||
                    this.EtatService.Equals(input.EtatService)
                ) && 
                (
                    this.EtatsDesServices == input.EtatsDesServices ||
                    this.EtatsDesServices != null &&
                    input.EtatsDesServices != null &&
                    this.EtatsDesServices.SequenceEqual(input.EtatsDesServices)
                ) && 
                (
                    this.VersionService == input.VersionService ||
                    (this.VersionService != null &&
                    this.VersionService.Equals(input.VersionService))
                ) && 
                (
                    this.JournalDesModifications == input.JournalDesModifications ||
                    (this.JournalDesModifications != null &&
                    this.JournalDesModifications.Equals(input.JournalDesModifications))
                ) && 
                (
                    this.DatesDernieresMisesAJourDesDonnees == input.DatesDernieresMisesAJourDesDonnees ||
                    this.DatesDernieresMisesAJourDesDonnees != null &&
                    input.DatesDernieresMisesAJourDesDonnees != null &&
                    this.DatesDernieresMisesAJourDesDonnees.SequenceEqual(input.DatesDernieresMisesAJourDesDonnees)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.EtatService.GetHashCode();
                if (this.EtatsDesServices != null)
                {
                    hashCode = (hashCode * 59) + this.EtatsDesServices.GetHashCode();
                }
                if (this.VersionService != null)
                {
                    hashCode = (hashCode * 59) + this.VersionService.GetHashCode();
                }
                if (this.JournalDesModifications != null)
                {
                    hashCode = (hashCode * 59) + this.JournalDesModifications.GetHashCode();
                }
                if (this.DatesDernieresMisesAJourDesDonnees != null)
                {
                    hashCode = (hashCode * 59) + this.DatesDernieresMisesAJourDesDonnees.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
