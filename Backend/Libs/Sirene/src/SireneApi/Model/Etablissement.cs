/*
 * API Sirene
 *
 * <p><span style=\"color:red;\"> <b></b></p><br></span><span style=\"color:blue;\"> <b>Les tranches d’effectifs et les catégories d’entreprises du millésime 2020 sont désormais disponibles</b></span> <br><br><span style=\"color:blue;\"><i>La documentation des services est désormais au format html (Cf. Onglet Documentation)</i></span></p> <p><h4 class=\"add-margin-top-5x\"><b>Les données du répertoire Sirene depuis 1973</b></h4><p>API Sirene donne accès aux informations concernant les entreprises et les établissements enregistrés au répertoire interadministratif Sirene depuis sa création en 1973, y compris les unités fermées.</p> <p>La recherche peut être unitaire, multicritère, phonétique et porter sur les données courantes et historisées.</p> <p></p> <p>Les services actuellement disponibles interrogent :</p> <ul> <li> les unités légales (siren) </li> <li> les établissements (siret). </li> </ul> <p>Le service informations permet de connaître les dates de dernières mises à jour.</p> <p>Le service Liens de succession informe sur les prédécesseurs et les successeurs des établissements.</p> <p align=\"justify\" style=\"margin-top: 0.6cm\">Le service nonDiffusibles restitue les siren et siret des personnes physiques ayant demandé à être exclues de la diffusion publique conformément à l'article A123-96 du code de commerce. Les informations les concernant ne peuvent alors être rediffusées, ni utilisées à des fins de prospection. Les utilisateurs ayant un référentiel en interne peuvent ainsi le mettre à jour quotidiennement.</p> <p>La lettre <b>Sirene open data actualités</b> est destinée aux utilisateurs des données Sirene. Pour vous abonner, <a href=\"https://insee.fr/fr/information/1405555\">suivez ce lien</a>. Pour consulter les précédents numéros, <a href=\"https://insee.fr/fr/information/3711739\">cliquez ici</a>.</p>
 *
 * The version of the OpenAPI document: 3.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SireneApi.Client.OpenAPIDateConverter;

namespace SireneApi.Model
{
    /// <summary>
    /// Objet représentant un établissement et son historique
    /// </summary>
    [DataContract(Name = "Etablissement")]
    public partial class Etablissement : IEquatable<Etablissement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Etablissement" /> class.
        /// </summary>
        /// <param name="score">Score de l&#39;élément parmi l&#39;ensemble des éléments répondant à la requête, plus le score est élevé, plus l&#39;élément est haut placé. Le score n&#39;a pas de signification en dehors de la requête et n&#39;est pas comparable aux score d&#39;autres requêtes.</param>
        /// <param name="siren">Numéro Siren de l&#39;entreprise à laquelle appartient l&#39;établissement.</param>
        /// <param name="nic">Numéro interne de classement de l&#39;établissement.</param>
        /// <param name="siret">Numéro Siret de l’établissement (toujours renseigné).</param>
        /// <param name="statutDiffusionEtablissement">Statut de diffusion de l&#39;établissement.</param>
        /// <param name="dateCreationEtablissement">Date de création de l&#39;établissement, format AAAA-MM-JJ.</param>
        /// <param name="trancheEffectifsEtablissement">Tranche d’effectif salarié de l’établissement, valorisée uniquement si l’année correspondante est supérieure ou égale à l’année d’interrogation -3 (sinon, NN).</param>
        /// <param name="anneeEffectifsEtablissement">Année de la tranche d’effectif salarié de l’établissement, valorisée uniquement si l&#39;année est supérieure ou égale à l’année d’interrogation -3 (sinon, null).</param>
        /// <param name="activitePrincipaleRegistreMetiersEtablissement">Code de l’activité exercée par l’artisan inscrit au registre des métiers. L’APRM est codifiée selon la nomenclature d’Activités Française de l’Artisanat (NAFA).</param>
        /// <param name="dateDernierTraitementEtablissement">Date de la dernière mise à jour effectuée au répertoire Sirene sur le Siret concerné (AAAA-MM-JJTHH:MM:SS).</param>
        /// <param name="etablissementSiege">Indicatrice précisant si le Siret est celui de l’établissement siège ou non.</param>
        /// <param name="nombrePeriodesEtablissement">Nombre de périodes dans la vie de l&#39;établissement.</param>
        /// <param name="uniteLegale">uniteLegale.</param>
        /// <param name="adresseEtablissement">adresseEtablissement.</param>
        /// <param name="adresse2Etablissement">adresse2Etablissement.</param>
        /// <param name="periodesEtablissement">periodesEtablissement.</param>
        public Etablissement(float score = default(float), string siren = default(string), string nic = default(string), string siret = default(string), string statutDiffusionEtablissement = default(string), string dateCreationEtablissement = default(string), string trancheEffectifsEtablissement = default(string), string anneeEffectifsEtablissement = default(string), string activitePrincipaleRegistreMetiersEtablissement = default(string), string dateDernierTraitementEtablissement = default(string), bool etablissementSiege = default(bool), int nombrePeriodesEtablissement = default(int), UniteLegaleEtablissement uniteLegale = default(UniteLegaleEtablissement), Adresse adresseEtablissement = default(Adresse), AdresseComplementaire adresse2Etablissement = default(AdresseComplementaire), List<PeriodeEtablissement> periodesEtablissement = default(List<PeriodeEtablissement>))
        {
            this.Score = score;
            this.Siren = siren;
            this.Nic = nic;
            this.Siret = siret;
            this.StatutDiffusionEtablissement = statutDiffusionEtablissement;
            this.DateCreationEtablissement = dateCreationEtablissement;
            this.TrancheEffectifsEtablissement = trancheEffectifsEtablissement;
            this.AnneeEffectifsEtablissement = anneeEffectifsEtablissement;
            this.ActivitePrincipaleRegistreMetiersEtablissement = activitePrincipaleRegistreMetiersEtablissement;
            this.DateDernierTraitementEtablissement = dateDernierTraitementEtablissement;
            this.EtablissementSiege = etablissementSiege;
            this.NombrePeriodesEtablissement = nombrePeriodesEtablissement;
            this.UniteLegale = uniteLegale;
            this.AdresseEtablissement = adresseEtablissement;
            this.Adresse2Etablissement = adresse2Etablissement;
            this.PeriodesEtablissement = periodesEtablissement;
        }

        /// <summary>
        /// Score de l&#39;élément parmi l&#39;ensemble des éléments répondant à la requête, plus le score est élevé, plus l&#39;élément est haut placé. Le score n&#39;a pas de signification en dehors de la requête et n&#39;est pas comparable aux score d&#39;autres requêtes
        /// </summary>
        /// <value>Score de l&#39;élément parmi l&#39;ensemble des éléments répondant à la requête, plus le score est élevé, plus l&#39;élément est haut placé. Le score n&#39;a pas de signification en dehors de la requête et n&#39;est pas comparable aux score d&#39;autres requêtes</value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public float Score { get; set; }

        /// <summary>
        /// Numéro Siren de l&#39;entreprise à laquelle appartient l&#39;établissement
        /// </summary>
        /// <value>Numéro Siren de l&#39;entreprise à laquelle appartient l&#39;établissement</value>
        [DataMember(Name = "siren", EmitDefaultValue = false)]
        public string Siren { get; set; }

        /// <summary>
        /// Numéro interne de classement de l&#39;établissement
        /// </summary>
        /// <value>Numéro interne de classement de l&#39;établissement</value>
        [DataMember(Name = "nic", EmitDefaultValue = false)]
        public string Nic { get; set; }

        /// <summary>
        /// Numéro Siret de l’établissement (toujours renseigné)
        /// </summary>
        /// <value>Numéro Siret de l’établissement (toujours renseigné)</value>
        [DataMember(Name = "siret", EmitDefaultValue = false)]
        public string Siret { get; set; }

        /// <summary>
        /// Statut de diffusion de l&#39;établissement
        /// </summary>
        /// <value>Statut de diffusion de l&#39;établissement</value>
        [DataMember(Name = "statutDiffusionEtablissement", EmitDefaultValue = false)]
        public string StatutDiffusionEtablissement { get; set; }

        /// <summary>
        /// Date de création de l&#39;établissement, format AAAA-MM-JJ
        /// </summary>
        /// <value>Date de création de l&#39;établissement, format AAAA-MM-JJ</value>
        [DataMember(Name = "dateCreationEtablissement", EmitDefaultValue = false)]
        public string DateCreationEtablissement { get; set; }

        /// <summary>
        /// Tranche d’effectif salarié de l’établissement, valorisée uniquement si l’année correspondante est supérieure ou égale à l’année d’interrogation -3 (sinon, NN)
        /// </summary>
        /// <value>Tranche d’effectif salarié de l’établissement, valorisée uniquement si l’année correspondante est supérieure ou égale à l’année d’interrogation -3 (sinon, NN)</value>
        [DataMember(Name = "trancheEffectifsEtablissement", EmitDefaultValue = false)]
        public string TrancheEffectifsEtablissement { get; set; }

        /// <summary>
        /// Année de la tranche d’effectif salarié de l’établissement, valorisée uniquement si l&#39;année est supérieure ou égale à l’année d’interrogation -3 (sinon, null)
        /// </summary>
        /// <value>Année de la tranche d’effectif salarié de l’établissement, valorisée uniquement si l&#39;année est supérieure ou égale à l’année d’interrogation -3 (sinon, null)</value>
        [DataMember(Name = "anneeEffectifsEtablissement", EmitDefaultValue = false)]
        public string AnneeEffectifsEtablissement { get; set; }

        /// <summary>
        /// Code de l’activité exercée par l’artisan inscrit au registre des métiers. L’APRM est codifiée selon la nomenclature d’Activités Française de l’Artisanat (NAFA)
        /// </summary>
        /// <value>Code de l’activité exercée par l’artisan inscrit au registre des métiers. L’APRM est codifiée selon la nomenclature d’Activités Française de l’Artisanat (NAFA)</value>
        [DataMember(Name = "activitePrincipaleRegistreMetiersEtablissement", EmitDefaultValue = false)]
        public string ActivitePrincipaleRegistreMetiersEtablissement { get; set; }

        /// <summary>
        /// Date de la dernière mise à jour effectuée au répertoire Sirene sur le Siret concerné (AAAA-MM-JJTHH:MM:SS)
        /// </summary>
        /// <value>Date de la dernière mise à jour effectuée au répertoire Sirene sur le Siret concerné (AAAA-MM-JJTHH:MM:SS)</value>
        [DataMember(Name = "dateDernierTraitementEtablissement", EmitDefaultValue = false)]
        public string DateDernierTraitementEtablissement { get; set; }

        /// <summary>
        /// Indicatrice précisant si le Siret est celui de l’établissement siège ou non
        /// </summary>
        /// <value>Indicatrice précisant si le Siret est celui de l’établissement siège ou non</value>
        [DataMember(Name = "etablissementSiege", EmitDefaultValue = true)]
        public bool EtablissementSiege { get; set; }

        /// <summary>
        /// Nombre de périodes dans la vie de l&#39;établissement
        /// </summary>
        /// <value>Nombre de périodes dans la vie de l&#39;établissement</value>
        [DataMember(Name = "nombrePeriodesEtablissement", EmitDefaultValue = false)]
        public int NombrePeriodesEtablissement { get; set; }

        /// <summary>
        /// Gets or Sets UniteLegale
        /// </summary>
        [DataMember(Name = "uniteLegale", EmitDefaultValue = false)]
        public UniteLegaleEtablissement UniteLegale { get; set; }

        /// <summary>
        /// Gets or Sets AdresseEtablissement
        /// </summary>
        [DataMember(Name = "adresseEtablissement", EmitDefaultValue = false)]
        public Adresse AdresseEtablissement { get; set; }

        /// <summary>
        /// Gets or Sets Adresse2Etablissement
        /// </summary>
        [DataMember(Name = "adresse2Etablissement", EmitDefaultValue = false)]
        public AdresseComplementaire Adresse2Etablissement { get; set; }

        /// <summary>
        /// Gets or Sets PeriodesEtablissement
        /// </summary>
        [DataMember(Name = "periodesEtablissement", EmitDefaultValue = false)]
        public List<PeriodeEtablissement> PeriodesEtablissement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Etablissement {\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Siren: ").Append(Siren).Append("\n");
            sb.Append("  Nic: ").Append(Nic).Append("\n");
            sb.Append("  Siret: ").Append(Siret).Append("\n");
            sb.Append("  StatutDiffusionEtablissement: ").Append(StatutDiffusionEtablissement).Append("\n");
            sb.Append("  DateCreationEtablissement: ").Append(DateCreationEtablissement).Append("\n");
            sb.Append("  TrancheEffectifsEtablissement: ").Append(TrancheEffectifsEtablissement).Append("\n");
            sb.Append("  AnneeEffectifsEtablissement: ").Append(AnneeEffectifsEtablissement).Append("\n");
            sb.Append("  ActivitePrincipaleRegistreMetiersEtablissement: ").Append(ActivitePrincipaleRegistreMetiersEtablissement).Append("\n");
            sb.Append("  DateDernierTraitementEtablissement: ").Append(DateDernierTraitementEtablissement).Append("\n");
            sb.Append("  EtablissementSiege: ").Append(EtablissementSiege).Append("\n");
            sb.Append("  NombrePeriodesEtablissement: ").Append(NombrePeriodesEtablissement).Append("\n");
            sb.Append("  UniteLegale: ").Append(UniteLegale).Append("\n");
            sb.Append("  AdresseEtablissement: ").Append(AdresseEtablissement).Append("\n");
            sb.Append("  Adresse2Etablissement: ").Append(Adresse2Etablissement).Append("\n");
            sb.Append("  PeriodesEtablissement: ").Append(PeriodesEtablissement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Etablissement);
        }

        /// <summary>
        /// Returns true if Etablissement instances are equal
        /// </summary>
        /// <param name="input">Instance of Etablissement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Etablissement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                ) && 
                (
                    this.Siren == input.Siren ||
                    (this.Siren != null &&
                    this.Siren.Equals(input.Siren))
                ) && 
                (
                    this.Nic == input.Nic ||
                    (this.Nic != null &&
                    this.Nic.Equals(input.Nic))
                ) && 
                (
                    this.Siret == input.Siret ||
                    (this.Siret != null &&
                    this.Siret.Equals(input.Siret))
                ) && 
                (
                    this.StatutDiffusionEtablissement == input.StatutDiffusionEtablissement ||
                    (this.StatutDiffusionEtablissement != null &&
                    this.StatutDiffusionEtablissement.Equals(input.StatutDiffusionEtablissement))
                ) && 
                (
                    this.DateCreationEtablissement == input.DateCreationEtablissement ||
                    (this.DateCreationEtablissement != null &&
                    this.DateCreationEtablissement.Equals(input.DateCreationEtablissement))
                ) && 
                (
                    this.TrancheEffectifsEtablissement == input.TrancheEffectifsEtablissement ||
                    (this.TrancheEffectifsEtablissement != null &&
                    this.TrancheEffectifsEtablissement.Equals(input.TrancheEffectifsEtablissement))
                ) && 
                (
                    this.AnneeEffectifsEtablissement == input.AnneeEffectifsEtablissement ||
                    (this.AnneeEffectifsEtablissement != null &&
                    this.AnneeEffectifsEtablissement.Equals(input.AnneeEffectifsEtablissement))
                ) && 
                (
                    this.ActivitePrincipaleRegistreMetiersEtablissement == input.ActivitePrincipaleRegistreMetiersEtablissement ||
                    (this.ActivitePrincipaleRegistreMetiersEtablissement != null &&
                    this.ActivitePrincipaleRegistreMetiersEtablissement.Equals(input.ActivitePrincipaleRegistreMetiersEtablissement))
                ) && 
                (
                    this.DateDernierTraitementEtablissement == input.DateDernierTraitementEtablissement ||
                    (this.DateDernierTraitementEtablissement != null &&
                    this.DateDernierTraitementEtablissement.Equals(input.DateDernierTraitementEtablissement))
                ) && 
                (
                    this.EtablissementSiege == input.EtablissementSiege ||
                    this.EtablissementSiege.Equals(input.EtablissementSiege)
                ) && 
                (
                    this.NombrePeriodesEtablissement == input.NombrePeriodesEtablissement ||
                    this.NombrePeriodesEtablissement.Equals(input.NombrePeriodesEtablissement)
                ) && 
                (
                    this.UniteLegale == input.UniteLegale ||
                    (this.UniteLegale != null &&
                    this.UniteLegale.Equals(input.UniteLegale))
                ) && 
                (
                    this.AdresseEtablissement == input.AdresseEtablissement ||
                    (this.AdresseEtablissement != null &&
                    this.AdresseEtablissement.Equals(input.AdresseEtablissement))
                ) && 
                (
                    this.Adresse2Etablissement == input.Adresse2Etablissement ||
                    (this.Adresse2Etablissement != null &&
                    this.Adresse2Etablissement.Equals(input.Adresse2Etablissement))
                ) && 
                (
                    this.PeriodesEtablissement == input.PeriodesEtablissement ||
                    this.PeriodesEtablissement != null &&
                    input.PeriodesEtablissement != null &&
                    this.PeriodesEtablissement.SequenceEqual(input.PeriodesEtablissement)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Score.GetHashCode();
                if (this.Siren != null)
                {
                    hashCode = (hashCode * 59) + this.Siren.GetHashCode();
                }
                if (this.Nic != null)
                {
                    hashCode = (hashCode * 59) + this.Nic.GetHashCode();
                }
                if (this.Siret != null)
                {
                    hashCode = (hashCode * 59) + this.Siret.GetHashCode();
                }
                if (this.StatutDiffusionEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.StatutDiffusionEtablissement.GetHashCode();
                }
                if (this.DateCreationEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.DateCreationEtablissement.GetHashCode();
                }
                if (this.TrancheEffectifsEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.TrancheEffectifsEtablissement.GetHashCode();
                }
                if (this.AnneeEffectifsEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.AnneeEffectifsEtablissement.GetHashCode();
                }
                if (this.ActivitePrincipaleRegistreMetiersEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.ActivitePrincipaleRegistreMetiersEtablissement.GetHashCode();
                }
                if (this.DateDernierTraitementEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.DateDernierTraitementEtablissement.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EtablissementSiege.GetHashCode();
                hashCode = (hashCode * 59) + this.NombrePeriodesEtablissement.GetHashCode();
                if (this.UniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.UniteLegale.GetHashCode();
                }
                if (this.AdresseEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.AdresseEtablissement.GetHashCode();
                }
                if (this.Adresse2Etablissement != null)
                {
                    hashCode = (hashCode * 59) + this.Adresse2Etablissement.GetHashCode();
                }
                if (this.PeriodesEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.PeriodesEtablissement.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
