/*
 * API Sirene
 *
 * <p><span style=\"color:red;\"> <b></b></p><br></span><span style=\"color:blue;\"> <b>Les tranches d’effectifs et les catégories d’entreprises du millésime 2020 sont désormais disponibles</b></span> <br><br><span style=\"color:blue;\"><i>La documentation des services est désormais au format html (Cf. Onglet Documentation)</i></span></p> <p><h4 class=\"add-margin-top-5x\"><b>Les données du répertoire Sirene depuis 1973</b></h4><p>API Sirene donne accès aux informations concernant les entreprises et les établissements enregistrés au répertoire interadministratif Sirene depuis sa création en 1973, y compris les unités fermées.</p> <p>La recherche peut être unitaire, multicritère, phonétique et porter sur les données courantes et historisées.</p> <p></p> <p>Les services actuellement disponibles interrogent :</p> <ul> <li> les unités légales (siren) </li> <li> les établissements (siret). </li> </ul> <p>Le service informations permet de connaître les dates de dernières mises à jour.</p> <p>Le service Liens de succession informe sur les prédécesseurs et les successeurs des établissements.</p> <p align=\"justify\" style=\"margin-top: 0.6cm\">Le service nonDiffusibles restitue les siren et siret des personnes physiques ayant demandé à être exclues de la diffusion publique conformément à l'article A123-96 du code de commerce. Les informations les concernant ne peuvent alors être rediffusées, ni utilisées à des fins de prospection. Les utilisateurs ayant un référentiel en interne peuvent ainsi le mettre à jour quotidiennement.</p> <p>La lettre <b>Sirene open data actualités</b> est destinée aux utilisateurs des données Sirene. Pour vous abonner, <a href=\"https://insee.fr/fr/information/1405555\">suivez ce lien</a>. Pour consulter les précédents numéros, <a href=\"https://insee.fr/fr/information/3711739\">cliquez ici</a>.</p>
 *
 * The version of the OpenAPI document: 3.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SireneApi.Client.OpenAPIDateConverter;

namespace SireneApi.Model
{
    /// <summary>
    /// Objet représentant une unité légale et son historique
    /// </summary>
    [DataContract(Name = "UniteLegale")]
    public partial class UniteLegale : IEquatable<UniteLegale>, IValidatableObject
    {
        /// <summary>
        /// Sexe pour les personnes physiques sinon null
        /// </summary>
        /// <value>Sexe pour les personnes physiques sinon null</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SexeUniteLegaleEnum
        {
            /// <summary>
            /// Enum M for value: M
            /// </summary>
            [EnumMember(Value = "M")]
            M = 1,

            /// <summary>
            /// Enum F for value: F
            /// </summary>
            [EnumMember(Value = "F")]
            F = 2,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 3

        }


        /// <summary>
        /// Sexe pour les personnes physiques sinon null
        /// </summary>
        /// <value>Sexe pour les personnes physiques sinon null</value>
        [DataMember(Name = "sexeUniteLegale", EmitDefaultValue = false)]
        public SexeUniteLegaleEnum? SexeUniteLegale { get; set; }
        /// <summary>
        /// Catégorie à laquelle appartient l&#39;entreprise : Petite ou moyenne entreprise, Entreprise de taille intermédiaire, Grande entreprise
        /// </summary>
        /// <value>Catégorie à laquelle appartient l&#39;entreprise : Petite ou moyenne entreprise, Entreprise de taille intermédiaire, Grande entreprise</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategorieEntrepriseEnum
        {
            /// <summary>
            /// Enum PME for value: PME
            /// </summary>
            [EnumMember(Value = "PME")]
            PME = 1,

            /// <summary>
            /// Enum ETI for value: ETI
            /// </summary>
            [EnumMember(Value = "ETI")]
            ETI = 2,

            /// <summary>
            /// Enum GE for value: GE
            /// </summary>
            [EnumMember(Value = "GE")]
            GE = 3,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 4

        }


        /// <summary>
        /// Catégorie à laquelle appartient l&#39;entreprise : Petite ou moyenne entreprise, Entreprise de taille intermédiaire, Grande entreprise
        /// </summary>
        /// <value>Catégorie à laquelle appartient l&#39;entreprise : Petite ou moyenne entreprise, Entreprise de taille intermédiaire, Grande entreprise</value>
        [DataMember(Name = "categorieEntreprise", EmitDefaultValue = false)]
        public CategorieEntrepriseEnum? CategorieEntreprise { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UniteLegale" /> class.
        /// </summary>
        /// <param name="score">Score de l&#39;élément parmi l&#39;ensemble des éléments répondant à la requête, plus le score est élevé, plus l&#39;élément est haut placé. Le score n&#39;a pas de signification en dehors de la requête et n&#39;est pas comparable aux score d&#39;autres requêtes.</param>
        /// <param name="siren">Numéro Siren de l&#39;entreprise, toujours renseigné.</param>
        /// <param name="statutDiffusionUniteLegale">Statut de diffusion de l’unité légale.</param>
        /// <param name="unitePurgeeUniteLegale">True si l&#39;unité est une unité purgée.</param>
        /// <param name="dateCreationUniteLegale">Date de création de l&#39;unité légale, au format AAAA-MM-JJ.</param>
        /// <param name="sigleUniteLegale">Sigle de l&#39;unité légale.</param>
        /// <param name="sexeUniteLegale">Sexe pour les personnes physiques sinon null.</param>
        /// <param name="prenom1UniteLegale">Premier prénom déclaré pour une personne physique, peut être null dans le cas d&#39;une unité purgée.</param>
        /// <param name="prenom2UniteLegale">Deuxième prénom déclaré pour une personne physique.</param>
        /// <param name="prenom3UniteLegale">Troisième prénom déclaré pour une personne physique.</param>
        /// <param name="prenom4UniteLegale">Quatrième prénom déclaré pour une personne physique.</param>
        /// <param name="prenomUsuelUniteLegale">Prénom usuel pour les personne physiques, correspond généralement au Prenom1.</param>
        /// <param name="pseudonymeUniteLegale">Pseudonyme pour les personnes physiques.</param>
        /// <param name="identifiantAssociationUniteLegale">Numéro au Répertoire National des Associations.</param>
        /// <param name="trancheEffectifsUniteLegale">Tranche d&#39;effectif salarié de l&#39;unité légale, valorisé uniquement si l&#39;année correspondante est supérieure ou égale à l&#39;année d&#39;interrogation-3 (sinon, NN).</param>
        /// <param name="anneeEffectifsUniteLegale">Année de validité de la tranche d&#39;effectif salarié de l&#39;unité légale, valorisée uniquement si l&#39;année est supérieure ou égale à l&#39;année d&#39;interrogation-3 (sinon, null).</param>
        /// <param name="dateDernierTraitementUniteLegale">Date de la dernière mise à jour effectuée au répertoire Sirene sur le Siren concerné, format AAAA-MM-JJTHH:MM:SS.</param>
        /// <param name="nombrePeriodesUniteLegale">Nombre de périodes dans la vie de l&#39;unité légale.</param>
        /// <param name="categorieEntreprise">Catégorie à laquelle appartient l&#39;entreprise : Petite ou moyenne entreprise, Entreprise de taille intermédiaire, Grande entreprise.</param>
        /// <param name="anneeCategorieEntreprise">Année de validité de la catégorie d&#39;entreprise.</param>
        /// <param name="periodesUniteLegale">periodesUniteLegale.</param>
        public UniteLegale(float score = default(float), string siren = default(string), string statutDiffusionUniteLegale = default(string), bool unitePurgeeUniteLegale = default(bool), string dateCreationUniteLegale = default(string), string sigleUniteLegale = default(string), SexeUniteLegaleEnum? sexeUniteLegale = default(SexeUniteLegaleEnum?), string prenom1UniteLegale = default(string), string prenom2UniteLegale = default(string), string prenom3UniteLegale = default(string), string prenom4UniteLegale = default(string), string prenomUsuelUniteLegale = default(string), string pseudonymeUniteLegale = default(string), string identifiantAssociationUniteLegale = default(string), string trancheEffectifsUniteLegale = default(string), string anneeEffectifsUniteLegale = default(string), string dateDernierTraitementUniteLegale = default(string), int nombrePeriodesUniteLegale = default(int), CategorieEntrepriseEnum? categorieEntreprise = default(CategorieEntrepriseEnum?), string anneeCategorieEntreprise = default(string), List<PeriodeUniteLegale> periodesUniteLegale = default(List<PeriodeUniteLegale>))
        {
            this.Score = score;
            this.Siren = siren;
            this.StatutDiffusionUniteLegale = statutDiffusionUniteLegale;
            this.UnitePurgeeUniteLegale = unitePurgeeUniteLegale;
            this.DateCreationUniteLegale = dateCreationUniteLegale;
            this.SigleUniteLegale = sigleUniteLegale;
            this.SexeUniteLegale = sexeUniteLegale;
            this.Prenom1UniteLegale = prenom1UniteLegale;
            this.Prenom2UniteLegale = prenom2UniteLegale;
            this.Prenom3UniteLegale = prenom3UniteLegale;
            this.Prenom4UniteLegale = prenom4UniteLegale;
            this.PrenomUsuelUniteLegale = prenomUsuelUniteLegale;
            this.PseudonymeUniteLegale = pseudonymeUniteLegale;
            this.IdentifiantAssociationUniteLegale = identifiantAssociationUniteLegale;
            this.TrancheEffectifsUniteLegale = trancheEffectifsUniteLegale;
            this.AnneeEffectifsUniteLegale = anneeEffectifsUniteLegale;
            this.DateDernierTraitementUniteLegale = dateDernierTraitementUniteLegale;
            this.NombrePeriodesUniteLegale = nombrePeriodesUniteLegale;
            this.CategorieEntreprise = categorieEntreprise;
            this.AnneeCategorieEntreprise = anneeCategorieEntreprise;
            this.PeriodesUniteLegale = periodesUniteLegale;
        }

        /// <summary>
        /// Score de l&#39;élément parmi l&#39;ensemble des éléments répondant à la requête, plus le score est élevé, plus l&#39;élément est haut placé. Le score n&#39;a pas de signification en dehors de la requête et n&#39;est pas comparable aux score d&#39;autres requêtes
        /// </summary>
        /// <value>Score de l&#39;élément parmi l&#39;ensemble des éléments répondant à la requête, plus le score est élevé, plus l&#39;élément est haut placé. Le score n&#39;a pas de signification en dehors de la requête et n&#39;est pas comparable aux score d&#39;autres requêtes</value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public float Score { get; set; }

        /// <summary>
        /// Numéro Siren de l&#39;entreprise, toujours renseigné
        /// </summary>
        /// <value>Numéro Siren de l&#39;entreprise, toujours renseigné</value>
        [DataMember(Name = "siren", EmitDefaultValue = false)]
        public string Siren { get; set; }

        /// <summary>
        /// Statut de diffusion de l’unité légale
        /// </summary>
        /// <value>Statut de diffusion de l’unité légale</value>
        [DataMember(Name = "statutDiffusionUniteLegale", EmitDefaultValue = false)]
        public string StatutDiffusionUniteLegale { get; set; }

        /// <summary>
        /// True si l&#39;unité est une unité purgée
        /// </summary>
        /// <value>True si l&#39;unité est une unité purgée</value>
        [DataMember(Name = "unitePurgeeUniteLegale", EmitDefaultValue = true)]
        public bool UnitePurgeeUniteLegale { get; set; }

        /// <summary>
        /// Date de création de l&#39;unité légale, au format AAAA-MM-JJ
        /// </summary>
        /// <value>Date de création de l&#39;unité légale, au format AAAA-MM-JJ</value>
        [DataMember(Name = "dateCreationUniteLegale", EmitDefaultValue = false)]
        public string DateCreationUniteLegale { get; set; }

        /// <summary>
        /// Sigle de l&#39;unité légale
        /// </summary>
        /// <value>Sigle de l&#39;unité légale</value>
        [DataMember(Name = "sigleUniteLegale", EmitDefaultValue = false)]
        public string SigleUniteLegale { get; set; }

        /// <summary>
        /// Premier prénom déclaré pour une personne physique, peut être null dans le cas d&#39;une unité purgée
        /// </summary>
        /// <value>Premier prénom déclaré pour une personne physique, peut être null dans le cas d&#39;une unité purgée</value>
        [DataMember(Name = "prenom1UniteLegale", EmitDefaultValue = false)]
        public string Prenom1UniteLegale { get; set; }

        /// <summary>
        /// Deuxième prénom déclaré pour une personne physique
        /// </summary>
        /// <value>Deuxième prénom déclaré pour une personne physique</value>
        [DataMember(Name = "prenom2UniteLegale", EmitDefaultValue = false)]
        public string Prenom2UniteLegale { get; set; }

        /// <summary>
        /// Troisième prénom déclaré pour une personne physique
        /// </summary>
        /// <value>Troisième prénom déclaré pour une personne physique</value>
        [DataMember(Name = "prenom3UniteLegale", EmitDefaultValue = false)]
        public string Prenom3UniteLegale { get; set; }

        /// <summary>
        /// Quatrième prénom déclaré pour une personne physique
        /// </summary>
        /// <value>Quatrième prénom déclaré pour une personne physique</value>
        [DataMember(Name = "prenom4UniteLegale", EmitDefaultValue = false)]
        public string Prenom4UniteLegale { get; set; }

        /// <summary>
        /// Prénom usuel pour les personne physiques, correspond généralement au Prenom1
        /// </summary>
        /// <value>Prénom usuel pour les personne physiques, correspond généralement au Prenom1</value>
        [DataMember(Name = "prenomUsuelUniteLegale", EmitDefaultValue = false)]
        public string PrenomUsuelUniteLegale { get; set; }

        /// <summary>
        /// Pseudonyme pour les personnes physiques
        /// </summary>
        /// <value>Pseudonyme pour les personnes physiques</value>
        [DataMember(Name = "pseudonymeUniteLegale", EmitDefaultValue = false)]
        public string PseudonymeUniteLegale { get; set; }

        /// <summary>
        /// Numéro au Répertoire National des Associations
        /// </summary>
        /// <value>Numéro au Répertoire National des Associations</value>
        [DataMember(Name = "identifiantAssociationUniteLegale", EmitDefaultValue = false)]
        public string IdentifiantAssociationUniteLegale { get; set; }

        /// <summary>
        /// Tranche d&#39;effectif salarié de l&#39;unité légale, valorisé uniquement si l&#39;année correspondante est supérieure ou égale à l&#39;année d&#39;interrogation-3 (sinon, NN)
        /// </summary>
        /// <value>Tranche d&#39;effectif salarié de l&#39;unité légale, valorisé uniquement si l&#39;année correspondante est supérieure ou égale à l&#39;année d&#39;interrogation-3 (sinon, NN)</value>
        [DataMember(Name = "trancheEffectifsUniteLegale", EmitDefaultValue = false)]
        public string TrancheEffectifsUniteLegale { get; set; }

        /// <summary>
        /// Année de validité de la tranche d&#39;effectif salarié de l&#39;unité légale, valorisée uniquement si l&#39;année est supérieure ou égale à l&#39;année d&#39;interrogation-3 (sinon, null)
        /// </summary>
        /// <value>Année de validité de la tranche d&#39;effectif salarié de l&#39;unité légale, valorisée uniquement si l&#39;année est supérieure ou égale à l&#39;année d&#39;interrogation-3 (sinon, null)</value>
        [DataMember(Name = "anneeEffectifsUniteLegale", EmitDefaultValue = false)]
        public string AnneeEffectifsUniteLegale { get; set; }

        /// <summary>
        /// Date de la dernière mise à jour effectuée au répertoire Sirene sur le Siren concerné, format AAAA-MM-JJTHH:MM:SS
        /// </summary>
        /// <value>Date de la dernière mise à jour effectuée au répertoire Sirene sur le Siren concerné, format AAAA-MM-JJTHH:MM:SS</value>
        [DataMember(Name = "dateDernierTraitementUniteLegale", EmitDefaultValue = false)]
        public string DateDernierTraitementUniteLegale { get; set; }

        /// <summary>
        /// Nombre de périodes dans la vie de l&#39;unité légale
        /// </summary>
        /// <value>Nombre de périodes dans la vie de l&#39;unité légale</value>
        [DataMember(Name = "nombrePeriodesUniteLegale", EmitDefaultValue = false)]
        public int NombrePeriodesUniteLegale { get; set; }

        /// <summary>
        /// Année de validité de la catégorie d&#39;entreprise
        /// </summary>
        /// <value>Année de validité de la catégorie d&#39;entreprise</value>
        [DataMember(Name = "anneeCategorieEntreprise", EmitDefaultValue = false)]
        public string AnneeCategorieEntreprise { get; set; }

        /// <summary>
        /// Gets or Sets PeriodesUniteLegale
        /// </summary>
        [DataMember(Name = "periodesUniteLegale", EmitDefaultValue = false)]
        public List<PeriodeUniteLegale> PeriodesUniteLegale { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UniteLegale {\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Siren: ").Append(Siren).Append("\n");
            sb.Append("  StatutDiffusionUniteLegale: ").Append(StatutDiffusionUniteLegale).Append("\n");
            sb.Append("  UnitePurgeeUniteLegale: ").Append(UnitePurgeeUniteLegale).Append("\n");
            sb.Append("  DateCreationUniteLegale: ").Append(DateCreationUniteLegale).Append("\n");
            sb.Append("  SigleUniteLegale: ").Append(SigleUniteLegale).Append("\n");
            sb.Append("  SexeUniteLegale: ").Append(SexeUniteLegale).Append("\n");
            sb.Append("  Prenom1UniteLegale: ").Append(Prenom1UniteLegale).Append("\n");
            sb.Append("  Prenom2UniteLegale: ").Append(Prenom2UniteLegale).Append("\n");
            sb.Append("  Prenom3UniteLegale: ").Append(Prenom3UniteLegale).Append("\n");
            sb.Append("  Prenom4UniteLegale: ").Append(Prenom4UniteLegale).Append("\n");
            sb.Append("  PrenomUsuelUniteLegale: ").Append(PrenomUsuelUniteLegale).Append("\n");
            sb.Append("  PseudonymeUniteLegale: ").Append(PseudonymeUniteLegale).Append("\n");
            sb.Append("  IdentifiantAssociationUniteLegale: ").Append(IdentifiantAssociationUniteLegale).Append("\n");
            sb.Append("  TrancheEffectifsUniteLegale: ").Append(TrancheEffectifsUniteLegale).Append("\n");
            sb.Append("  AnneeEffectifsUniteLegale: ").Append(AnneeEffectifsUniteLegale).Append("\n");
            sb.Append("  DateDernierTraitementUniteLegale: ").Append(DateDernierTraitementUniteLegale).Append("\n");
            sb.Append("  NombrePeriodesUniteLegale: ").Append(NombrePeriodesUniteLegale).Append("\n");
            sb.Append("  CategorieEntreprise: ").Append(CategorieEntreprise).Append("\n");
            sb.Append("  AnneeCategorieEntreprise: ").Append(AnneeCategorieEntreprise).Append("\n");
            sb.Append("  PeriodesUniteLegale: ").Append(PeriodesUniteLegale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UniteLegale);
        }

        /// <summary>
        /// Returns true if UniteLegale instances are equal
        /// </summary>
        /// <param name="input">Instance of UniteLegale to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UniteLegale input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                ) && 
                (
                    this.Siren == input.Siren ||
                    (this.Siren != null &&
                    this.Siren.Equals(input.Siren))
                ) && 
                (
                    this.StatutDiffusionUniteLegale == input.StatutDiffusionUniteLegale ||
                    (this.StatutDiffusionUniteLegale != null &&
                    this.StatutDiffusionUniteLegale.Equals(input.StatutDiffusionUniteLegale))
                ) && 
                (
                    this.UnitePurgeeUniteLegale == input.UnitePurgeeUniteLegale ||
                    this.UnitePurgeeUniteLegale.Equals(input.UnitePurgeeUniteLegale)
                ) && 
                (
                    this.DateCreationUniteLegale == input.DateCreationUniteLegale ||
                    (this.DateCreationUniteLegale != null &&
                    this.DateCreationUniteLegale.Equals(input.DateCreationUniteLegale))
                ) && 
                (
                    this.SigleUniteLegale == input.SigleUniteLegale ||
                    (this.SigleUniteLegale != null &&
                    this.SigleUniteLegale.Equals(input.SigleUniteLegale))
                ) && 
                (
                    this.SexeUniteLegale == input.SexeUniteLegale ||
                    this.SexeUniteLegale.Equals(input.SexeUniteLegale)
                ) && 
                (
                    this.Prenom1UniteLegale == input.Prenom1UniteLegale ||
                    (this.Prenom1UniteLegale != null &&
                    this.Prenom1UniteLegale.Equals(input.Prenom1UniteLegale))
                ) && 
                (
                    this.Prenom2UniteLegale == input.Prenom2UniteLegale ||
                    (this.Prenom2UniteLegale != null &&
                    this.Prenom2UniteLegale.Equals(input.Prenom2UniteLegale))
                ) && 
                (
                    this.Prenom3UniteLegale == input.Prenom3UniteLegale ||
                    (this.Prenom3UniteLegale != null &&
                    this.Prenom3UniteLegale.Equals(input.Prenom3UniteLegale))
                ) && 
                (
                    this.Prenom4UniteLegale == input.Prenom4UniteLegale ||
                    (this.Prenom4UniteLegale != null &&
                    this.Prenom4UniteLegale.Equals(input.Prenom4UniteLegale))
                ) && 
                (
                    this.PrenomUsuelUniteLegale == input.PrenomUsuelUniteLegale ||
                    (this.PrenomUsuelUniteLegale != null &&
                    this.PrenomUsuelUniteLegale.Equals(input.PrenomUsuelUniteLegale))
                ) && 
                (
                    this.PseudonymeUniteLegale == input.PseudonymeUniteLegale ||
                    (this.PseudonymeUniteLegale != null &&
                    this.PseudonymeUniteLegale.Equals(input.PseudonymeUniteLegale))
                ) && 
                (
                    this.IdentifiantAssociationUniteLegale == input.IdentifiantAssociationUniteLegale ||
                    (this.IdentifiantAssociationUniteLegale != null &&
                    this.IdentifiantAssociationUniteLegale.Equals(input.IdentifiantAssociationUniteLegale))
                ) && 
                (
                    this.TrancheEffectifsUniteLegale == input.TrancheEffectifsUniteLegale ||
                    (this.TrancheEffectifsUniteLegale != null &&
                    this.TrancheEffectifsUniteLegale.Equals(input.TrancheEffectifsUniteLegale))
                ) && 
                (
                    this.AnneeEffectifsUniteLegale == input.AnneeEffectifsUniteLegale ||
                    (this.AnneeEffectifsUniteLegale != null &&
                    this.AnneeEffectifsUniteLegale.Equals(input.AnneeEffectifsUniteLegale))
                ) && 
                (
                    this.DateDernierTraitementUniteLegale == input.DateDernierTraitementUniteLegale ||
                    (this.DateDernierTraitementUniteLegale != null &&
                    this.DateDernierTraitementUniteLegale.Equals(input.DateDernierTraitementUniteLegale))
                ) && 
                (
                    this.NombrePeriodesUniteLegale == input.NombrePeriodesUniteLegale ||
                    this.NombrePeriodesUniteLegale.Equals(input.NombrePeriodesUniteLegale)
                ) && 
                (
                    this.CategorieEntreprise == input.CategorieEntreprise ||
                    this.CategorieEntreprise.Equals(input.CategorieEntreprise)
                ) && 
                (
                    this.AnneeCategorieEntreprise == input.AnneeCategorieEntreprise ||
                    (this.AnneeCategorieEntreprise != null &&
                    this.AnneeCategorieEntreprise.Equals(input.AnneeCategorieEntreprise))
                ) && 
                (
                    this.PeriodesUniteLegale == input.PeriodesUniteLegale ||
                    this.PeriodesUniteLegale != null &&
                    input.PeriodesUniteLegale != null &&
                    this.PeriodesUniteLegale.SequenceEqual(input.PeriodesUniteLegale)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Score.GetHashCode();
                if (this.Siren != null)
                {
                    hashCode = (hashCode * 59) + this.Siren.GetHashCode();
                }
                if (this.StatutDiffusionUniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.StatutDiffusionUniteLegale.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UnitePurgeeUniteLegale.GetHashCode();
                if (this.DateCreationUniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.DateCreationUniteLegale.GetHashCode();
                }
                if (this.SigleUniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.SigleUniteLegale.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SexeUniteLegale.GetHashCode();
                if (this.Prenom1UniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.Prenom1UniteLegale.GetHashCode();
                }
                if (this.Prenom2UniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.Prenom2UniteLegale.GetHashCode();
                }
                if (this.Prenom3UniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.Prenom3UniteLegale.GetHashCode();
                }
                if (this.Prenom4UniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.Prenom4UniteLegale.GetHashCode();
                }
                if (this.PrenomUsuelUniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.PrenomUsuelUniteLegale.GetHashCode();
                }
                if (this.PseudonymeUniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.PseudonymeUniteLegale.GetHashCode();
                }
                if (this.IdentifiantAssociationUniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.IdentifiantAssociationUniteLegale.GetHashCode();
                }
                if (this.TrancheEffectifsUniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.TrancheEffectifsUniteLegale.GetHashCode();
                }
                if (this.AnneeEffectifsUniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.AnneeEffectifsUniteLegale.GetHashCode();
                }
                if (this.DateDernierTraitementUniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.DateDernierTraitementUniteLegale.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NombrePeriodesUniteLegale.GetHashCode();
                hashCode = (hashCode * 59) + this.CategorieEntreprise.GetHashCode();
                if (this.AnneeCategorieEntreprise != null)
                {
                    hashCode = (hashCode * 59) + this.AnneeCategorieEntreprise.GetHashCode();
                }
                if (this.PeriodesUniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.PeriodesUniteLegale.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
