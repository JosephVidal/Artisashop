/*
 * API Sirene
 *
 * <p><span style=\"color:red;\"> <b></b></p><br></span><span style=\"color:blue;\"> <b>Les tranches d’effectifs et les catégories d’entreprises du millésime 2020 sont désormais disponibles</b></span> <br><br><span style=\"color:blue;\"><i>La documentation des services est désormais au format html (Cf. Onglet Documentation)</i></span></p> <p><h4 class=\"add-margin-top-5x\"><b>Les données du répertoire Sirene depuis 1973</b></h4><p>API Sirene donne accès aux informations concernant les entreprises et les établissements enregistrés au répertoire interadministratif Sirene depuis sa création en 1973, y compris les unités fermées.</p> <p>La recherche peut être unitaire, multicritère, phonétique et porter sur les données courantes et historisées.</p> <p></p> <p>Les services actuellement disponibles interrogent :</p> <ul> <li> les unités légales (siren) </li> <li> les établissements (siret). </li> </ul> <p>Le service informations permet de connaître les dates de dernières mises à jour.</p> <p>Le service Liens de succession informe sur les prédécesseurs et les successeurs des établissements.</p> <p align=\"justify\" style=\"margin-top: 0.6cm\">Le service nonDiffusibles restitue les siren et siret des personnes physiques ayant demandé à être exclues de la diffusion publique conformément à l'article A123-96 du code de commerce. Les informations les concernant ne peuvent alors être rediffusées, ni utilisées à des fins de prospection. Les utilisateurs ayant un référentiel en interne peuvent ainsi le mettre à jour quotidiennement.</p> <p>La lettre <b>Sirene open data actualités</b> est destinée aux utilisateurs des données Sirene. Pour vous abonner, <a href=\"https://insee.fr/fr/information/1405555\">suivez ce lien</a>. Pour consulter les précédents numéros, <a href=\"https://insee.fr/fr/information/3711739\">cliquez ici</a>.</p>
 *
 * The version of the OpenAPI document: 3.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SireneApi.Client.OpenAPIDateConverter;

namespace SireneApi.Model
{
    /// <summary>
    /// Objet représentant un établissement non diffusible
    /// </summary>
    [DataContract(Name = "EtablissementNonDiffusible")]
    public partial class EtablissementNonDiffusible : IEquatable<EtablissementNonDiffusible>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EtablissementNonDiffusible" /> class.
        /// </summary>
        /// <param name="siren">Numéro Siren de l&#39;entreprise à laquelle appartient l&#39;établissement.</param>
        /// <param name="nic">Numéro interne de classement de l&#39;établissement.</param>
        /// <param name="siret">Numéro Siret de l’établissement (toujours renseigné).</param>
        /// <param name="statutDiffusionEtablissement">Statut de diffusion de l&#39;établissement.</param>
        /// <param name="dateDernierTraitementEtablissement">Date de la dernière mise à jour effectuée au répertoire Sirene sur le Siret concerné (AAAA-MM-JJTHH:MM:SS).</param>
        public EtablissementNonDiffusible(string siren = default(string), string nic = default(string), string siret = default(string), string statutDiffusionEtablissement = default(string), string dateDernierTraitementEtablissement = default(string))
        {
            this.Siren = siren;
            this.Nic = nic;
            this.Siret = siret;
            this.StatutDiffusionEtablissement = statutDiffusionEtablissement;
            this.DateDernierTraitementEtablissement = dateDernierTraitementEtablissement;
        }

        /// <summary>
        /// Numéro Siren de l&#39;entreprise à laquelle appartient l&#39;établissement
        /// </summary>
        /// <value>Numéro Siren de l&#39;entreprise à laquelle appartient l&#39;établissement</value>
        [DataMember(Name = "siren", EmitDefaultValue = false)]
        public string Siren { get; set; }

        /// <summary>
        /// Numéro interne de classement de l&#39;établissement
        /// </summary>
        /// <value>Numéro interne de classement de l&#39;établissement</value>
        [DataMember(Name = "nic", EmitDefaultValue = false)]
        public string Nic { get; set; }

        /// <summary>
        /// Numéro Siret de l’établissement (toujours renseigné)
        /// </summary>
        /// <value>Numéro Siret de l’établissement (toujours renseigné)</value>
        [DataMember(Name = "siret", EmitDefaultValue = false)]
        public string Siret { get; set; }

        /// <summary>
        /// Statut de diffusion de l&#39;établissement
        /// </summary>
        /// <value>Statut de diffusion de l&#39;établissement</value>
        [DataMember(Name = "statutDiffusionEtablissement", EmitDefaultValue = false)]
        public string StatutDiffusionEtablissement { get; set; }

        /// <summary>
        /// Date de la dernière mise à jour effectuée au répertoire Sirene sur le Siret concerné (AAAA-MM-JJTHH:MM:SS)
        /// </summary>
        /// <value>Date de la dernière mise à jour effectuée au répertoire Sirene sur le Siret concerné (AAAA-MM-JJTHH:MM:SS)</value>
        [DataMember(Name = "dateDernierTraitementEtablissement", EmitDefaultValue = false)]
        public string DateDernierTraitementEtablissement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EtablissementNonDiffusible {\n");
            sb.Append("  Siren: ").Append(Siren).Append("\n");
            sb.Append("  Nic: ").Append(Nic).Append("\n");
            sb.Append("  Siret: ").Append(Siret).Append("\n");
            sb.Append("  StatutDiffusionEtablissement: ").Append(StatutDiffusionEtablissement).Append("\n");
            sb.Append("  DateDernierTraitementEtablissement: ").Append(DateDernierTraitementEtablissement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EtablissementNonDiffusible);
        }

        /// <summary>
        /// Returns true if EtablissementNonDiffusible instances are equal
        /// </summary>
        /// <param name="input">Instance of EtablissementNonDiffusible to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EtablissementNonDiffusible input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Siren == input.Siren ||
                    (this.Siren != null &&
                    this.Siren.Equals(input.Siren))
                ) && 
                (
                    this.Nic == input.Nic ||
                    (this.Nic != null &&
                    this.Nic.Equals(input.Nic))
                ) && 
                (
                    this.Siret == input.Siret ||
                    (this.Siret != null &&
                    this.Siret.Equals(input.Siret))
                ) && 
                (
                    this.StatutDiffusionEtablissement == input.StatutDiffusionEtablissement ||
                    (this.StatutDiffusionEtablissement != null &&
                    this.StatutDiffusionEtablissement.Equals(input.StatutDiffusionEtablissement))
                ) && 
                (
                    this.DateDernierTraitementEtablissement == input.DateDernierTraitementEtablissement ||
                    (this.DateDernierTraitementEtablissement != null &&
                    this.DateDernierTraitementEtablissement.Equals(input.DateDernierTraitementEtablissement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Siren != null)
                {
                    hashCode = (hashCode * 59) + this.Siren.GetHashCode();
                }
                if (this.Nic != null)
                {
                    hashCode = (hashCode * 59) + this.Nic.GetHashCode();
                }
                if (this.Siret != null)
                {
                    hashCode = (hashCode * 59) + this.Siret.GetHashCode();
                }
                if (this.StatutDiffusionEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.StatutDiffusionEtablissement.GetHashCode();
                }
                if (this.DateDernierTraitementEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.DateDernierTraitementEtablissement.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
