/*
 * API Sirene
 *
 * <p><span style=\"color:red;\"> <b></b></p><br></span><span style=\"color:blue;\"> <b>Les tranches d’effectifs et les catégories d’entreprises du millésime 2020 sont désormais disponibles</b></span> <br><br><span style=\"color:blue;\"><i>La documentation des services est désormais au format html (Cf. Onglet Documentation)</i></span></p> <p><h4 class=\"add-margin-top-5x\"><b>Les données du répertoire Sirene depuis 1973</b></h4><p>API Sirene donne accès aux informations concernant les entreprises et les établissements enregistrés au répertoire interadministratif Sirene depuis sa création en 1973, y compris les unités fermées.</p> <p>La recherche peut être unitaire, multicritère, phonétique et porter sur les données courantes et historisées.</p> <p></p> <p>Les services actuellement disponibles interrogent :</p> <ul> <li> les unités légales (siren) </li> <li> les établissements (siret). </li> </ul> <p>Le service informations permet de connaître les dates de dernières mises à jour.</p> <p>Le service Liens de succession informe sur les prédécesseurs et les successeurs des établissements.</p> <p align=\"justify\" style=\"margin-top: 0.6cm\">Le service nonDiffusibles restitue les siren et siret des personnes physiques ayant demandé à être exclues de la diffusion publique conformément à l'article A123-96 du code de commerce. Les informations les concernant ne peuvent alors être rediffusées, ni utilisées à des fins de prospection. Les utilisateurs ayant un référentiel en interne peuvent ainsi le mettre à jour quotidiennement.</p> <p>La lettre <b>Sirene open data actualités</b> est destinée aux utilisateurs des données Sirene. Pour vous abonner, <a href=\"https://insee.fr/fr/information/1405555\">suivez ce lien</a>. Pour consulter les précédents numéros, <a href=\"https://insee.fr/fr/information/3711739\">cliquez ici</a>.</p>
 *
 * The version of the OpenAPI document: 3.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SireneApi.Client.OpenAPIDateConverter;

namespace SireneApi.Model
{
    /// <summary>
    /// Dates des dernières mises à jour de chaque collection de données
    /// </summary>
    [DataContract(Name = "DatesMiseAJourDonnees")]
    public partial class DatesMiseAJourDonnees : IEquatable<DatesMiseAJourDonnees>, IValidatableObject
    {
        /// <summary>
        /// Nom de la collection
        /// </summary>
        /// <value>Nom de la collection</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CollectionEnum
        {
            /// <summary>
            /// Enum UnitsLgales for value: Unités Légales
            /// </summary>
            [EnumMember(Value = "Unités Légales")]
            UnitsLgales = 1,

            /// <summary>
            /// Enum Tablissements for value: Établissements
            /// </summary>
            [EnumMember(Value = "Établissements")]
            Tablissements = 2

        }


        /// <summary>
        /// Nom de la collection
        /// </summary>
        /// <value>Nom de la collection</value>
        [DataMember(Name = "collection", EmitDefaultValue = false)]
        public CollectionEnum? Collection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DatesMiseAJourDonnees" /> class.
        /// </summary>
        /// <param name="collection">Nom de la collection.</param>
        /// <param name="dateDerniereMiseADisposition">Date et heure (aaaa-mm-jjThh:mm:ss) de la dernière mise à disposition des données de la collection.</param>
        /// <param name="dateDernierTraitementMaximum">Date (aaaa-mm-jj) correspondant à la date de validité des données consultées.</param>
        /// <param name="dateDernierTraitementDeMasse">Date (aaaa-mm-jj) du dernier traitement de masse sur la collection. À cette date plusieurs centaines de milliers de documents ont pu être mis à jour. Il est conseillé de traiter cette date d&#39;une manière spécifique.</param>
        public DatesMiseAJourDonnees(CollectionEnum? collection = default(CollectionEnum?), string dateDerniereMiseADisposition = default(string), string dateDernierTraitementMaximum = default(string), string dateDernierTraitementDeMasse = default(string))
        {
            this.Collection = collection;
            this.DateDerniereMiseADisposition = dateDerniereMiseADisposition;
            this.DateDernierTraitementMaximum = dateDernierTraitementMaximum;
            this.DateDernierTraitementDeMasse = dateDernierTraitementDeMasse;
        }

        /// <summary>
        /// Date et heure (aaaa-mm-jjThh:mm:ss) de la dernière mise à disposition des données de la collection
        /// </summary>
        /// <value>Date et heure (aaaa-mm-jjThh:mm:ss) de la dernière mise à disposition des données de la collection</value>
        [DataMember(Name = "dateDerniereMiseADisposition", EmitDefaultValue = false)]
        public string DateDerniereMiseADisposition { get; set; }

        /// <summary>
        /// Date (aaaa-mm-jj) correspondant à la date de validité des données consultées
        /// </summary>
        /// <value>Date (aaaa-mm-jj) correspondant à la date de validité des données consultées</value>
        [DataMember(Name = "dateDernierTraitementMaximum", EmitDefaultValue = false)]
        public string DateDernierTraitementMaximum { get; set; }

        /// <summary>
        /// Date (aaaa-mm-jj) du dernier traitement de masse sur la collection. À cette date plusieurs centaines de milliers de documents ont pu être mis à jour. Il est conseillé de traiter cette date d&#39;une manière spécifique
        /// </summary>
        /// <value>Date (aaaa-mm-jj) du dernier traitement de masse sur la collection. À cette date plusieurs centaines de milliers de documents ont pu être mis à jour. Il est conseillé de traiter cette date d&#39;une manière spécifique</value>
        [DataMember(Name = "dateDernierTraitementDeMasse", EmitDefaultValue = false)]
        public string DateDernierTraitementDeMasse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatesMiseAJourDonnees {\n");
            sb.Append("  Collection: ").Append(Collection).Append("\n");
            sb.Append("  DateDerniereMiseADisposition: ").Append(DateDerniereMiseADisposition).Append("\n");
            sb.Append("  DateDernierTraitementMaximum: ").Append(DateDernierTraitementMaximum).Append("\n");
            sb.Append("  DateDernierTraitementDeMasse: ").Append(DateDernierTraitementDeMasse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DatesMiseAJourDonnees);
        }

        /// <summary>
        /// Returns true if DatesMiseAJourDonnees instances are equal
        /// </summary>
        /// <param name="input">Instance of DatesMiseAJourDonnees to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatesMiseAJourDonnees input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Collection == input.Collection ||
                    this.Collection.Equals(input.Collection)
                ) && 
                (
                    this.DateDerniereMiseADisposition == input.DateDerniereMiseADisposition ||
                    (this.DateDerniereMiseADisposition != null &&
                    this.DateDerniereMiseADisposition.Equals(input.DateDerniereMiseADisposition))
                ) && 
                (
                    this.DateDernierTraitementMaximum == input.DateDernierTraitementMaximum ||
                    (this.DateDernierTraitementMaximum != null &&
                    this.DateDernierTraitementMaximum.Equals(input.DateDernierTraitementMaximum))
                ) && 
                (
                    this.DateDernierTraitementDeMasse == input.DateDernierTraitementDeMasse ||
                    (this.DateDernierTraitementDeMasse != null &&
                    this.DateDernierTraitementDeMasse.Equals(input.DateDernierTraitementDeMasse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Collection.GetHashCode();
                if (this.DateDerniereMiseADisposition != null)
                {
                    hashCode = (hashCode * 59) + this.DateDerniereMiseADisposition.GetHashCode();
                }
                if (this.DateDernierTraitementMaximum != null)
                {
                    hashCode = (hashCode * 59) + this.DateDernierTraitementMaximum.GetHashCode();
                }
                if (this.DateDernierTraitementDeMasse != null)
                {
                    hashCode = (hashCode * 59) + this.DateDernierTraitementDeMasse.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
