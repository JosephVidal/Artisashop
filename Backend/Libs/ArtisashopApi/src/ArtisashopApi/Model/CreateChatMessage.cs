/*
 * API Artisashop
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArtisashopApi.Client.OpenAPIDateConverter;

namespace ArtisashopApi.Model
{
    /// <summary>
    /// CreateChatMessage
    /// </summary>
    [DataContract(Name = "CreateChatMessage")]
    public partial class CreateChatMessage : IEquatable<CreateChatMessage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateChatMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateChatMessage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateChatMessage" /> class.
        /// </summary>
        /// <param name="fromUserId">fromUserId (required).</param>
        /// <param name="toUserID">toUserID (required).</param>
        /// <param name="filename">filename.</param>
        /// <param name="content">content (required).</param>
        /// <param name="joined">joined.</param>
        public CreateChatMessage(string fromUserId = default(string), string toUserID = default(string), string filename = default(string), string content = default(string), string joined = default(string))
        {
            // to ensure "fromUserId" is required (not null)
            if (fromUserId == null)
            {
                throw new ArgumentNullException("fromUserId is a required property for CreateChatMessage and cannot be null");
            }
            this.FromUserId = fromUserId;
            // to ensure "toUserID" is required (not null)
            if (toUserID == null)
            {
                throw new ArgumentNullException("toUserID is a required property for CreateChatMessage and cannot be null");
            }
            this.ToUserID = toUserID;
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new ArgumentNullException("content is a required property for CreateChatMessage and cannot be null");
            }
            this.Content = content;
            this.Filename = filename;
            this.Joined = joined;
        }

        /// <summary>
        /// Gets or Sets FromUserId
        /// </summary>
        [DataMember(Name = "fromUserId", IsRequired = true, EmitDefaultValue = true)]
        public string FromUserId { get; set; }

        /// <summary>
        /// Gets or Sets ToUserID
        /// </summary>
        [DataMember(Name = "toUserID", IsRequired = true, EmitDefaultValue = true)]
        public string ToUserID { get; set; }

        /// <summary>
        /// Gets or Sets Filename
        /// </summary>
        [DataMember(Name = "filename", EmitDefaultValue = true)]
        public string Filename { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = true)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets Joined
        /// </summary>
        [DataMember(Name = "joined", EmitDefaultValue = true)]
        public string Joined { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateChatMessage {\n");
            sb.Append("  FromUserId: ").Append(FromUserId).Append("\n");
            sb.Append("  ToUserID: ").Append(ToUserID).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Joined: ").Append(Joined).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateChatMessage);
        }

        /// <summary>
        /// Returns true if CreateChatMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateChatMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateChatMessage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FromUserId == input.FromUserId ||
                    (this.FromUserId != null &&
                    this.FromUserId.Equals(input.FromUserId))
                ) && 
                (
                    this.ToUserID == input.ToUserID ||
                    (this.ToUserID != null &&
                    this.ToUserID.Equals(input.ToUserID))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.Joined == input.Joined ||
                    (this.Joined != null &&
                    this.Joined.Equals(input.Joined))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FromUserId != null)
                {
                    hashCode = (hashCode * 59) + this.FromUserId.GetHashCode();
                }
                if (this.ToUserID != null)
                {
                    hashCode = (hashCode * 59) + this.ToUserID.GetHashCode();
                }
                if (this.Filename != null)
                {
                    hashCode = (hashCode * 59) + this.Filename.GetHashCode();
                }
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                if (this.Joined != null)
                {
                    hashCode = (hashCode * 59) + this.Joined.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // FromUserId (string) minLength
            if (this.FromUserId != null && this.FromUserId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FromUserId, length must be greater than 1.", new [] { "FromUserId" });
            }

            // ToUserID (string) minLength
            if (this.ToUserID != null && this.ToUserID.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ToUserID, length must be greater than 1.", new [] { "ToUserID" });
            }

            // Content (string) minLength
            if (this.Content != null && this.Content.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Content, length must be greater than 1.", new [] { "Content" });
            }

            yield break;
        }
    }

}
