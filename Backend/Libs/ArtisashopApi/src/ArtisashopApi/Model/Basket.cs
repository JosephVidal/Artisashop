/*
 * API Artisashop
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArtisashopApi.Client.OpenAPIDateConverter;

namespace ArtisashopApi.Model
{
    /// <summary>
    /// Basket
    /// </summary>
    [DataContract(Name = "Basket")]
    public partial class Basket : IEquatable<Basket>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DeliveryOpt
        /// </summary>
        [DataMember(Name = "deliveryOpt", IsRequired = true, EmitDefaultValue = true)]
        public DeliveryOption DeliveryOpt { get; set; }

        /// <summary>
        /// Gets or Sets CurrentState
        /// </summary>
        [DataMember(Name = "currentState", IsRequired = true, EmitDefaultValue = true)]
        public State CurrentState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Basket" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Basket() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Basket" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="accountId">accountId (required).</param>
        /// <param name="account">account (required).</param>
        /// <param name="productId">productId (required).</param>
        /// <param name="product">product (required).</param>
        /// <param name="quantity">quantity (required).</param>
        /// <param name="deliveryOpt">deliveryOpt (required).</param>
        /// <param name="currentState">currentState (required).</param>
        /// <param name="possibleState">possibleState.</param>
        public Basket(int id = default(int), string accountId = default(string), Account account = default(Account), int productId = default(int), Product product = default(Product), int quantity = default(int), DeliveryOption deliveryOpt = default(DeliveryOption), State currentState = default(State), List<State> possibleState = default(List<State>))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for Basket and cannot be null");
            }
            this.AccountId = accountId;
            // to ensure "account" is required (not null)
            if (account == null)
            {
                throw new ArgumentNullException("account is a required property for Basket and cannot be null");
            }
            this.Account = account;
            this.ProductId = productId;
            // to ensure "product" is required (not null)
            if (product == null)
            {
                throw new ArgumentNullException("product is a required property for Basket and cannot be null");
            }
            this.Product = product;
            this.Quantity = quantity;
            this.DeliveryOpt = deliveryOpt;
            this.CurrentState = currentState;
            this.Id = id;
            this.PossibleState = possibleState;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "accountId", IsRequired = true, EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name = "account", IsRequired = true, EmitDefaultValue = true)]
        public Account Account { get; set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name = "productId", IsRequired = true, EmitDefaultValue = true)]
        public int ProductId { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name = "product", IsRequired = true, EmitDefaultValue = true)]
        public Product Product { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public int Quantity { get; set; }

        /// <summary>
        /// Gets or Sets PossibleState
        /// </summary>
        [DataMember(Name = "possibleState", EmitDefaultValue = true)]
        public List<State> PossibleState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Basket {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  DeliveryOpt: ").Append(DeliveryOpt).Append("\n");
            sb.Append("  CurrentState: ").Append(CurrentState).Append("\n");
            sb.Append("  PossibleState: ").Append(PossibleState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Basket);
        }

        /// <summary>
        /// Returns true if Basket instances are equal
        /// </summary>
        /// <param name="input">Instance of Basket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Basket input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    this.ProductId.Equals(input.ProductId)
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.DeliveryOpt == input.DeliveryOpt ||
                    this.DeliveryOpt.Equals(input.DeliveryOpt)
                ) && 
                (
                    this.CurrentState == input.CurrentState ||
                    this.CurrentState.Equals(input.CurrentState)
                ) && 
                (
                    this.PossibleState == input.PossibleState ||
                    this.PossibleState != null &&
                    input.PossibleState != null &&
                    this.PossibleState.SequenceEqual(input.PossibleState)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.Account != null)
                {
                    hashCode = (hashCode * 59) + this.Account.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProductId.GetHashCode();
                if (this.Product != null)
                {
                    hashCode = (hashCode * 59) + this.Product.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                hashCode = (hashCode * 59) + this.DeliveryOpt.GetHashCode();
                hashCode = (hashCode * 59) + this.CurrentState.GetHashCode();
                if (this.PossibleState != null)
                {
                    hashCode = (hashCode * 59) + this.PossibleState.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // AccountId (string) minLength
            if (this.AccountId != null && this.AccountId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be greater than 1.", new [] { "AccountId" });
            }

            yield break;
        }
    }

}
