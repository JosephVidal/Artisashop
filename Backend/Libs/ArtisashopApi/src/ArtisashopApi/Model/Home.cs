/*
 * API Artisashop
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArtisashopApi.Client.OpenAPIDateConverter;

namespace ArtisashopApi.Model
{
    /// <summary>
    /// Home
    /// </summary>
    [DataContract(Name = "Home")]
    public partial class Home : IEquatable<Home>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Home" /> class.
        /// </summary>
        /// <param name="craftsmanNumber">craftsmanNumber.</param>
        /// <param name="productNumber">productNumber.</param>
        /// <param name="craftsmanSample">craftsmanSample.</param>
        /// <param name="productSample">productSample.</param>
        /// <param name="inscrit">inscrit.</param>
        /// <param name="sales">sales.</param>
        public Home(int craftsmanNumber = default(int), int productNumber = default(int), List<Account> craftsmanSample = default(List<Account>), List<Product> productSample = default(List<Product>), int inscrit = default(int), int sales = default(int))
        {
            this.CraftsmanNumber = craftsmanNumber;
            this.ProductNumber = productNumber;
            this.CraftsmanSample = craftsmanSample;
            this.ProductSample = productSample;
            this.Inscrit = inscrit;
            this.Sales = sales;
        }

        /// <summary>
        /// Gets or Sets CraftsmanNumber
        /// </summary>
        [DataMember(Name = "craftsmanNumber", EmitDefaultValue = false)]
        public int CraftsmanNumber { get; set; }

        /// <summary>
        /// Gets or Sets ProductNumber
        /// </summary>
        [DataMember(Name = "productNumber", EmitDefaultValue = false)]
        public int ProductNumber { get; set; }

        /// <summary>
        /// Gets or Sets CraftsmanSample
        /// </summary>
        [DataMember(Name = "craftsmanSample", EmitDefaultValue = true)]
        public List<Account> CraftsmanSample { get; set; }

        /// <summary>
        /// Gets or Sets ProductSample
        /// </summary>
        [DataMember(Name = "productSample", EmitDefaultValue = true)]
        public List<Product> ProductSample { get; set; }

        /// <summary>
        /// Gets or Sets Inscrit
        /// </summary>
        [DataMember(Name = "inscrit", EmitDefaultValue = false)]
        public int Inscrit { get; set; }

        /// <summary>
        /// Gets or Sets Sales
        /// </summary>
        [DataMember(Name = "sales", EmitDefaultValue = false)]
        public int Sales { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Home {\n");
            sb.Append("  CraftsmanNumber: ").Append(CraftsmanNumber).Append("\n");
            sb.Append("  ProductNumber: ").Append(ProductNumber).Append("\n");
            sb.Append("  CraftsmanSample: ").Append(CraftsmanSample).Append("\n");
            sb.Append("  ProductSample: ").Append(ProductSample).Append("\n");
            sb.Append("  Inscrit: ").Append(Inscrit).Append("\n");
            sb.Append("  Sales: ").Append(Sales).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Home);
        }

        /// <summary>
        /// Returns true if Home instances are equal
        /// </summary>
        /// <param name="input">Instance of Home to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Home input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CraftsmanNumber == input.CraftsmanNumber ||
                    this.CraftsmanNumber.Equals(input.CraftsmanNumber)
                ) && 
                (
                    this.ProductNumber == input.ProductNumber ||
                    this.ProductNumber.Equals(input.ProductNumber)
                ) && 
                (
                    this.CraftsmanSample == input.CraftsmanSample ||
                    this.CraftsmanSample != null &&
                    input.CraftsmanSample != null &&
                    this.CraftsmanSample.SequenceEqual(input.CraftsmanSample)
                ) && 
                (
                    this.ProductSample == input.ProductSample ||
                    this.ProductSample != null &&
                    input.ProductSample != null &&
                    this.ProductSample.SequenceEqual(input.ProductSample)
                ) && 
                (
                    this.Inscrit == input.Inscrit ||
                    this.Inscrit.Equals(input.Inscrit)
                ) && 
                (
                    this.Sales == input.Sales ||
                    this.Sales.Equals(input.Sales)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CraftsmanNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.ProductNumber.GetHashCode();
                if (this.CraftsmanSample != null)
                {
                    hashCode = (hashCode * 59) + this.CraftsmanSample.GetHashCode();
                }
                if (this.ProductSample != null)
                {
                    hashCode = (hashCode * 59) + this.ProductSample.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Inscrit.GetHashCode();
                hashCode = (hashCode * 59) + this.Sales.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
