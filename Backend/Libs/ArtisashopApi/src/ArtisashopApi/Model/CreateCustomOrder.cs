/*
 * API Artisashop
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ArtisashopApi.Client.OpenAPIDateConverter;

namespace ArtisashopApi.Model
{
    /// <summary>
    /// CreateCustomOrder
    /// </summary>
    [DataContract(Name = "CreateCustomOrder")]
    public partial class CreateCustomOrder : IEquatable<CreateCustomOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCustomOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateCustomOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCustomOrder" /> class.
        /// </summary>
        /// <param name="craftsmanId">craftsmanId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="desc">desc (required).</param>
        /// <param name="quantity">quantity (required).</param>
        public CreateCustomOrder(string craftsmanId = default(string), string name = default(string), string desc = default(string), int quantity = default(int))
        {
            // to ensure "craftsmanId" is required (not null)
            if (craftsmanId == null)
            {
                throw new ArgumentNullException("craftsmanId is a required property for CreateCustomOrder and cannot be null");
            }
            this.CraftsmanId = craftsmanId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateCustomOrder and cannot be null");
            }
            this.Name = name;
            // to ensure "desc" is required (not null)
            if (desc == null)
            {
                throw new ArgumentNullException("desc is a required property for CreateCustomOrder and cannot be null");
            }
            this.Desc = desc;
            this.Quantity = quantity;
        }

        /// <summary>
        /// Gets or Sets CraftsmanId
        /// </summary>
        [DataMember(Name = "craftsmanId", IsRequired = true, EmitDefaultValue = true)]
        public string CraftsmanId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Desc
        /// </summary>
        [DataMember(Name = "desc", IsRequired = true, EmitDefaultValue = true)]
        public string Desc { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public int Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCustomOrder {\n");
            sb.Append("  CraftsmanId: ").Append(CraftsmanId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Desc: ").Append(Desc).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateCustomOrder);
        }

        /// <summary>
        /// Returns true if CreateCustomOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateCustomOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCustomOrder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CraftsmanId == input.CraftsmanId ||
                    (this.CraftsmanId != null &&
                    this.CraftsmanId.Equals(input.CraftsmanId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Desc == input.Desc ||
                    (this.Desc != null &&
                    this.Desc.Equals(input.Desc))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CraftsmanId != null)
                {
                    hashCode = (hashCode * 59) + this.CraftsmanId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Desc != null)
                {
                    hashCode = (hashCode * 59) + this.Desc.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // CraftsmanId (string) minLength
            if (this.CraftsmanId != null && this.CraftsmanId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CraftsmanId, length must be greater than 1.", new [] { "CraftsmanId" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Desc (string) minLength
            if (this.Desc != null && this.Desc.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Desc, length must be greater than 1.", new [] { "Desc" });
            }

            yield break;
        }
    }

}
