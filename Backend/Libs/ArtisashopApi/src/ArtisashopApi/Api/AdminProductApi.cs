/*
 * API Artisashop
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ArtisashopApi.Client;
using ArtisashopApi.Model;

namespace ArtisashopApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminProductApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="range"> (optional, default to &quot;&quot;)</param>
        /// <param name="sort"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> ApiAdminProductGet(string? filter = default(string?), string? range = default(string?), string? sort = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="range"> (optional, default to &quot;&quot;)</param>
        /// <param name="sort"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> ApiAdminProductGetWithHttpInfo(string? filter = default(string?), string? range = default(string?), string? sort = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Product</returns>
        Product ApiAdminProductIdDelete(int id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ApiAdminProductIdDeleteWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Product</returns>
        Product ApiAdminProductIdGet(int id, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ApiAdminProductIdGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="product"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Product</returns>
        Product ApiAdminProductIdPut(int id, Product? product = default(Product?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="product"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ApiAdminProductIdPutWithHttpInfo(int id, Product? product = default(Product?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Product</returns>
        Product ApiAdminProductPost(Product? product = default(Product?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ApiAdminProductPostWithHttpInfo(Product? product = default(Product?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminProductApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="range"> (optional, default to &quot;&quot;)</param>
        /// <param name="sort"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> ApiAdminProductGetAsync(string? filter = default(string?), string? range = default(string?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="range"> (optional, default to &quot;&quot;)</param>
        /// <param name="sort"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> ApiAdminProductGetWithHttpInfoAsync(string? filter = default(string?), string? range = default(string?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ApiAdminProductIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ApiAdminProductIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ApiAdminProductIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ApiAdminProductIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="product"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ApiAdminProductIdPutAsync(int id, Product? product = default(Product?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="product"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ApiAdminProductIdPutWithHttpInfoAsync(int id, Product? product = default(Product?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ApiAdminProductPostAsync(Product? product = default(Product?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ApiAdminProductPostWithHttpInfoAsync(Product? product = default(Product?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminProductApi : IAdminProductApiSync, IAdminProductApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AdminProductApi : IAdminProductApi
    {
        private ArtisashopApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminProductApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdminProductApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminProductApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdminProductApi(string basePath)
        {
            this.Configuration = ArtisashopApi.Client.Configuration.MergeConfigurations(
                ArtisashopApi.Client.GlobalConfiguration.Instance,
                new ArtisashopApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ArtisashopApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ArtisashopApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ArtisashopApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminProductApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AdminProductApi(ArtisashopApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ArtisashopApi.Client.Configuration.MergeConfigurations(
                ArtisashopApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ArtisashopApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ArtisashopApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ArtisashopApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminProductApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AdminProductApi(ArtisashopApi.Client.ISynchronousClient client, ArtisashopApi.Client.IAsynchronousClient asyncClient, ArtisashopApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ArtisashopApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ArtisashopApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ArtisashopApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ArtisashopApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ArtisashopApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="range"> (optional, default to &quot;&quot;)</param>
        /// <param name="sort"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> ApiAdminProductGet(string? filter = default(string?), string? range = default(string?), string? sort = default(string?), int operationIndex = 0)
        {
            ArtisashopApi.Client.ApiResponse<List<Product>> localVarResponse = ApiAdminProductGetWithHttpInfo(filter, range, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="range"> (optional, default to &quot;&quot;)</param>
        /// <param name="sort"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public ArtisashopApi.Client.ApiResponse<List<Product>> ApiAdminProductGetWithHttpInfo(string? filter = default(string?), string? range = default(string?), string? sort = default(string?), int operationIndex = 0)
        {
            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArtisashopApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (range != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArtisashopApi.Client.ClientUtils.ParameterToMultiMap("", "range", range));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArtisashopApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "AdminProductApi.ApiAdminProductGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Product>>("/api/admin/product", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAdminProductGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="range"> (optional, default to &quot;&quot;)</param>
        /// <param name="sort"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> ApiAdminProductGetAsync(string? filter = default(string?), string? range = default(string?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArtisashopApi.Client.ApiResponse<List<Product>> localVarResponse = await ApiAdminProductGetWithHttpInfoAsync(filter, range, sort, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional, default to &quot;&quot;)</param>
        /// <param name="range"> (optional, default to &quot;&quot;)</param>
        /// <param name="sort"> (optional, default to &quot;&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<ArtisashopApi.Client.ApiResponse<List<Product>>> ApiAdminProductGetWithHttpInfoAsync(string? filter = default(string?), string? range = default(string?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArtisashopApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (range != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArtisashopApi.Client.ClientUtils.ParameterToMultiMap("", "range", range));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArtisashopApi.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "AdminProductApi.ApiAdminProductGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Product>>("/api/admin/product", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAdminProductGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Product</returns>
        public Product ApiAdminProductIdDelete(int id, int operationIndex = 0)
        {
            ArtisashopApi.Client.ApiResponse<Product> localVarResponse = ApiAdminProductIdDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Product</returns>
        public ArtisashopApi.Client.ApiResponse<Product> ApiAdminProductIdDeleteWithHttpInfo(int id, int operationIndex = 0)
        {
            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ArtisashopApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AdminProductApi.ApiAdminProductIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Product>("/api/admin/product/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAdminProductIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ApiAdminProductIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArtisashopApi.Client.ApiResponse<Product> localVarResponse = await ApiAdminProductIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ArtisashopApi.Client.ApiResponse<Product>> ApiAdminProductIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ArtisashopApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AdminProductApi.ApiAdminProductIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Product>("/api/admin/product/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAdminProductIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Product</returns>
        public Product ApiAdminProductIdGet(int id, int operationIndex = 0)
        {
            ArtisashopApi.Client.ApiResponse<Product> localVarResponse = ApiAdminProductIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Product</returns>
        public ArtisashopApi.Client.ApiResponse<Product> ApiAdminProductIdGetWithHttpInfo(int id, int operationIndex = 0)
        {
            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ArtisashopApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AdminProductApi.ApiAdminProductIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Product>("/api/admin/product/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAdminProductIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ApiAdminProductIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArtisashopApi.Client.ApiResponse<Product> localVarResponse = await ApiAdminProductIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ArtisashopApi.Client.ApiResponse<Product>> ApiAdminProductIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ArtisashopApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AdminProductApi.ApiAdminProductIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Product>("/api/admin/product/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAdminProductIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="product"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Product</returns>
        public Product ApiAdminProductIdPut(int id, Product? product = default(Product?), int operationIndex = 0)
        {
            ArtisashopApi.Client.ApiResponse<Product> localVarResponse = ApiAdminProductIdPutWithHttpInfo(id, product);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="product"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Product</returns>
        public ArtisashopApi.Client.ApiResponse<Product> ApiAdminProductIdPutWithHttpInfo(int id, Product? product = default(Product?), int operationIndex = 0)
        {
            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ArtisashopApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = product;

            localVarRequestOptions.Operation = "AdminProductApi.ApiAdminProductIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Product>("/api/admin/product/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAdminProductIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="product"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ApiAdminProductIdPutAsync(int id, Product? product = default(Product?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArtisashopApi.Client.ApiResponse<Product> localVarResponse = await ApiAdminProductIdPutWithHttpInfoAsync(id, product, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="product"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ArtisashopApi.Client.ApiResponse<Product>> ApiAdminProductIdPutWithHttpInfoAsync(int id, Product? product = default(Product?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ArtisashopApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = product;

            localVarRequestOptions.Operation = "AdminProductApi.ApiAdminProductIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Product>("/api/admin/product/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAdminProductIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Product</returns>
        public Product ApiAdminProductPost(Product? product = default(Product?), int operationIndex = 0)
        {
            ArtisashopApi.Client.ApiResponse<Product> localVarResponse = ApiAdminProductPostWithHttpInfo(product);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Product</returns>
        public ArtisashopApi.Client.ApiResponse<Product> ApiAdminProductPostWithHttpInfo(Product? product = default(Product?), int operationIndex = 0)
        {
            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = product;

            localVarRequestOptions.Operation = "AdminProductApi.ApiAdminProductPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Product>("/api/admin/product", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAdminProductPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ApiAdminProductPostAsync(Product? product = default(Product?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArtisashopApi.Client.ApiResponse<Product> localVarResponse = await ApiAdminProductPostWithHttpInfoAsync(product, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ArtisashopApi.Client.ApiResponse<Product>> ApiAdminProductPostWithHttpInfoAsync(Product? product = default(Product?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = product;

            localVarRequestOptions.Operation = "AdminProductApi.ApiAdminProductPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Product>("/api/admin/product", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAdminProductPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
