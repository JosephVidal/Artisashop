/*
 * API Artisashop
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ArtisashopApi.Client;
using ArtisashopApi.Model;

namespace ArtisashopApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomOrderApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketId"></param>
        /// <param name="state"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>State</returns>
        State ApiCustomOrderBasketIdChangeStatusPatch(int basketId, State? state = default(State?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketId"></param>
        /// <param name="state"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of State</returns>
        ApiResponse<State> ApiCustomOrderBasketIdChangeStatusPatchWithHttpInfo(int basketId, State? state = default(State?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="craftsmanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Account</returns>
        Account ApiCustomOrderCraftsmanIdGet(string craftsmanId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="craftsmanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Account</returns>
        ApiResponse<Account> ApiCustomOrderCraftsmanIdGetWithHttpInfo(string craftsmanId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OrderList&gt;</returns>
        List<OrderList> ApiCustomOrderListGet(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OrderList&gt;</returns>
        ApiResponse<List<OrderList>> ApiCustomOrderListGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        Basket ApiCustomOrderPatch(UpdateCustomOrder? updateCustomOrder = default(UpdateCustomOrder?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        ApiResponse<Basket> ApiCustomOrderPatchWithHttpInfo(UpdateCustomOrder? updateCustomOrder = default(UpdateCustomOrder?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        Basket ApiCustomOrderPost(CreateCustomOrder? createCustomOrder = default(CreateCustomOrder?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        ApiResponse<Basket> ApiCustomOrderPostWithHttpInfo(CreateCustomOrder? createCustomOrder = default(CreateCustomOrder?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        Basket ApiCustomOrderUpdateBasketIdGet(int basketId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        ApiResponse<Basket> ApiCustomOrderUpdateBasketIdGetWithHttpInfo(int basketId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomOrderApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketId"></param>
        /// <param name="state"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of State</returns>
        System.Threading.Tasks.Task<State> ApiCustomOrderBasketIdChangeStatusPatchAsync(int basketId, State? state = default(State?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketId"></param>
        /// <param name="state"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (State)</returns>
        System.Threading.Tasks.Task<ApiResponse<State>> ApiCustomOrderBasketIdChangeStatusPatchWithHttpInfoAsync(int basketId, State? state = default(State?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="craftsmanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Account</returns>
        System.Threading.Tasks.Task<Account> ApiCustomOrderCraftsmanIdGetAsync(string craftsmanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="craftsmanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Account)</returns>
        System.Threading.Tasks.Task<ApiResponse<Account>> ApiCustomOrderCraftsmanIdGetWithHttpInfoAsync(string craftsmanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OrderList&gt;</returns>
        System.Threading.Tasks.Task<List<OrderList>> ApiCustomOrderListGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OrderList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderList>>> ApiCustomOrderListGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        System.Threading.Tasks.Task<Basket> ApiCustomOrderPatchAsync(UpdateCustomOrder? updateCustomOrder = default(UpdateCustomOrder?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Basket>> ApiCustomOrderPatchWithHttpInfoAsync(UpdateCustomOrder? updateCustomOrder = default(UpdateCustomOrder?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        System.Threading.Tasks.Task<Basket> ApiCustomOrderPostAsync(CreateCustomOrder? createCustomOrder = default(CreateCustomOrder?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Basket>> ApiCustomOrderPostWithHttpInfoAsync(CreateCustomOrder? createCustomOrder = default(CreateCustomOrder?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        System.Threading.Tasks.Task<Basket> ApiCustomOrderUpdateBasketIdGetAsync(int basketId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Basket>> ApiCustomOrderUpdateBasketIdGetWithHttpInfoAsync(int basketId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomOrderApi : ICustomOrderApiSync, ICustomOrderApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomOrderApi : ICustomOrderApi
    {
        private ArtisashopApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomOrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomOrderApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomOrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomOrderApi(string basePath)
        {
            this.Configuration = ArtisashopApi.Client.Configuration.MergeConfigurations(
                ArtisashopApi.Client.GlobalConfiguration.Instance,
                new ArtisashopApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ArtisashopApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ArtisashopApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ArtisashopApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomOrderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomOrderApi(ArtisashopApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ArtisashopApi.Client.Configuration.MergeConfigurations(
                ArtisashopApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ArtisashopApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ArtisashopApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ArtisashopApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomOrderApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CustomOrderApi(ArtisashopApi.Client.ISynchronousClient client, ArtisashopApi.Client.IAsynchronousClient asyncClient, ArtisashopApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ArtisashopApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ArtisashopApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ArtisashopApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ArtisashopApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ArtisashopApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketId"></param>
        /// <param name="state"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>State</returns>
        public State ApiCustomOrderBasketIdChangeStatusPatch(int basketId, State? state = default(State?), int operationIndex = 0)
        {
            ArtisashopApi.Client.ApiResponse<State> localVarResponse = ApiCustomOrderBasketIdChangeStatusPatchWithHttpInfo(basketId, state);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketId"></param>
        /// <param name="state"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of State</returns>
        public ArtisashopApi.Client.ApiResponse<State> ApiCustomOrderBasketIdChangeStatusPatchWithHttpInfo(int basketId, State? state = default(State?), int operationIndex = 0)
        {
            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("basketId", ArtisashopApi.Client.ClientUtils.ParameterToString(basketId)); // path parameter
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArtisashopApi.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }

            localVarRequestOptions.Operation = "CustomOrderApi.ApiCustomOrderBasketIdChangeStatusPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<State>("/api/custom-order/{basketId}/changeStatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomOrderBasketIdChangeStatusPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketId"></param>
        /// <param name="state"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of State</returns>
        public async System.Threading.Tasks.Task<State> ApiCustomOrderBasketIdChangeStatusPatchAsync(int basketId, State? state = default(State?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArtisashopApi.Client.ApiResponse<State> localVarResponse = await ApiCustomOrderBasketIdChangeStatusPatchWithHttpInfoAsync(basketId, state, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketId"></param>
        /// <param name="state"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (State)</returns>
        public async System.Threading.Tasks.Task<ArtisashopApi.Client.ApiResponse<State>> ApiCustomOrderBasketIdChangeStatusPatchWithHttpInfoAsync(int basketId, State? state = default(State?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("basketId", ArtisashopApi.Client.ClientUtils.ParameterToString(basketId)); // path parameter
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArtisashopApi.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }

            localVarRequestOptions.Operation = "CustomOrderApi.ApiCustomOrderBasketIdChangeStatusPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<State>("/api/custom-order/{basketId}/changeStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomOrderBasketIdChangeStatusPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="craftsmanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Account</returns>
        public Account ApiCustomOrderCraftsmanIdGet(string craftsmanId, int operationIndex = 0)
        {
            ArtisashopApi.Client.ApiResponse<Account> localVarResponse = ApiCustomOrderCraftsmanIdGetWithHttpInfo(craftsmanId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="craftsmanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Account</returns>
        public ArtisashopApi.Client.ApiResponse<Account> ApiCustomOrderCraftsmanIdGetWithHttpInfo(string craftsmanId, int operationIndex = 0)
        {
            // verify the required parameter 'craftsmanId' is set
            if (craftsmanId == null)
            {
                throw new ArtisashopApi.Client.ApiException(400, "Missing required parameter 'craftsmanId' when calling CustomOrderApi->ApiCustomOrderCraftsmanIdGet");
            }

            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("craftsmanId", ArtisashopApi.Client.ClientUtils.ParameterToString(craftsmanId)); // path parameter

            localVarRequestOptions.Operation = "CustomOrderApi.ApiCustomOrderCraftsmanIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Account>("/api/custom-order/{craftsmanId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomOrderCraftsmanIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="craftsmanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Account</returns>
        public async System.Threading.Tasks.Task<Account> ApiCustomOrderCraftsmanIdGetAsync(string craftsmanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArtisashopApi.Client.ApiResponse<Account> localVarResponse = await ApiCustomOrderCraftsmanIdGetWithHttpInfoAsync(craftsmanId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="craftsmanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Account)</returns>
        public async System.Threading.Tasks.Task<ArtisashopApi.Client.ApiResponse<Account>> ApiCustomOrderCraftsmanIdGetWithHttpInfoAsync(string craftsmanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'craftsmanId' is set
            if (craftsmanId == null)
            {
                throw new ArtisashopApi.Client.ApiException(400, "Missing required parameter 'craftsmanId' when calling CustomOrderApi->ApiCustomOrderCraftsmanIdGet");
            }


            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("craftsmanId", ArtisashopApi.Client.ClientUtils.ParameterToString(craftsmanId)); // path parameter

            localVarRequestOptions.Operation = "CustomOrderApi.ApiCustomOrderCraftsmanIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Account>("/api/custom-order/{craftsmanId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomOrderCraftsmanIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OrderList&gt;</returns>
        public List<OrderList> ApiCustomOrderListGet(int operationIndex = 0)
        {
            ArtisashopApi.Client.ApiResponse<List<OrderList>> localVarResponse = ApiCustomOrderListGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OrderList&gt;</returns>
        public ArtisashopApi.Client.ApiResponse<List<OrderList>> ApiCustomOrderListGetWithHttpInfo(int operationIndex = 0)
        {
            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "CustomOrderApi.ApiCustomOrderListGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OrderList>>("/api/custom-order/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomOrderListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OrderList&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderList>> ApiCustomOrderListGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArtisashopApi.Client.ApiResponse<List<OrderList>> localVarResponse = await ApiCustomOrderListGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OrderList&gt;)</returns>
        public async System.Threading.Tasks.Task<ArtisashopApi.Client.ApiResponse<List<OrderList>>> ApiCustomOrderListGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "CustomOrderApi.ApiCustomOrderListGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OrderList>>("/api/custom-order/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomOrderListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        public Basket ApiCustomOrderPatch(UpdateCustomOrder? updateCustomOrder = default(UpdateCustomOrder?), int operationIndex = 0)
        {
            ArtisashopApi.Client.ApiResponse<Basket> localVarResponse = ApiCustomOrderPatchWithHttpInfo(updateCustomOrder);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        public ArtisashopApi.Client.ApiResponse<Basket> ApiCustomOrderPatchWithHttpInfo(UpdateCustomOrder? updateCustomOrder = default(UpdateCustomOrder?), int operationIndex = 0)
        {
            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateCustomOrder;

            localVarRequestOptions.Operation = "CustomOrderApi.ApiCustomOrderPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Basket>("/api/custom-order", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomOrderPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        public async System.Threading.Tasks.Task<Basket> ApiCustomOrderPatchAsync(UpdateCustomOrder? updateCustomOrder = default(UpdateCustomOrder?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArtisashopApi.Client.ApiResponse<Basket> localVarResponse = await ApiCustomOrderPatchWithHttpInfoAsync(updateCustomOrder, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        public async System.Threading.Tasks.Task<ArtisashopApi.Client.ApiResponse<Basket>> ApiCustomOrderPatchWithHttpInfoAsync(UpdateCustomOrder? updateCustomOrder = default(UpdateCustomOrder?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateCustomOrder;

            localVarRequestOptions.Operation = "CustomOrderApi.ApiCustomOrderPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Basket>("/api/custom-order", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomOrderPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        public Basket ApiCustomOrderPost(CreateCustomOrder? createCustomOrder = default(CreateCustomOrder?), int operationIndex = 0)
        {
            ArtisashopApi.Client.ApiResponse<Basket> localVarResponse = ApiCustomOrderPostWithHttpInfo(createCustomOrder);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        public ArtisashopApi.Client.ApiResponse<Basket> ApiCustomOrderPostWithHttpInfo(CreateCustomOrder? createCustomOrder = default(CreateCustomOrder?), int operationIndex = 0)
        {
            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomOrder;

            localVarRequestOptions.Operation = "CustomOrderApi.ApiCustomOrderPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Basket>("/api/custom-order", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomOrderPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        public async System.Threading.Tasks.Task<Basket> ApiCustomOrderPostAsync(CreateCustomOrder? createCustomOrder = default(CreateCustomOrder?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArtisashopApi.Client.ApiResponse<Basket> localVarResponse = await ApiCustomOrderPostWithHttpInfoAsync(createCustomOrder, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomOrder"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        public async System.Threading.Tasks.Task<ArtisashopApi.Client.ApiResponse<Basket>> ApiCustomOrderPostWithHttpInfoAsync(CreateCustomOrder? createCustomOrder = default(CreateCustomOrder?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomOrder;

            localVarRequestOptions.Operation = "CustomOrderApi.ApiCustomOrderPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Basket>("/api/custom-order", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomOrderPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        public Basket ApiCustomOrderUpdateBasketIdGet(int basketId, int operationIndex = 0)
        {
            ArtisashopApi.Client.ApiResponse<Basket> localVarResponse = ApiCustomOrderUpdateBasketIdGetWithHttpInfo(basketId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        public ArtisashopApi.Client.ApiResponse<Basket> ApiCustomOrderUpdateBasketIdGetWithHttpInfo(int basketId, int operationIndex = 0)
        {
            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("basketId", ArtisashopApi.Client.ClientUtils.ParameterToString(basketId)); // path parameter

            localVarRequestOptions.Operation = "CustomOrderApi.ApiCustomOrderUpdateBasketIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Basket>("/api/custom-order/update/{basketId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomOrderUpdateBasketIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        public async System.Threading.Tasks.Task<Basket> ApiCustomOrderUpdateBasketIdGetAsync(int basketId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArtisashopApi.Client.ApiResponse<Basket> localVarResponse = await ApiCustomOrderUpdateBasketIdGetWithHttpInfoAsync(basketId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        public async System.Threading.Tasks.Task<ArtisashopApi.Client.ApiResponse<Basket>> ApiCustomOrderUpdateBasketIdGetWithHttpInfoAsync(int basketId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("basketId", ArtisashopApi.Client.ClientUtils.ParameterToString(basketId)); // path parameter

            localVarRequestOptions.Operation = "CustomOrderApi.ApiCustomOrderUpdateBasketIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Basket>("/api/custom-order/update/{basketId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomOrderUpdateBasketIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
