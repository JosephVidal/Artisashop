/*
 * API Artisashop
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ArtisashopApi.Client;
using ArtisashopApi.Model;

namespace ArtisashopApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChatApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="users"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ChatMessage&gt;</returns>
        List<ChatMessage> ApiChatHistoryGet(List<string>? users = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="users"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ChatMessage&gt;</returns>
        ApiResponse<List<ChatMessage>> ApiChatHistoryGetWithHttpInfo(List<string>? users = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ChatPreview&gt;</returns>
        List<ChatPreview> ApiChatListGet(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ChatPreview&gt;</returns>
        ApiResponse<List<ChatPreview>> ApiChatListGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ApiChatMsgIdDelete(int msgId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiChatMsgIdDeleteWithHttpInfo(int msgId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatMessage</returns>
        ChatMessage ApiChatMsgIdGet(int msgId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatMessage</returns>
        ApiResponse<ChatMessage> ApiChatMsgIdGetWithHttpInfo(int msgId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"> (optional)</param>
        /// <param name="content"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatMessage</returns>
        ChatMessage ApiChatPatch(int? msgId = default(int?), string? content = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"> (optional)</param>
        /// <param name="content"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatMessage</returns>
        ApiResponse<ChatMessage> ApiChatPatchWithHttpInfo(int? msgId = default(int?), string? content = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createChatMessage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatMessage</returns>
        ChatMessage ApiChatPost(CreateChatMessage? createChatMessage = default(CreateChatMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createChatMessage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatMessage</returns>
        ApiResponse<ChatMessage> ApiChatPostWithHttpInfo(CreateChatMessage? createChatMessage = default(CreateChatMessage?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChatApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="users"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChatMessage&gt;</returns>
        System.Threading.Tasks.Task<List<ChatMessage>> ApiChatHistoryGetAsync(List<string>? users = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="users"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChatMessage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChatMessage>>> ApiChatHistoryGetWithHttpInfoAsync(List<string>? users = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChatPreview&gt;</returns>
        System.Threading.Tasks.Task<List<ChatPreview>> ApiChatListGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChatPreview&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChatPreview>>> ApiChatListGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiChatMsgIdDeleteAsync(int msgId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiChatMsgIdDeleteWithHttpInfoAsync(int msgId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatMessage</returns>
        System.Threading.Tasks.Task<ChatMessage> ApiChatMsgIdGetAsync(int msgId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatMessage>> ApiChatMsgIdGetWithHttpInfoAsync(int msgId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"> (optional)</param>
        /// <param name="content"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatMessage</returns>
        System.Threading.Tasks.Task<ChatMessage> ApiChatPatchAsync(int? msgId = default(int?), string? content = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"> (optional)</param>
        /// <param name="content"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatMessage>> ApiChatPatchWithHttpInfoAsync(int? msgId = default(int?), string? content = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createChatMessage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatMessage</returns>
        System.Threading.Tasks.Task<ChatMessage> ApiChatPostAsync(CreateChatMessage? createChatMessage = default(CreateChatMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createChatMessage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChatMessage>> ApiChatPostWithHttpInfoAsync(CreateChatMessage? createChatMessage = default(CreateChatMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChatApi : IChatApiSync, IChatApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChatApi : IChatApi
    {
        private ArtisashopApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChatApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChatApi(string basePath)
        {
            this.Configuration = ArtisashopApi.Client.Configuration.MergeConfigurations(
                ArtisashopApi.Client.GlobalConfiguration.Instance,
                new ArtisashopApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ArtisashopApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ArtisashopApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ArtisashopApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChatApi(ArtisashopApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ArtisashopApi.Client.Configuration.MergeConfigurations(
                ArtisashopApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ArtisashopApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ArtisashopApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ArtisashopApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChatApi(ArtisashopApi.Client.ISynchronousClient client, ArtisashopApi.Client.IAsynchronousClient asyncClient, ArtisashopApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ArtisashopApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ArtisashopApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ArtisashopApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ArtisashopApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ArtisashopApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="users"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ChatMessage&gt;</returns>
        public List<ChatMessage> ApiChatHistoryGet(List<string>? users = default(List<string>?), int operationIndex = 0)
        {
            ArtisashopApi.Client.ApiResponse<List<ChatMessage>> localVarResponse = ApiChatHistoryGetWithHttpInfo(users);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="users"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ChatMessage&gt;</returns>
        public ArtisashopApi.Client.ApiResponse<List<ChatMessage>> ApiChatHistoryGetWithHttpInfo(List<string>? users = default(List<string>?), int operationIndex = 0)
        {
            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (users != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArtisashopApi.Client.ClientUtils.ParameterToMultiMap("multi", "users", users));
            }

            localVarRequestOptions.Operation = "ChatApi.ApiChatHistoryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ChatMessage>>("/api/chat/history", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChatHistoryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="users"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChatMessage&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChatMessage>> ApiChatHistoryGetAsync(List<string>? users = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArtisashopApi.Client.ApiResponse<List<ChatMessage>> localVarResponse = await ApiChatHistoryGetWithHttpInfoAsync(users, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="users"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChatMessage&gt;)</returns>
        public async System.Threading.Tasks.Task<ArtisashopApi.Client.ApiResponse<List<ChatMessage>>> ApiChatHistoryGetWithHttpInfoAsync(List<string>? users = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (users != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArtisashopApi.Client.ClientUtils.ParameterToMultiMap("multi", "users", users));
            }

            localVarRequestOptions.Operation = "ChatApi.ApiChatHistoryGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ChatMessage>>("/api/chat/history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChatHistoryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ChatPreview&gt;</returns>
        public List<ChatPreview> ApiChatListGet(int operationIndex = 0)
        {
            ArtisashopApi.Client.ApiResponse<List<ChatPreview>> localVarResponse = ApiChatListGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ChatPreview&gt;</returns>
        public ArtisashopApi.Client.ApiResponse<List<ChatPreview>> ApiChatListGetWithHttpInfo(int operationIndex = 0)
        {
            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ChatApi.ApiChatListGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ChatPreview>>("/api/chat/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChatListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChatPreview&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChatPreview>> ApiChatListGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArtisashopApi.Client.ApiResponse<List<ChatPreview>> localVarResponse = await ApiChatListGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChatPreview&gt;)</returns>
        public async System.Threading.Tasks.Task<ArtisashopApi.Client.ApiResponse<List<ChatPreview>>> ApiChatListGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ChatApi.ApiChatListGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ChatPreview>>("/api/chat/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChatListGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ApiChatMsgIdDelete(int msgId, int operationIndex = 0)
        {
            ArtisashopApi.Client.ApiResponse<string> localVarResponse = ApiChatMsgIdDeleteWithHttpInfo(msgId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public ArtisashopApi.Client.ApiResponse<string> ApiChatMsgIdDeleteWithHttpInfo(int msgId, int operationIndex = 0)
        {
            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("msgId", ArtisashopApi.Client.ClientUtils.ParameterToString(msgId)); // path parameter

            localVarRequestOptions.Operation = "ChatApi.ApiChatMsgIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<string>("/api/chat/{msgId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChatMsgIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiChatMsgIdDeleteAsync(int msgId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArtisashopApi.Client.ApiResponse<string> localVarResponse = await ApiChatMsgIdDeleteWithHttpInfoAsync(msgId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ArtisashopApi.Client.ApiResponse<string>> ApiChatMsgIdDeleteWithHttpInfoAsync(int msgId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("msgId", ArtisashopApi.Client.ClientUtils.ParameterToString(msgId)); // path parameter

            localVarRequestOptions.Operation = "ChatApi.ApiChatMsgIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<string>("/api/chat/{msgId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChatMsgIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatMessage</returns>
        public ChatMessage ApiChatMsgIdGet(int msgId, int operationIndex = 0)
        {
            ArtisashopApi.Client.ApiResponse<ChatMessage> localVarResponse = ApiChatMsgIdGetWithHttpInfo(msgId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatMessage</returns>
        public ArtisashopApi.Client.ApiResponse<ChatMessage> ApiChatMsgIdGetWithHttpInfo(int msgId, int operationIndex = 0)
        {
            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("msgId", ArtisashopApi.Client.ClientUtils.ParameterToString(msgId)); // path parameter

            localVarRequestOptions.Operation = "ChatApi.ApiChatMsgIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ChatMessage>("/api/chat/{msgId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChatMsgIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatMessage</returns>
        public async System.Threading.Tasks.Task<ChatMessage> ApiChatMsgIdGetAsync(int msgId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArtisashopApi.Client.ApiResponse<ChatMessage> localVarResponse = await ApiChatMsgIdGetWithHttpInfoAsync(msgId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatMessage)</returns>
        public async System.Threading.Tasks.Task<ArtisashopApi.Client.ApiResponse<ChatMessage>> ApiChatMsgIdGetWithHttpInfoAsync(int msgId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("msgId", ArtisashopApi.Client.ClientUtils.ParameterToString(msgId)); // path parameter

            localVarRequestOptions.Operation = "ChatApi.ApiChatMsgIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ChatMessage>("/api/chat/{msgId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChatMsgIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"> (optional)</param>
        /// <param name="content"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatMessage</returns>
        public ChatMessage ApiChatPatch(int? msgId = default(int?), string? content = default(string?), int operationIndex = 0)
        {
            ArtisashopApi.Client.ApiResponse<ChatMessage> localVarResponse = ApiChatPatchWithHttpInfo(msgId, content);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"> (optional)</param>
        /// <param name="content"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatMessage</returns>
        public ArtisashopApi.Client.ApiResponse<ChatMessage> ApiChatPatchWithHttpInfo(int? msgId = default(int?), string? content = default(string?), int operationIndex = 0)
        {
            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (msgId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArtisashopApi.Client.ClientUtils.ParameterToMultiMap("", "msgId", msgId));
            }
            if (content != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArtisashopApi.Client.ClientUtils.ParameterToMultiMap("", "content", content));
            }

            localVarRequestOptions.Operation = "ChatApi.ApiChatPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ChatMessage>("/api/chat", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChatPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"> (optional)</param>
        /// <param name="content"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatMessage</returns>
        public async System.Threading.Tasks.Task<ChatMessage> ApiChatPatchAsync(int? msgId = default(int?), string? content = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArtisashopApi.Client.ApiResponse<ChatMessage> localVarResponse = await ApiChatPatchWithHttpInfoAsync(msgId, content, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="msgId"> (optional)</param>
        /// <param name="content"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatMessage)</returns>
        public async System.Threading.Tasks.Task<ArtisashopApi.Client.ApiResponse<ChatMessage>> ApiChatPatchWithHttpInfoAsync(int? msgId = default(int?), string? content = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (msgId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArtisashopApi.Client.ClientUtils.ParameterToMultiMap("", "msgId", msgId));
            }
            if (content != null)
            {
                localVarRequestOptions.QueryParameters.Add(ArtisashopApi.Client.ClientUtils.ParameterToMultiMap("", "content", content));
            }

            localVarRequestOptions.Operation = "ChatApi.ApiChatPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ChatMessage>("/api/chat", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChatPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createChatMessage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChatMessage</returns>
        public ChatMessage ApiChatPost(CreateChatMessage? createChatMessage = default(CreateChatMessage?), int operationIndex = 0)
        {
            ArtisashopApi.Client.ApiResponse<ChatMessage> localVarResponse = ApiChatPostWithHttpInfo(createChatMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createChatMessage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChatMessage</returns>
        public ArtisashopApi.Client.ApiResponse<ChatMessage> ApiChatPostWithHttpInfo(CreateChatMessage? createChatMessage = default(CreateChatMessage?), int operationIndex = 0)
        {
            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createChatMessage;

            localVarRequestOptions.Operation = "ChatApi.ApiChatPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChatMessage>("/api/chat", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChatPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createChatMessage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChatMessage</returns>
        public async System.Threading.Tasks.Task<ChatMessage> ApiChatPostAsync(CreateChatMessage? createChatMessage = default(CreateChatMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ArtisashopApi.Client.ApiResponse<ChatMessage> localVarResponse = await ApiChatPostWithHttpInfoAsync(createChatMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ArtisashopApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createChatMessage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChatMessage)</returns>
        public async System.Threading.Tasks.Task<ArtisashopApi.Client.ApiResponse<ChatMessage>> ApiChatPostWithHttpInfoAsync(CreateChatMessage? createChatMessage = default(CreateChatMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ArtisashopApi.Client.RequestOptions localVarRequestOptions = new ArtisashopApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ArtisashopApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ArtisashopApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createChatMessage;

            localVarRequestOptions.Operation = "ChatApi.ApiChatPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChatMessage>("/api/chat", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiChatPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
