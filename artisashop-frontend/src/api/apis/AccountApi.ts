/* tslint:disable */
/* eslint-disable */
/**
 * API Artisashop
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Account,
  AccountToken,
  ExternalLoginConfirmationViewModel,
  GetAccountResult,
  Login,
  ProblemDetails,
  Register,
  UpdateAccount,
} from '../models';
import {
    AccountFromJSON,
    AccountToJSON,
    AccountTokenFromJSON,
    AccountTokenToJSON,
    ExternalLoginConfirmationViewModelFromJSON,
    ExternalLoginConfirmationViewModelToJSON,
    GetAccountResultFromJSON,
    GetAccountResultToJSON,
    LoginFromJSON,
    LoginToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    RegisterFromJSON,
    RegisterToJSON,
    UpdateAccountFromJSON,
    UpdateAccountToJSON,
} from '../models';

export interface ExternalLoginRequest {
    provider?: string;
    returnUrl?: string;
}

export interface ExternalLoginCallbackRequest {
    returnUrl?: string;
}

export interface GetAccountFromEmailRequest {
    email: string;
}

export interface GetAccountFromIdRequest {
    id: string;
}

export interface LoginRequest {
    login?: Login;
}

export interface RegisterRequest {
    register?: Register;
}

export interface UpdateAccountRoleRequest {
    id: string;
    role: string;
    isDeleted?: boolean;
}

export interface UpdateCurrentAccountRequest {
    updateAccount?: UpdateAccount;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     */
    async deleteCurrentAccountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Account/Account`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async deleteCurrentAccount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteCurrentAccountRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async externalLoginRaw(requestParameters: ExternalLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['provider'] = requestParameters.provider;
        }

        if (requestParameters.returnUrl !== undefined) {
            queryParameters['returnUrl'] = requestParameters.returnUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Account/Account/external-login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async externalLogin(requestParameters: ExternalLoginRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.externalLoginRaw(requestParameters, initOverrides);
    }

    /**
     */
    async externalLoginCallbackRaw(requestParameters: ExternalLoginCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExternalLoginConfirmationViewModel>> {
        const queryParameters: any = {};

        if (requestParameters.returnUrl !== undefined) {
            queryParameters['returnUrl'] = requestParameters.returnUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Account/Account/external-login-callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExternalLoginConfirmationViewModelFromJSON(jsonValue));
    }

    /**
     */
    async externalLoginCallback(requestParameters: ExternalLoginCallbackRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExternalLoginConfirmationViewModel> {
        const response = await this.externalLoginCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAccountFromEmailRaw(requestParameters: GetAccountFromEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountResult>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling getAccountFromEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Account/Account/fromEmail/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccountResultFromJSON(jsonValue));
    }

    /**
     */
    async getAccountFromEmail(requestParameters: GetAccountFromEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountResult> {
        const response = await this.getAccountFromEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAccountFromIdRaw(requestParameters: GetAccountFromIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAccountFromId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Account/Account/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccountResultFromJSON(jsonValue));
    }

    /**
     */
    async getAccountFromId(requestParameters: GetAccountFromIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountResult> {
        const response = await this.getAccountFromIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAccountFromSessionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Account/Account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     */
    async getAccountFromSession(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.getAccountFromSessionRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountToken>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Account/Account/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginToJSON(requestParameters.login),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountTokenFromJSON(jsonValue));
    }

    /**
     */
    async login(requestParameters: LoginRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountToken> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async registerRaw(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountToken>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Account/Account/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterToJSON(requestParameters.register),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountTokenFromJSON(jsonValue));
    }

    /**
     */
    async register(requestParameters: RegisterRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountToken> {
        const response = await this.registerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns or removes a role to a user.  Available roles are found in Artisashop.Roles
     */
    async updateAccountRoleRaw(requestParameters: UpdateAccountRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAccountRole.');
        }

        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling updateAccountRole.');
        }

        const queryParameters: any = {};

        if (requestParameters.isDeleted !== undefined) {
            queryParameters['isDeleted'] = requestParameters.isDeleted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Account/Account/{id}/role/{role}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters.role))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccountResultFromJSON(jsonValue));
    }

    /**
     * Assigns or removes a role to a user.  Available roles are found in Artisashop.Roles
     */
    async updateAccountRole(requestParameters: UpdateAccountRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountResult> {
        const response = await this.updateAccountRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateCurrentAccountRaw(requestParameters: UpdateCurrentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Account/Account`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAccountToJSON(requestParameters.updateAccount),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     */
    async updateCurrentAccount(requestParameters: UpdateCurrentAccountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.updateCurrentAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
