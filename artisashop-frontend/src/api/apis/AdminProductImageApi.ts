/* tslint:disable */
/* eslint-disable */
/**
 * API Artisashop
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProductImage,
} from '../models';
import {
    ProductImageFromJSON,
    ProductImageToJSON,
} from '../models';

export interface AdminProductImageAdminProductImageGetRequest {
    filter?: string;
    range?: string;
    sort?: string;
}

export interface AdminProductImageAdminProductImageIdDeleteRequest {
    id: number;
}

export interface AdminProductImageAdminProductImageIdGetRequest {
    id: number;
}

export interface AdminProductImageAdminProductImageIdPutRequest {
    id: number;
    productImage?: ProductImage;
}

export interface AdminProductImageAdminProductImagePostRequest {
    productImage?: ProductImage;
}

/**
 * 
 */
export class AdminProductImageApi extends runtime.BaseAPI {

    /**
     */
    async adminProductImageAdminProductImageGetRaw(requestParameters: AdminProductImageAdminProductImageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductImage>>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.range !== undefined) {
            queryParameters['range'] = requestParameters.range;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/admin/productImage/AdminProductImage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductImageFromJSON));
    }

    /**
     */
    async adminProductImageAdminProductImageGet(requestParameters: AdminProductImageAdminProductImageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductImage>> {
        const response = await this.adminProductImageAdminProductImageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminProductImageAdminProductImageIdDeleteRaw(requestParameters: AdminProductImageAdminProductImageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductImage>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling adminProductImageAdminProductImageIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/admin/productImage/AdminProductImage/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductImageFromJSON(jsonValue));
    }

    /**
     */
    async adminProductImageAdminProductImageIdDelete(requestParameters: AdminProductImageAdminProductImageIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductImage> {
        const response = await this.adminProductImageAdminProductImageIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminProductImageAdminProductImageIdGetRaw(requestParameters: AdminProductImageAdminProductImageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductImage>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling adminProductImageAdminProductImageIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/admin/productImage/AdminProductImage/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductImageFromJSON(jsonValue));
    }

    /**
     */
    async adminProductImageAdminProductImageIdGet(requestParameters: AdminProductImageAdminProductImageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductImage> {
        const response = await this.adminProductImageAdminProductImageIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminProductImageAdminProductImageIdPutRaw(requestParameters: AdminProductImageAdminProductImageIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductImage>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling adminProductImageAdminProductImageIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/admin/productImage/AdminProductImage/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductImageToJSON(requestParameters.productImage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductImageFromJSON(jsonValue));
    }

    /**
     */
    async adminProductImageAdminProductImageIdPut(requestParameters: AdminProductImageAdminProductImageIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductImage> {
        const response = await this.adminProductImageAdminProductImageIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminProductImageAdminProductImagePostRaw(requestParameters: AdminProductImageAdminProductImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductImage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/admin/productImage/AdminProductImage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductImageToJSON(requestParameters.productImage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductImageFromJSON(jsonValue));
    }

    /**
     */
    async adminProductImageAdminProductImagePost(requestParameters: AdminProductImageAdminProductImagePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductImage> {
        const response = await this.adminProductImageAdminProductImagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
