/* tslint:disable */
/* eslint-disable */
/**
 * API Artisashop
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Account,
  Home,
} from '../models';
import {
    AccountFromJSON,
    AccountToJSON,
    HomeFromJSON,
    HomeToJSON,
} from '../models';

export interface ChangeValidationStatusRequest {
    requestBody?: { [key: string]: string; };
}

export interface SetAccountParamRequest {
    userId?: string;
    propertyName?: string;
    value?: boolean;
}

/**
 * 
 */
export class BackofficeApi extends runtime.BaseAPI {

    /**
     * This function display the backoffice main page
     */
    async backofficeIndexRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Account>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/backoffice/Backoffice`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountFromJSON));
    }

    /**
     * This function display the backoffice main page
     */
    async backofficeIndex(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Account>> {
        const response = await this.backofficeIndexRaw(initOverrides);
        return await response.value();
    }

    /**
     * Displays the validation page
     */
    async backofficeStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Home>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/backoffice/Backoffice/stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HomeFromJSON(jsonValue));
    }

    /**
     * Displays the validation page
     */
    async backofficeStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Home> {
        const response = await this.backofficeStatsRaw(initOverrides);
        return await response.value();
    }

    /**
     * This function change the validation status
     */
    async changeValidationStatusRaw(requestParameters: ChangeValidationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/backoffice/Backoffice/changeValidationStatus`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * This function change the validation status
     */
    async changeValidationStatus(requestParameters: ChangeValidationStatusRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.changeValidationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This changes a boolean parameter
     */
    async setAccountParamRaw(requestParameters: SetAccountParamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.propertyName !== undefined) {
            queryParameters['propertyName'] = requestParameters.propertyName;
        }

        if (requestParameters.value !== undefined) {
            queryParameters['value'] = requestParameters.value;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/backoffice/Backoffice/setAccountParam`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * This changes a boolean parameter
     */
    async setAccountParam(requestParameters: SetAccountParamRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.setAccountParamRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
