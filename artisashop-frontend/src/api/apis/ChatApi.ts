/* tslint:disable */
/* eslint-disable */
/**
 * API Artisashop
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatMessage,
  ChatPreview,
  CreateChatMessage,
} from '../models';
import {
    ChatMessageFromJSON,
    ChatMessageToJSON,
    ChatPreviewFromJSON,
    ChatPreviewToJSON,
    CreateChatMessageFromJSON,
    CreateChatMessageToJSON,
} from '../models';

export interface CreateChatMessageRequest {
    createChatMessage?: CreateChatMessage;
}

export interface DeleteChatMessageRequest {
    messageId: number;
}

export interface GetChatMessageRequest {
    msgId: number;
}

export interface GetConversationHistoryRequest {
    users?: Array<string>;
}

export interface UpdateChatMessageRequest {
    msgId: number;
    content?: string;
}

/**
 * 
 */
export class ChatApi extends runtime.BaseAPI {

    /**
     * This function add a message to chat history database
     */
    async createChatMessageRaw(requestParameters: CreateChatMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/chat/Chat`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChatMessageToJSON(requestParameters.createChatMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatMessageFromJSON(jsonValue));
    }

    /**
     * This function add a message to chat history database
     */
    async createChatMessage(requestParameters: CreateChatMessageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatMessage> {
        const response = await this.createChatMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a message from a chat
     */
    async deleteChatMessageRaw(requestParameters: DeleteChatMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling deleteChatMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/chat/Chat/{messageId}`.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete a message from a chat
     */
    async deleteChatMessage(requestParameters: DeleteChatMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteChatMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Display the list of openned chats
     */
    async getAllChatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChatPreview>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/chat/Chat/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChatPreviewFromJSON));
    }

    /**
     * Display the list of openned chats
     */
    async getAllChats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChatPreview>> {
        const response = await this.getAllChatsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a message by id
     */
    async getChatMessageRaw(requestParameters: GetChatMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatMessage>> {
        if (requestParameters.msgId === null || requestParameters.msgId === undefined) {
            throw new runtime.RequiredError('msgId','Required parameter requestParameters.msgId was null or undefined when calling getChatMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/chat/Chat/{msgId}`.replace(`{${"msgId"}}`, encodeURIComponent(String(requestParameters.msgId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatMessageFromJSON(jsonValue));
    }

    /**
     * Get a message by id
     */
    async getChatMessage(requestParameters: GetChatMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatMessage> {
        const response = await this.getChatMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a chat history
     */
    async getConversationHistoryRaw(requestParameters: GetConversationHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChatMessage>>> {
        const queryParameters: any = {};

        if (requestParameters.users) {
            queryParameters['users'] = requestParameters.users;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/chat/Chat/history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChatMessageFromJSON));
    }

    /**
     * Get a chat history
     */
    async getConversationHistory(requestParameters: GetConversationHistoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChatMessage>> {
        const response = await this.getConversationHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a message from a chat
     */
    async updateChatMessageRaw(requestParameters: UpdateChatMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatMessage>> {
        if (requestParameters.msgId === null || requestParameters.msgId === undefined) {
            throw new runtime.RequiredError('msgId','Required parameter requestParameters.msgId was null or undefined when calling updateChatMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.content !== undefined) {
            queryParameters['content'] = requestParameters.content;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/chat/Chat/{msgId}`.replace(`{${"msgId"}}`, encodeURIComponent(String(requestParameters.msgId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatMessageFromJSON(jsonValue));
    }

    /**
     * Update a message from a chat
     */
    async updateChatMessage(requestParameters: UpdateChatMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatMessage> {
        const response = await this.updateChatMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
