/* tslint:disable */
/* eslint-disable */
/**
 * API Artisashop
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Account } from './Account';
import {
    AccountFromJSON,
    AccountFromJSONTyped,
    AccountToJSON,
} from './Account';
import type { ProductImage } from './ProductImage';
import {
    ProductImageFromJSON,
    ProductImageFromJSONTyped,
    ProductImageToJSON,
} from './ProductImage';

/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    price: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    description?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    quantity: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    craftsmanId: string;
    /**
     * 
     * @type {Account}
     * @memberof Product
     */
    craftsman: Account;
    /**
     * 
     * @type {Array<ProductImage>}
     * @memberof Product
     */
    productImages?: Array<ProductImage> | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    stylesList?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Product
     */
    styles?: Array<string> | null;
}

/**
 * Check if a given object implements the Product interface.
 */
export function instanceOfProduct(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "price" in value;
    isInstance = isInstance && "quantity" in value;
    isInstance = isInstance && "craftsmanId" in value;
    isInstance = isInstance && "craftsman" in value;

    return isInstance;
}

export function ProductFromJSON(json: any): Product {
    return ProductFromJSONTyped(json, false);
}

export function ProductFromJSONTyped(json: any, ignoreDiscriminator: boolean): Product {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'price': json['price'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'quantity': json['quantity'],
        'craftsmanId': json['craftsmanId'],
        'craftsman': AccountFromJSON(json['craftsman']),
        'productImages': !exists(json, 'productImages') ? undefined : (json['productImages'] === null ? null : (json['productImages'] as Array<any>).map(ProductImageFromJSON)),
        'stylesList': !exists(json, 'stylesList') ? undefined : json['stylesList'],
        'styles': !exists(json, 'styles') ? undefined : json['styles'],
    };
}

export function ProductToJSON(value?: Product | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'price': value.price,
        'description': value.description,
        'quantity': value.quantity,
        'craftsmanId': value.craftsmanId,
        'craftsman': AccountToJSON(value.craftsman),
        'productImages': value.productImages === undefined ? undefined : (value.productImages === null ? null : (value.productImages as Array<any>).map(ProductImageToJSON)),
        'stylesList': value.stylesList,
        'styles': value.styles,
    };
}

