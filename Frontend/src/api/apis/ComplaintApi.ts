/* tslint:disable */
/* eslint-disable */
/**
 * API Artisashop
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Complaint,
} from '../models';
import {
    ComplaintFromJSON,
    ComplaintToJSON,
} from '../models';

export interface ApiComplaintGetRequest {
    userId?: string;
    productId?: number;
}

export interface ApiComplaintIdGetRequest {
    id: number;
}

export interface ApiComplaintPostRequest {
    complaint?: Complaint;
}

/**
 * 
 */
export class ComplaintApi extends runtime.BaseAPI {

    /**
     */
    async apiComplaintGetRaw(requestParameters: ApiComplaintGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Complaint>>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.productId !== undefined) {
            queryParameters['productId'] = requestParameters.productId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Complaint`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ComplaintFromJSON));
    }

    /**
     */
    async apiComplaintGet(requestParameters: ApiComplaintGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Complaint>> {
        const response = await this.apiComplaintGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplaintIdGetRaw(requestParameters: ApiComplaintIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Complaint>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiComplaintIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Complaint/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComplaintFromJSON(jsonValue));
    }

    /**
     */
    async apiComplaintIdGet(requestParameters: ApiComplaintIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Complaint> {
        const response = await this.apiComplaintIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiComplaintPostRaw(requestParameters: ApiComplaintPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Complaint>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Complaint`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComplaintToJSON(requestParameters.complaint),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComplaintFromJSON(jsonValue));
    }

    /**
     */
    async apiComplaintPost(requestParameters: ApiComplaintPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Complaint> {
        const response = await this.apiComplaintPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
