/* tslint:disable */
/* eslint-disable */
/**
 * API Artisashop
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ManageMessageId,
} from '../models';
import {
    ManageMessageIdFromJSON,
    ManageMessageIdToJSON,
} from '../models';

export interface ChangePasswordRequest {
    oldPassword: string;
    newPassword: string;
    confirmPassword?: string;
}

export interface LinkLoginRequest {
    provider?: string;
}

export interface ManageIndexRequest {
    message?: ManageMessageId;
}

export interface ManageLoginsRequest {
    message?: ManageMessageId;
}

export interface RemoveLoginRequest {
    loginProvider?: string;
    providerKey?: string;
}

export interface SetPasswordRequest {
    newPassword: string;
    confirmPassword?: string;
}

/**
 * 
 */
export class ManageApi extends runtime.BaseAPI {

    /**
     */
    async changePasswordRaw(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.oldPassword === null || requestParameters.oldPassword === undefined) {
            throw new runtime.RequiredError('oldPassword','Required parameter requestParameters.oldPassword was null or undefined when calling changePassword.');
        }

        if (requestParameters.newPassword === null || requestParameters.newPassword === undefined) {
            throw new runtime.RequiredError('newPassword','Required parameter requestParameters.newPassword was null or undefined when calling changePassword.');
        }

        const queryParameters: any = {};

        if (requestParameters.oldPassword !== undefined) {
            queryParameters['OldPassword'] = requestParameters.oldPassword;
        }

        if (requestParameters.newPassword !== undefined) {
            queryParameters['NewPassword'] = requestParameters.newPassword;
        }

        if (requestParameters.confirmPassword !== undefined) {
            queryParameters['ConfirmPassword'] = requestParameters.confirmPassword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Manage/ChangePassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async changePassword(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.changePasswordRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getPivotIdentityRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Manage/PivotIdentity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getPivotIdentity(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getPivotIdentityRaw(initOverrides);
    }

    /**
     */
    async linkLoginRaw(requestParameters: LinkLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['provider'] = requestParameters.provider;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Manage/LinkLogin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async linkLogin(requestParameters: LinkLoginRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.linkLoginRaw(requestParameters, initOverrides);
    }

    /**
     */
    async linkLoginCallbackRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Manage/LinkLoginCallback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async linkLoginCallback(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.linkLoginCallbackRaw(initOverrides);
    }

    /**
     */
    async manageIndexRaw(requestParameters: ManageIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.message !== undefined) {
            queryParameters['message'] = requestParameters.message;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Manage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async manageIndex(requestParameters: ManageIndexRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.manageIndexRaw(requestParameters, initOverrides);
    }

    /**
     */
    async manageLoginsRaw(requestParameters: ManageLoginsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.message !== undefined) {
            queryParameters['message'] = requestParameters.message;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Manage/ManageLogins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async manageLogins(requestParameters: ManageLoginsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.manageLoginsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async removeLoginRaw(requestParameters: RemoveLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.loginProvider !== undefined) {
            queryParameters['LoginProvider'] = requestParameters.loginProvider;
        }

        if (requestParameters.providerKey !== undefined) {
            queryParameters['ProviderKey'] = requestParameters.providerKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Manage/RemoveLogin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeLogin(requestParameters: RemoveLoginRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeLoginRaw(requestParameters, initOverrides);
    }

    /**
     */
    async setPasswordRaw(requestParameters: SetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.newPassword === null || requestParameters.newPassword === undefined) {
            throw new runtime.RequiredError('newPassword','Required parameter requestParameters.newPassword was null or undefined when calling setPassword.');
        }

        const queryParameters: any = {};

        if (requestParameters.newPassword !== undefined) {
            queryParameters['NewPassword'] = requestParameters.newPassword;
        }

        if (requestParameters.confirmPassword !== undefined) {
            queryParameters['ConfirmPassword'] = requestParameters.confirmPassword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Manage/SetPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async setPassword(requestParameters: SetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setPasswordRaw(requestParameters, initOverrides);
    }

}
