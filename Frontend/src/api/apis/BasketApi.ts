/* tslint:disable */
/* eslint-disable */
/**
 * API Artichaut
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Basket,
  UpdateBasket,
} from '../models';
import {
    BasketFromJSON,
    BasketToJSON,
    UpdateBasketFromJSON,
    UpdateBasketToJSON,
} from '../models';

export interface ApiBasketBasketIdDeleteRequest {
    basketId: number;
}

export interface ApiBasketPatchRequest {
    updateBasket?: UpdateBasket;
}

export interface ApiBasketPayGetRequest {
    body?: string;
}

export interface ApiBasketPostRequest {
    productID?: number;
    quantityModifier?: number;
}

/**
 * 
 */
export class BasketApi extends runtime.BaseAPI {

    /**
     */
    async apiBasketBasketIdDeleteRaw(requestParameters: ApiBasketBasketIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.basketId === null || requestParameters.basketId === undefined) {
            throw new runtime.RequiredError('basketId','Required parameter requestParameters.basketId was null or undefined when calling apiBasketBasketIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket/{basketId}`.replace(`{${"basketId"}}`, encodeURIComponent(String(requestParameters.basketId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiBasketBasketIdDelete(requestParameters: ApiBasketBasketIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiBasketBasketIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBasketGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Basket>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BasketFromJSON));
    }

    /**
     */
    async apiBasketGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Basket>> {
        const response = await this.apiBasketGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBasketPatchRaw(requestParameters: ApiBasketPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Basket>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBasketToJSON(requestParameters.updateBasket),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasketFromJSON(jsonValue));
    }

    /**
     */
    async apiBasketPatch(requestParameters: ApiBasketPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Basket> {
        const response = await this.apiBasketPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBasketPayGetRaw(requestParameters: ApiBasketPayGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket/pay`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiBasketPayGet(requestParameters: ApiBasketPayGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiBasketPayGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBasketPostRaw(requestParameters: ApiBasketPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Basket>> {
        const queryParameters: any = {};

        if (requestParameters.productID !== undefined) {
            queryParameters['productID'] = requestParameters.productID;
        }

        if (requestParameters.quantityModifier !== undefined) {
            queryParameters['quantityModifier'] = requestParameters.quantityModifier;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasketFromJSON(jsonValue));
    }

    /**
     */
    async apiBasketPost(requestParameters: ApiBasketPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Basket> {
        const response = await this.apiBasketPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
