// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import mdx from "@mdx-js/rollup";
import fs from "fs";
import path from "path";
import { execSync } from "child_process";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    mdx({})
  ],
  server: {
    port: 3e3,
    strictPort: true,
    https: generateCerts(),
    proxy: {
      "/api": {
        changeOrigin: true,
        secure: false,
        target: process.env.ASPNETCORE_HTTPS_PORT ? `https://localhost:${process.env.ASPNETCORE_HTTPS_PORT}` : process.env.ASPNETCORE_URLS ? process.env.ASPNETCORE_URLS.split(";")[0] : "http://localhost:5138"
      }
    }
  }
});
function generateCerts() {
  const baseFolder = process.env.APPDATA !== void 0 && process.env.APPDATA !== "" ? `${process.env.APPDATA}/ASP.NET/https` : `${process.env.HOME}/.aspnet/https`;
  const certificateArg = process.argv.map((arg) => arg.match(/--name=(?<value>.+)/i)).filter(Boolean)[0];
  const certificateName = certificateArg ? certificateArg.groups.value : process.env.npm_package_name;
  if (!certificateName) {
    console.error(
      "Invalid certificate name. Run this script in the context of an npm/yarn script or pass --name=<<app>> explicitly."
    );
    process.exit(-1);
  }
  const certFilePath = path.join(baseFolder, `${certificateName}.pem`);
  const keyFilePath = path.join(baseFolder, `${certificateName}.key`);
  if (!fs.existsSync(certFilePath) || !fs.existsSync(keyFilePath)) {
    const outp = execSync(
      "dotnet " + [
        "dev-certs",
        "https",
        "--export-path",
        certFilePath,
        "--format",
        "Pem",
        "--no-password"
      ].join(" ")
    );
    console.log(outp.toString());
  }
  return {
    cert: fs.readFileSync(certFilePath, "utf8"),
    key: fs.readFileSync(keyFilePath, "utf8")
  };
}
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvbW50L2MvVXNlcnMvamVhbmUvc291cmNlL3JlcG9zL2FydGljaGF1dC9BcnRpY2hhdXQvQ2xpZW50QXBwXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvbW50L2MvVXNlcnMvamVhbmUvc291cmNlL3JlcG9zL2FydGljaGF1dC9BcnRpY2hhdXQvQ2xpZW50QXBwL3ZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9tbnQvYy9Vc2Vycy9qZWFuZS9zb3VyY2UvcmVwb3MvYXJ0aWNoYXV0L0FydGljaGF1dC9DbGllbnRBcHAvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tIFwidml0ZVwiO1xyXG5pbXBvcnQgcmVhY3QgZnJvbSBcIkB2aXRlanMvcGx1Z2luLXJlYWN0XCI7XHJcbmltcG9ydCBtZHggZnJvbSAnQG1keC1qcy9yb2xsdXAnO1xyXG5cclxuaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xyXG5pbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiO1xyXG5pbXBvcnQgeyBleGVjU3luYyB9IGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xyXG4gICAgcGx1Z2luczogW1xyXG4gICAgICAgIHJlYWN0KCksXHJcbiAgICAgICAgbWR4KHt9KSxcclxuICAgIF0sXHJcbiAgICBzZXJ2ZXI6IHtcclxuICAgICAgICBwb3J0OiAzMDAwLFxyXG4gICAgICAgIHN0cmljdFBvcnQ6IHRydWUsXHJcbiAgICAgICAgaHR0cHM6IGdlbmVyYXRlQ2VydHMoKSxcclxuICAgICAgICBwcm94eToge1xyXG4gICAgICAgICAgICAvLyBwcm94eSBBUEkgcmVxdWVzdHMgdG8gdGhlIEFTUC5ORVQgYmFja2VuZFxyXG4gICAgICAgICAgICBcIi9hcGlcIjoge1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlT3JpZ2luOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc2VjdXJlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIC8vIHJld3JpdGU6IChwYXRoKSA9PiBwYXRoLnJlcGxhY2UoL15cXC9hcGkvLCBcIi9hcGlcIiksXHJcbiAgICAgICAgICAgICAgICAvLyB0YXJnZXQgdGFrZW4gZnJvbSBzcmMvc2V0dXBQcm94eS5qcyBpbiBBU1AuTkVUIFJlYWN0IHRlbXBsYXRlXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHByb2Nlc3MuZW52LkFTUE5FVENPUkVfSFRUUFNfUE9SVFxyXG4gICAgICAgICAgICAgICAgICAgID8gYGh0dHBzOi8vbG9jYWxob3N0OiR7cHJvY2Vzcy5lbnYuQVNQTkVUQ09SRV9IVFRQU19QT1JUfWBcclxuICAgICAgICAgICAgICAgICAgICA6IHByb2Nlc3MuZW52LkFTUE5FVENPUkVfVVJMU1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHByb2Nlc3MuZW52LkFTUE5FVENPUkVfVVJMUy5zcGxpdChcIjtcIilbMF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBcImh0dHA6Ly9sb2NhbGhvc3Q6NTEzOFwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG59KTtcclxuXHJcbi8qKiBGdW5jdGlvbiB0YWtlbiBmcm9tIGFzcG5ldGNvcmUtaHR0cHMuanMgaW4gQVNQLk5FVCBSZWFjdCB0ZW1wbGF0ZSAqL1xyXG5mdW5jdGlvbiBnZW5lcmF0ZUNlcnRzKCkge1xyXG4gICAgY29uc3QgYmFzZUZvbGRlciA9XHJcbiAgICAgICAgcHJvY2Vzcy5lbnYuQVBQREFUQSAhPT0gdW5kZWZpbmVkICYmIHByb2Nlc3MuZW52LkFQUERBVEEgIT09IFwiXCJcclxuICAgICAgICAgICAgPyBgJHtwcm9jZXNzLmVudi5BUFBEQVRBfS9BU1AuTkVUL2h0dHBzYFxyXG4gICAgICAgICAgICA6IGAke3Byb2Nlc3MuZW52LkhPTUV9Ly5hc3BuZXQvaHR0cHNgO1xyXG4gICAgY29uc3QgY2VydGlmaWNhdGVBcmcgPSBwcm9jZXNzLmFyZ3ZcclxuICAgICAgICAubWFwKChhcmcpID0+IGFyZy5tYXRjaCgvLS1uYW1lPSg/PHZhbHVlPi4rKS9pKSlcclxuICAgICAgICAuZmlsdGVyKEJvb2xlYW4pWzBdO1xyXG4gICAgY29uc3QgY2VydGlmaWNhdGVOYW1lID0gY2VydGlmaWNhdGVBcmdcclxuICAgICAgICA/IGNlcnRpZmljYXRlQXJnLmdyb3Vwcy52YWx1ZVxyXG4gICAgICAgIDogcHJvY2Vzcy5lbnYubnBtX3BhY2thZ2VfbmFtZTtcclxuXHJcbiAgICBpZiAoIWNlcnRpZmljYXRlTmFtZSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgICAgIFwiSW52YWxpZCBjZXJ0aWZpY2F0ZSBuYW1lLiBSdW4gdGhpcyBzY3JpcHQgaW4gdGhlIGNvbnRleHQgb2YgYW4gbnBtL3lhcm4gc2NyaXB0IG9yIHBhc3MgLS1uYW1lPTw8YXBwPj4gZXhwbGljaXRseS5cIlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcHJvY2Vzcy5leGl0KC0xKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjZXJ0RmlsZVBhdGggPSBwYXRoLmpvaW4oYmFzZUZvbGRlciwgYCR7Y2VydGlmaWNhdGVOYW1lfS5wZW1gKTtcclxuICAgIGNvbnN0IGtleUZpbGVQYXRoID0gcGF0aC5qb2luKGJhc2VGb2xkZXIsIGAke2NlcnRpZmljYXRlTmFtZX0ua2V5YCk7XHJcblxyXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKGNlcnRGaWxlUGF0aCkgfHwgIWZzLmV4aXN0c1N5bmMoa2V5RmlsZVBhdGgpKSB7XHJcbiAgICAgICAgY29uc3Qgb3V0cCA9IGV4ZWNTeW5jKFxyXG4gICAgICAgICAgICBcImRvdG5ldCBcIiArXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgXCJkZXYtY2VydHNcIixcclxuICAgICAgICAgICAgICAgICAgICBcImh0dHBzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCItLWV4cG9ydC1wYXRoXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2VydEZpbGVQYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiLS1mb3JtYXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcIlBlbVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiLS1uby1wYXNzd29yZFwiLFxyXG4gICAgICAgICAgICAgICAgXS5qb2luKFwiIFwiKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29uc29sZS5sb2cob3V0cC50b1N0cmluZygpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGNlcnQ6IGZzLnJlYWRGaWxlU3luYyhjZXJ0RmlsZVBhdGgsIFwidXRmOFwiKSxcclxuICAgICAgICBrZXk6IGZzLnJlYWRGaWxlU3luYyhrZXlGaWxlUGF0aCwgXCJ1dGY4XCIpLFxyXG4gICAgfTtcclxufSJdLAogICJtYXBwaW5ncyI6ICI7QUFBeVcsU0FBUyxvQkFBb0I7QUFDdFksT0FBTyxXQUFXO0FBQ2xCLE9BQU8sU0FBUztBQUVoQixPQUFPLFFBQVE7QUFDZixPQUFPLFVBQVU7QUFDakIsU0FBUyxnQkFBZ0I7QUFFekIsSUFBTyxzQkFBUSxhQUFhO0FBQUEsRUFDeEIsU0FBUztBQUFBLElBQ0wsTUFBTTtBQUFBLElBQ04sSUFBSSxDQUFDLENBQUM7QUFBQSxFQUNWO0FBQUEsRUFDQSxRQUFRO0FBQUEsSUFDSixNQUFNO0FBQUEsSUFDTixZQUFZO0FBQUEsSUFDWixPQUFPLGNBQWM7QUFBQSxJQUNyQixPQUFPO0FBQUEsTUFFSCxRQUFRO0FBQUEsUUFDSixjQUFjO0FBQUEsUUFDZCxRQUFRO0FBQUEsUUFHUixRQUFRLFFBQVEsSUFBSSx3QkFDZCxxQkFBcUIsUUFBUSxJQUFJLDBCQUNqQyxRQUFRLElBQUksa0JBQ1IsUUFBUSxJQUFJLGdCQUFnQixNQUFNLEdBQUcsRUFBRSxLQUN2QztBQUFBLE1BQ2Q7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUNKLENBQUM7QUFHRCxTQUFTLGdCQUFnQjtBQUNyQixRQUFNLGFBQ0YsUUFBUSxJQUFJLFlBQVksVUFBYSxRQUFRLElBQUksWUFBWSxLQUN2RCxHQUFHLFFBQVEsSUFBSSwwQkFDZixHQUFHLFFBQVEsSUFBSTtBQUN6QixRQUFNLGlCQUFpQixRQUFRLEtBQzFCLElBQUksQ0FBQyxRQUFRLElBQUksTUFBTSxzQkFBc0IsQ0FBQyxFQUM5QyxPQUFPLE9BQU8sRUFBRTtBQUNyQixRQUFNLGtCQUFrQixpQkFDbEIsZUFBZSxPQUFPLFFBQ3RCLFFBQVEsSUFBSTtBQUVsQixNQUFJLENBQUMsaUJBQWlCO0FBQ2xCLFlBQVE7QUFBQSxNQUNKO0FBQUEsSUFDSjtBQUNBLFlBQVEsS0FBSyxFQUFFO0FBQUEsRUFDbkI7QUFFQSxRQUFNLGVBQWUsS0FBSyxLQUFLLFlBQVksR0FBRyxxQkFBcUI7QUFDbkUsUUFBTSxjQUFjLEtBQUssS0FBSyxZQUFZLEdBQUcscUJBQXFCO0FBRWxFLE1BQUksQ0FBQyxHQUFHLFdBQVcsWUFBWSxLQUFLLENBQUMsR0FBRyxXQUFXLFdBQVcsR0FBRztBQUM3RCxVQUFNLE9BQU87QUFBQSxNQUNULFlBQ0k7QUFBQSxRQUNJO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsTUFDSixFQUFFLEtBQUssR0FBRztBQUFBLElBQ2xCO0FBQ0EsWUFBUSxJQUFJLEtBQUssU0FBUyxDQUFDO0FBQUEsRUFDL0I7QUFFQSxTQUFPO0FBQUEsSUFDSCxNQUFNLEdBQUcsYUFBYSxjQUFjLE1BQU07QUFBQSxJQUMxQyxLQUFLLEdBQUcsYUFBYSxhQUFhLE1BQU07QUFBQSxFQUM1QztBQUNKOyIsCiAgIm5hbWVzIjogW10KfQo=
