/* tslint:disable */
/* eslint-disable */
/**
 * API Artichaut
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProblemDetails,
} from '../models';
import {
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface ApiChatChatToUserIdGetRequest {
    toUserId: string;
}

/**
 * 
 */
export class ChatApi extends runtime.BaseAPI {

    /**
     */
    async apiChatChatToUserIdGetRaw(requestParameters: ApiChatChatToUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.toUserId === null || requestParameters.toUserId === undefined) {
            throw new runtime.RequiredError('toUserId','Required parameter requestParameters.toUserId was null or undefined when calling apiChatChatToUserIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/chat/chat/{toUserId}`.replace(`{${"toUserId"}}`, encodeURIComponent(String(requestParameters.toUserId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiChatChatToUserIdGet(requestParameters: ApiChatChatToUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiChatChatToUserIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiChatListGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/chat/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiChatListGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiChatListGetRaw(initOverrides);
    }

}
