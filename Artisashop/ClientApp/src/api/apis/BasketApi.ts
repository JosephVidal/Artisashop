/* tslint:disable */
/* eslint-disable */
/**
 * API Artichaut
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Basket,
  CreateCustomCmdViewModel,
  DeliveryOption,
  ProblemDetails,
  State,
} from '../models';
import {
    BasketFromJSON,
    BasketToJSON,
    CreateCustomCmdViewModelFromJSON,
    CreateCustomCmdViewModelToJSON,
    DeliveryOptionFromJSON,
    DeliveryOptionToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    StateFromJSON,
    StateToJSON,
} from '../models';

export interface ApiBasketBasketUpdateCustomCmdPutRequest {
    basket?: Basket;
}

export interface ApiBasketCreateCustomCmdCraftsmanIDGetRequest {
    craftsmanID: string;
}

export interface ApiBasketCreateCustomCmdPostRequest {
    createCustomCmdViewModel?: CreateCustomCmdViewModel;
}

export interface ApiBasketDeleteRequest {
    productID?: number;
}

export interface ApiBasketPayGetRequest {
    address?: string;
}

export interface ApiBasketUpdateCustomCmdBasketIDGetRequest {
    basketID: number;
}

export interface ApiBasketUpdateDeliveryPutRequest {
    productID?: number;
    deliveryOptMod?: DeliveryOption;
}

export interface ApiBasketUpdateQuantityPutRequest {
    productID?: number;
    quantityModifier?: number;
}

export interface ApiBasketUpdateStatusPutRequest {
    basketID?: number;
    state?: State;
}

/**
 * 
 */
export class BasketApi extends runtime.BaseAPI {

    /**
     */
    async apiBasketBasketUpdateCustomCmdPutRaw(requestParameters: ApiBasketBasketUpdateCustomCmdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket/basket/updateCustomCmd`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BasketToJSON(requestParameters.basket),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBasketBasketUpdateCustomCmdPut(requestParameters: ApiBasketBasketUpdateCustomCmdPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBasketBasketUpdateCustomCmdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiBasketBillGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket/bill`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBasketBillGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBasketBillGetRaw(initOverrides);
    }

    /**
     */
    async apiBasketBillPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket/bill`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBasketBillPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBasketBillPostRaw(initOverrides);
    }

    /**
     */
    async apiBasketCreateCustomCmdCraftsmanIDGetRaw(requestParameters: ApiBasketCreateCustomCmdCraftsmanIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.craftsmanID === null || requestParameters.craftsmanID === undefined) {
            throw new runtime.RequiredError('craftsmanID','Required parameter requestParameters.craftsmanID was null or undefined when calling apiBasketCreateCustomCmdCraftsmanIDGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket/createCustomCmd/{craftsmanID}`.replace(`{${"craftsmanID"}}`, encodeURIComponent(String(requestParameters.craftsmanID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBasketCreateCustomCmdCraftsmanIDGet(requestParameters: ApiBasketCreateCustomCmdCraftsmanIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBasketCreateCustomCmdCraftsmanIDGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiBasketCreateCustomCmdPostRaw(requestParameters: ApiBasketCreateCustomCmdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket/createCustomCmd`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCustomCmdViewModelToJSON(requestParameters.createCustomCmdViewModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBasketCreateCustomCmdPost(requestParameters: ApiBasketCreateCustomCmdPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBasketCreateCustomCmdPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiBasketDeleteRaw(requestParameters: ApiBasketDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.productID !== undefined) {
            queryParameters['productID'] = requestParameters.productID;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBasketDelete(requestParameters: ApiBasketDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBasketDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiBasketGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBasketGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBasketGetRaw(initOverrides);
    }

    /**
     */
    async apiBasketOrderGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket/order`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBasketOrderGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBasketOrderGetRaw(initOverrides);
    }

    /**
     */
    async apiBasketPayGetRaw(requestParameters: ApiBasketPayGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket/pay`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBasketPayGet(requestParameters: ApiBasketPayGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBasketPayGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiBasketRefreshGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket/refresh`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBasketRefreshGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBasketRefreshGetRaw(initOverrides);
    }

    /**
     */
    async apiBasketRefreshPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBasketRefreshPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBasketRefreshPostRaw(initOverrides);
    }

    /**
     */
    async apiBasketUpdateCustomCmdBasketIDGetRaw(requestParameters: ApiBasketUpdateCustomCmdBasketIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.basketID === null || requestParameters.basketID === undefined) {
            throw new runtime.RequiredError('basketID','Required parameter requestParameters.basketID was null or undefined when calling apiBasketUpdateCustomCmdBasketIDGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket/updateCustomCmd/{basketID}`.replace(`{${"basketID"}}`, encodeURIComponent(String(requestParameters.basketID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBasketUpdateCustomCmdBasketIDGet(requestParameters: ApiBasketUpdateCustomCmdBasketIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBasketUpdateCustomCmdBasketIDGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiBasketUpdateDeliveryPutRaw(requestParameters: ApiBasketUpdateDeliveryPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.productID !== undefined) {
            queryParameters['productID'] = requestParameters.productID;
        }

        if (requestParameters.deliveryOptMod !== undefined) {
            queryParameters['deliveryOptMod'] = requestParameters.deliveryOptMod;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket/updateDelivery`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBasketUpdateDeliveryPut(requestParameters: ApiBasketUpdateDeliveryPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBasketUpdateDeliveryPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiBasketUpdateQuantityPutRaw(requestParameters: ApiBasketUpdateQuantityPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.productID !== undefined) {
            queryParameters['productID'] = requestParameters.productID;
        }

        if (requestParameters.quantityModifier !== undefined) {
            queryParameters['quantityModifier'] = requestParameters.quantityModifier;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket/updateQuantity`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBasketUpdateQuantityPut(requestParameters: ApiBasketUpdateQuantityPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBasketUpdateQuantityPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiBasketUpdateStatusPutRaw(requestParameters: ApiBasketUpdateStatusPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.basketID !== undefined) {
            queryParameters['basketID'] = requestParameters.basketID;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/basket/updateStatus`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBasketUpdateStatusPut(requestParameters: ApiBasketUpdateStatusPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiBasketUpdateStatusPutRaw(requestParameters, initOverrides);
    }

}
