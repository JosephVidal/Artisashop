/* tslint:disable */
/* eslint-disable */
/**
 * API Artichaut
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Account,
  Basket,
  CreateCustomOrder,
  OrderList,
  State,
  UpdateCustomOrder,
} from '../models';
import {
    AccountFromJSON,
    AccountToJSON,
    BasketFromJSON,
    BasketToJSON,
    CreateCustomOrderFromJSON,
    CreateCustomOrderToJSON,
    OrderListFromJSON,
    OrderListToJSON,
    StateFromJSON,
    StateToJSON,
    UpdateCustomOrderFromJSON,
    UpdateCustomOrderToJSON,
} from '../models';

export interface ApiCustomOrderBasketIdChangeStatusPatchRequest {
    basketId: number;
    state?: State;
}

export interface ApiCustomOrderCraftsmanIdGetRequest {
    craftsmanId: string;
}

export interface ApiCustomOrderPatchRequest {
    updateCustomOrder?: UpdateCustomOrder;
}

export interface ApiCustomOrderPostRequest {
    createCustomOrder?: CreateCustomOrder;
}

export interface ApiCustomOrderUpdateBasketIdGetRequest {
    basketId: number;
}

/**
 * 
 */
export class CustomOrderApi extends runtime.BaseAPI {

    /**
     */
    async apiCustomOrderBasketIdChangeStatusPatchRaw(requestParameters: ApiCustomOrderBasketIdChangeStatusPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters.basketId === null || requestParameters.basketId === undefined) {
            throw new runtime.RequiredError('basketId','Required parameter requestParameters.basketId was null or undefined when calling apiCustomOrderBasketIdChangeStatusPatch.');
        }

        const queryParameters: any = {};

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/custom-order/{basketId}/changeStatus`.replace(`{${"basketId"}}`, encodeURIComponent(String(requestParameters.basketId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     */
    async apiCustomOrderBasketIdChangeStatusPatch(requestParameters: ApiCustomOrderBasketIdChangeStatusPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.apiCustomOrderBasketIdChangeStatusPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCustomOrderCraftsmanIdGetRaw(requestParameters: ApiCustomOrderCraftsmanIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters.craftsmanId === null || requestParameters.craftsmanId === undefined) {
            throw new runtime.RequiredError('craftsmanId','Required parameter requestParameters.craftsmanId was null or undefined when calling apiCustomOrderCraftsmanIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/custom-order/{craftsmanId}`.replace(`{${"craftsmanId"}}`, encodeURIComponent(String(requestParameters.craftsmanId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     */
    async apiCustomOrderCraftsmanIdGet(requestParameters: ApiCustomOrderCraftsmanIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.apiCustomOrderCraftsmanIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCustomOrderListGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderList>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/custom-order/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderListFromJSON));
    }

    /**
     */
    async apiCustomOrderListGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderList>> {
        const response = await this.apiCustomOrderListGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCustomOrderPatchRaw(requestParameters: ApiCustomOrderPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Basket>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/custom-order`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCustomOrderToJSON(requestParameters.updateCustomOrder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasketFromJSON(jsonValue));
    }

    /**
     */
    async apiCustomOrderPatch(requestParameters: ApiCustomOrderPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Basket> {
        const response = await this.apiCustomOrderPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCustomOrderPostRaw(requestParameters: ApiCustomOrderPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Basket>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/custom-order`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCustomOrderToJSON(requestParameters.createCustomOrder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasketFromJSON(jsonValue));
    }

    /**
     */
    async apiCustomOrderPost(requestParameters: ApiCustomOrderPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Basket> {
        const response = await this.apiCustomOrderPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCustomOrderUpdateBasketIdGetRaw(requestParameters: ApiCustomOrderUpdateBasketIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Basket>> {
        if (requestParameters.basketId === null || requestParameters.basketId === undefined) {
            throw new runtime.RequiredError('basketId','Required parameter requestParameters.basketId was null or undefined when calling apiCustomOrderUpdateBasketIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/custom-order/update/{basketId}`.replace(`{${"basketId"}}`, encodeURIComponent(String(requestParameters.basketId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasketFromJSON(jsonValue));
    }

    /**
     */
    async apiCustomOrderUpdateBasketIdGet(requestParameters: ApiCustomOrderUpdateBasketIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Basket> {
        const response = await this.apiCustomOrderUpdateBasketIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
