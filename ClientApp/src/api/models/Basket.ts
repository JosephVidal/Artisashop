/* tslint:disable */
/* eslint-disable */
/**
 * API Artichaut
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Account } from './Account';
import {
    AccountFromJSON,
    AccountFromJSONTyped,
    AccountToJSON,
} from './Account';
import type { DeliveryOption } from './DeliveryOption';
import {
    DeliveryOptionFromJSON,
    DeliveryOptionFromJSONTyped,
    DeliveryOptionToJSON,
} from './DeliveryOption';
import type { Product } from './Product';
import {
    ProductFromJSON,
    ProductFromJSONTyped,
    ProductToJSON,
} from './Product';
import type { State } from './State';
import {
    StateFromJSON,
    StateFromJSONTyped,
    StateToJSON,
} from './State';

/**
 * 
 * @export
 * @interface Basket
 */
export interface Basket {
    /**
     * 
     * @type {number}
     * @memberof Basket
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Basket
     */
    accountId: string;
    /**
     * 
     * @type {Account}
     * @memberof Basket
     */
    account: Account;
    /**
     * 
     * @type {number}
     * @memberof Basket
     */
    productId: number;
    /**
     * 
     * @type {Product}
     * @memberof Basket
     */
    product: Product;
    /**
     * 
     * @type {number}
     * @memberof Basket
     */
    quantity: number;
    /**
     * 
     * @type {DeliveryOption}
     * @memberof Basket
     */
    deliveryOpt: DeliveryOption;
    /**
     * 
     * @type {State}
     * @memberof Basket
     */
    currentState: State;
    /**
     * 
     * @type {Array<State>}
     * @memberof Basket
     */
    possibleState?: Array<State> | null;
}

/**
 * Check if a given object implements the Basket interface.
 */
export function instanceOfBasket(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accountId" in value;
    isInstance = isInstance && "account" in value;
    isInstance = isInstance && "productId" in value;
    isInstance = isInstance && "product" in value;
    isInstance = isInstance && "quantity" in value;
    isInstance = isInstance && "deliveryOpt" in value;
    isInstance = isInstance && "currentState" in value;

    return isInstance;
}

export function BasketFromJSON(json: any): Basket {
    return BasketFromJSONTyped(json, false);
}

export function BasketFromJSONTyped(json: any, ignoreDiscriminator: boolean): Basket {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'accountId': json['accountId'],
        'account': AccountFromJSON(json['account']),
        'productId': json['productId'],
        'product': ProductFromJSON(json['product']),
        'quantity': json['quantity'],
        'deliveryOpt': DeliveryOptionFromJSON(json['deliveryOpt']),
        'currentState': StateFromJSON(json['currentState']),
        'possibleState': !exists(json, 'possibleState') ? undefined : (json['possibleState'] === null ? null : (json['possibleState'] as Array<any>).map(StateFromJSON)),
    };
}

export function BasketToJSON(value?: Basket | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'accountId': value.accountId,
        'account': AccountToJSON(value.account),
        'productId': value.productId,
        'product': ProductToJSON(value.product),
        'quantity': value.quantity,
        'deliveryOpt': DeliveryOptionToJSON(value.deliveryOpt),
        'currentState': StateToJSON(value.currentState),
        'possibleState': value.possibleState === undefined ? undefined : (value.possibleState === null ? null : (value.possibleState as Array<any>).map(StateToJSON)),
    };
}

