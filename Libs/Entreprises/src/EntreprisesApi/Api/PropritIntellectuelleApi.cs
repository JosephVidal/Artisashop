/*
 * API Entreprise
 *
 * Cette page contient la documentation technique pour accéder à API Entreprise. Les API étant accessible uniquement sous habilitation, l'interaction avec l'environnement de production n'est possible que si vous êtes **en possession d'une clé d'accès (jeton).  ### Comment tester l'API ?  Il est possible de tester les API via notre environnement de **staging** qui vous retournera systématiquement des données fictives.  Il est nécessaire d'utiliser le jeton de staging indiqué ci-dessous.  - --  *eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1MmE1YmZjMi1jMzUwLTQ4ZjQtYjY5Ni05ZWE3NmRiM2VmMjkiLCJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJzY29wZXMiOlsiY2VydGlmaWNhdF9yZ2VfYWRlbWUiLCJtc2FfY290aXNhdGlvbnMiLCJlbnRyZXByaXNlcyIsImV4dHJhaXRzX3JjcyIsImNlcnRpZmljYXRfb3BxaWJpIiwiYXNzb2NpYXRpb25zIiwiZXRhYmxpc3NlbWVudHMiLCJmbnRwX2NhcnRlX3BybyIsInF1YWxpYmF0IiwiZW50cmVwcmlzZXNfYXJ0aXNhbmFsZXMiLCJjZXJ0aWZpY2F0X2NuZXRwIiwiZW9yaV9kb3VhbmVzIiwicHJvYnRwIiwiYWN0ZXNfaW5waSIsImV4dHJhaXRfY291cnRfaW5waSIsImF0dGVzdGF0aW9uc19zb2NpYWxlcyIsImxpYXNzZV9maXNjYWxlIiwiYXR0ZXN0YXRpb25zX2Zpc2NhbGVzIiwiZXhlcmNpY2VzIiwiY29udmVudGlvbnNfY29sbGVjdGl2ZXMiLCJiaWxhbnNfaW5waSIsImRvY3VtZW50c19hc3NvY2lhdGlvbiIsImNlcnRpZmljYXRfYWdlbmNlX2JpbyIsImJpbGFuc19lbnRyZXByaXNlX2JkZiIsImF0dGVzdGF0aW9uc19hZ2VmaXBoIiwibWVzcmlfaWRlbnRpZmlhbnQiLCJtZXNyaV9pZGVudGl0ZSIsIm1lc3JpX2luc2NyaXB0aW9uX2V0dWRpYW50IiwibWVzcmlfaW5zY3JpcHRpb25fYXV0cmUiLCJtZXNyaV9hZG1pc3Npb24iLCJtZXNyaV9ldGFibGlzc2VtZW50cyIsInBvbGVfZW1wbG9pX2lkZW50aXRlIiwicG9sZV9lbXBsb2lfYWRyZXNzZSIsInBvbGVfZW1wbG9pX2NvbnRhY3QiLCJwb2xlX2VtcGxvaV9pbnNjcmlwdGlvbiIsImNuYWZfcXVvdGllbnRfZmFtaWxpYWwiLCJjbmFmX2FsbG9jYXRhaXJlcyIsImNuYWZfZW5mYW50cyIsImNuYWZfYWRyZXNzZSIsImNub3VzX3N0YXR1dF9ib3Vyc2llciIsInVwdGltZSIsImNub3VzX2VjaGVsb25fYm91cnNlIiwiY25vdXNfZW1haWwiLCJjbm91c19wZXJpb2RlX3ZlcnNlbWVudCIsImNub3VzX3N0YXR1dF9ib3Vyc2UiLCJjbm91c192aWxsZV9ldHVkZXMiLCJjbm91c19pZGVudGl0ZSIsImRnZmlwX2RlY2xhcmFudDFfbm9tIiwiZGdmaXBfZGVjbGFyYW50MV9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50MV9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50MV9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RlY2xhcmFudDJfbm9tIiwiZGdmaXBfZGVjbGFyYW50Ml9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50Ml9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50Ml9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RhdGVfcmVjb3V2cmVtZW50IiwiZGdmaXBfZGF0ZV9ldGFibGlzc2VtZW50IiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX3RheGF0aW9uIiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX2FubmVlIiwiZGdmaXBfbm9tYnJlX3BhcnRzIiwiZGdmaXBfbm9tYnJlX3BlcnNvbm5lc19hX2NoYXJnZSIsImRnZmlwX3NpdHVhdGlvbl9mYW1pbGlhbGUiLCJkZ2ZpcF9yZXZlbnVfYnJ1dF9nbG9iYWwiLCJkZ2ZpcF9yZXZlbnVfaW1wb3NhYmxlIiwiZGdmaXBfaW1wb3RfcmV2ZW51X25ldF9hdmFudF9jb3JyZWN0aW9ucyIsImRnZmlwX21vbnRhbnRfaW1wb3QiLCJkZ2ZpcF9yZXZlbnVfZmlzY2FsX3JlZmVyZW5jZSIsImRnZmlwX2FubmVlX2ltcG90IiwiZGdmaXBfYW5uZWVfcmV2ZW51cyIsImRnZmlwX2VycmV1cl9jb3JyZWN0aWYiLCJkZ2ZpcF9zaXR1YXRpb25fcGFydGllbGxlIl0sInN1YiI6InN0YWdpbmcgZGV2ZWxvcG1lbnQiLCJpYXQiOjE2NjY4NjQwNzQsInZlcnNpb24iOiIxLjAiLCJleHAiOjE5ODI0ODMyNzR9.u2kMWzll3iCTczUOqMQbpS66VfrVzI2lLiyGEPcKAec*       
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@entreprise.api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EntreprisesApi.Client;
using EntreprisesApi.Model;

namespace EntreprisesApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPropritIntellectuelleApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Brevets déposés
        /// </summary>
        /// <remarks>
        /// Nombre de brevets déposés par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les brevets les plus récents. 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InpiUnitesLegalesSirenBrevetsGet200Response</returns>
        V3InpiUnitesLegalesSirenBrevetsGet200Response V3InpiUnitesLegalesSirenBrevetsGet(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Brevets déposés
        /// </summary>
        /// <remarks>
        /// Nombre de brevets déposés par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les brevets les plus récents. 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InpiUnitesLegalesSirenBrevetsGet200Response</returns>
        ApiResponse<V3InpiUnitesLegalesSirenBrevetsGet200Response> V3InpiUnitesLegalesSirenBrevetsGetWithHttpInfo(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// Marques déposées
        /// </summary>
        /// <remarks>
        /// Nombre de marques déposées par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les marques les plus récentes. 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InpiUnitesLegalesSirenMarquesGet200Response</returns>
        V3InpiUnitesLegalesSirenMarquesGet200Response V3InpiUnitesLegalesSirenMarquesGet(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Marques déposées
        /// </summary>
        /// <remarks>
        /// Nombre de marques déposées par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les marques les plus récentes. 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InpiUnitesLegalesSirenMarquesGet200Response</returns>
        ApiResponse<V3InpiUnitesLegalesSirenMarquesGet200Response> V3InpiUnitesLegalesSirenMarquesGetWithHttpInfo(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0);
        /// <summary>
        /// Modèles déposés
        /// </summary>
        /// <remarks>
        /// Nombre de modèles déposés par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les modèles les plus récents. 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InpiUnitesLegalesSirenModelesGet200Response</returns>
        V3InpiUnitesLegalesSirenModelesGet200Response V3InpiUnitesLegalesSirenModelesGet(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// Modèles déposés
        /// </summary>
        /// <remarks>
        /// Nombre de modèles déposés par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les modèles les plus récents. 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InpiUnitesLegalesSirenModelesGet200Response</returns>
        ApiResponse<V3InpiUnitesLegalesSirenModelesGet200Response> V3InpiUnitesLegalesSirenModelesGetWithHttpInfo(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPropritIntellectuelleApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Brevets déposés
        /// </summary>
        /// <remarks>
        /// Nombre de brevets déposés par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les brevets les plus récents. 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InpiUnitesLegalesSirenBrevetsGet200Response</returns>
        System.Threading.Tasks.Task<V3InpiUnitesLegalesSirenBrevetsGet200Response> V3InpiUnitesLegalesSirenBrevetsGetAsync(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Brevets déposés
        /// </summary>
        /// <remarks>
        /// Nombre de brevets déposés par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les brevets les plus récents. 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InpiUnitesLegalesSirenBrevetsGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3InpiUnitesLegalesSirenBrevetsGet200Response>> V3InpiUnitesLegalesSirenBrevetsGetWithHttpInfoAsync(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Marques déposées
        /// </summary>
        /// <remarks>
        /// Nombre de marques déposées par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les marques les plus récentes. 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InpiUnitesLegalesSirenMarquesGet200Response</returns>
        System.Threading.Tasks.Task<V3InpiUnitesLegalesSirenMarquesGet200Response> V3InpiUnitesLegalesSirenMarquesGetAsync(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Marques déposées
        /// </summary>
        /// <remarks>
        /// Nombre de marques déposées par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les marques les plus récentes. 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InpiUnitesLegalesSirenMarquesGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3InpiUnitesLegalesSirenMarquesGet200Response>> V3InpiUnitesLegalesSirenMarquesGetWithHttpInfoAsync(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Modèles déposés
        /// </summary>
        /// <remarks>
        /// Nombre de modèles déposés par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les modèles les plus récents. 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InpiUnitesLegalesSirenModelesGet200Response</returns>
        System.Threading.Tasks.Task<V3InpiUnitesLegalesSirenModelesGet200Response> V3InpiUnitesLegalesSirenModelesGetAsync(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Modèles déposés
        /// </summary>
        /// <remarks>
        /// Nombre de modèles déposés par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les modèles les plus récents. 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InpiUnitesLegalesSirenModelesGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3InpiUnitesLegalesSirenModelesGet200Response>> V3InpiUnitesLegalesSirenModelesGetWithHttpInfoAsync(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPropritIntellectuelleApi : IPropritIntellectuelleApiSync, IPropritIntellectuelleApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PropritIntellectuelleApi : IPropritIntellectuelleApi
    {
        private EntreprisesApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PropritIntellectuelleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PropritIntellectuelleApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropritIntellectuelleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PropritIntellectuelleApi(string basePath)
        {
            this.Configuration = EntreprisesApi.Client.Configuration.MergeConfigurations(
                EntreprisesApi.Client.GlobalConfiguration.Instance,
                new EntreprisesApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EntreprisesApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EntreprisesApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EntreprisesApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropritIntellectuelleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PropritIntellectuelleApi(EntreprisesApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EntreprisesApi.Client.Configuration.MergeConfigurations(
                EntreprisesApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EntreprisesApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EntreprisesApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EntreprisesApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropritIntellectuelleApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PropritIntellectuelleApi(EntreprisesApi.Client.ISynchronousClient client, EntreprisesApi.Client.IAsynchronousClient asyncClient, EntreprisesApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EntreprisesApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EntreprisesApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EntreprisesApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EntreprisesApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EntreprisesApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Brevets déposés Nombre de brevets déposés par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les brevets les plus récents. 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InpiUnitesLegalesSirenBrevetsGet200Response</returns>
        public V3InpiUnitesLegalesSirenBrevetsGet200Response V3InpiUnitesLegalesSirenBrevetsGet(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3InpiUnitesLegalesSirenBrevetsGet200Response> localVarResponse = V3InpiUnitesLegalesSirenBrevetsGetWithHttpInfo(context, recipient, _object, siren, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Brevets déposés Nombre de brevets déposés par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les brevets les plus récents. 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InpiUnitesLegalesSirenBrevetsGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3InpiUnitesLegalesSirenBrevetsGet200Response> V3InpiUnitesLegalesSirenBrevetsGetWithHttpInfo(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenBrevetsGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenBrevetsGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenBrevetsGet");
            }

            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenBrevetsGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "PropritIntellectuelleApi.V3InpiUnitesLegalesSirenBrevetsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3InpiUnitesLegalesSirenBrevetsGet200Response>("/v3/inpi/unites_legales/{siren}/brevets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InpiUnitesLegalesSirenBrevetsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Brevets déposés Nombre de brevets déposés par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les brevets les plus récents. 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InpiUnitesLegalesSirenBrevetsGet200Response</returns>
        public async System.Threading.Tasks.Task<V3InpiUnitesLegalesSirenBrevetsGet200Response> V3InpiUnitesLegalesSirenBrevetsGetAsync(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3InpiUnitesLegalesSirenBrevetsGet200Response> localVarResponse = await V3InpiUnitesLegalesSirenBrevetsGetWithHttpInfoAsync(context, recipient, _object, siren, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Brevets déposés Nombre de brevets déposés par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les brevets les plus récents. 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InpiUnitesLegalesSirenBrevetsGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3InpiUnitesLegalesSirenBrevetsGet200Response>> V3InpiUnitesLegalesSirenBrevetsGetWithHttpInfoAsync(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenBrevetsGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenBrevetsGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenBrevetsGet");
            }

            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenBrevetsGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "PropritIntellectuelleApi.V3InpiUnitesLegalesSirenBrevetsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3InpiUnitesLegalesSirenBrevetsGet200Response>("/v3/inpi/unites_legales/{siren}/brevets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InpiUnitesLegalesSirenBrevetsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Marques déposées Nombre de marques déposées par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les marques les plus récentes. 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InpiUnitesLegalesSirenMarquesGet200Response</returns>
        public V3InpiUnitesLegalesSirenMarquesGet200Response V3InpiUnitesLegalesSirenMarquesGet(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3InpiUnitesLegalesSirenMarquesGet200Response> localVarResponse = V3InpiUnitesLegalesSirenMarquesGetWithHttpInfo(context, recipient, _object, siren, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Marques déposées Nombre de marques déposées par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les marques les plus récentes. 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InpiUnitesLegalesSirenMarquesGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3InpiUnitesLegalesSirenMarquesGet200Response> V3InpiUnitesLegalesSirenMarquesGetWithHttpInfo(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenMarquesGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenMarquesGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenMarquesGet");
            }

            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenMarquesGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "PropritIntellectuelleApi.V3InpiUnitesLegalesSirenMarquesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3InpiUnitesLegalesSirenMarquesGet200Response>("/v3/inpi/unites_legales/{siren}/marques", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InpiUnitesLegalesSirenMarquesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Marques déposées Nombre de marques déposées par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les marques les plus récentes. 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InpiUnitesLegalesSirenMarquesGet200Response</returns>
        public async System.Threading.Tasks.Task<V3InpiUnitesLegalesSirenMarquesGet200Response> V3InpiUnitesLegalesSirenMarquesGetAsync(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3InpiUnitesLegalesSirenMarquesGet200Response> localVarResponse = await V3InpiUnitesLegalesSirenMarquesGetWithHttpInfoAsync(context, recipient, _object, siren, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Marques déposées Nombre de marques déposées par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les marques les plus récentes. 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InpiUnitesLegalesSirenMarquesGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3InpiUnitesLegalesSirenMarquesGet200Response>> V3InpiUnitesLegalesSirenMarquesGetWithHttpInfoAsync(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenMarquesGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenMarquesGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenMarquesGet");
            }

            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenMarquesGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "PropritIntellectuelleApi.V3InpiUnitesLegalesSirenMarquesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3InpiUnitesLegalesSirenMarquesGet200Response>("/v3/inpi/unites_legales/{siren}/marques", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InpiUnitesLegalesSirenMarquesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modèles déposés Nombre de modèles déposés par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les modèles les plus récents. 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InpiUnitesLegalesSirenModelesGet200Response</returns>
        public V3InpiUnitesLegalesSirenModelesGet200Response V3InpiUnitesLegalesSirenModelesGet(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3InpiUnitesLegalesSirenModelesGet200Response> localVarResponse = V3InpiUnitesLegalesSirenModelesGetWithHttpInfo(context, recipient, _object, siren, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modèles déposés Nombre de modèles déposés par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les modèles les plus récents. 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InpiUnitesLegalesSirenModelesGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3InpiUnitesLegalesSirenModelesGet200Response> V3InpiUnitesLegalesSirenModelesGetWithHttpInfo(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenModelesGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenModelesGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenModelesGet");
            }

            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenModelesGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "PropritIntellectuelleApi.V3InpiUnitesLegalesSirenModelesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3InpiUnitesLegalesSirenModelesGet200Response>("/v3/inpi/unites_legales/{siren}/modeles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InpiUnitesLegalesSirenModelesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modèles déposés Nombre de modèles déposés par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les modèles les plus récents. 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InpiUnitesLegalesSirenModelesGet200Response</returns>
        public async System.Threading.Tasks.Task<V3InpiUnitesLegalesSirenModelesGet200Response> V3InpiUnitesLegalesSirenModelesGetAsync(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3InpiUnitesLegalesSirenModelesGet200Response> localVarResponse = await V3InpiUnitesLegalesSirenModelesGetWithHttpInfoAsync(context, recipient, _object, siren, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modèles déposés Nombre de modèles déposés par l&#39;entreprise (lorsque le SIREN a été spécifié) et informations sur les modèles les plus récents. 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="limit">Limite le nombre de résultats retournés. Valeur entre 1 et 20 (Défaut 5) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InpiUnitesLegalesSirenModelesGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3InpiUnitesLegalesSirenModelesGet200Response>> V3InpiUnitesLegalesSirenModelesGetWithHttpInfoAsync(string context, string recipient, string _object, string siren, decimal? limit = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenModelesGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenModelesGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenModelesGet");
            }

            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling PropritIntellectuelleApi->V3InpiUnitesLegalesSirenModelesGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "PropritIntellectuelleApi.V3InpiUnitesLegalesSirenModelesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3InpiUnitesLegalesSirenModelesGet200Response>("/v3/inpi/unites_legales/{siren}/modeles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InpiUnitesLegalesSirenModelesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
