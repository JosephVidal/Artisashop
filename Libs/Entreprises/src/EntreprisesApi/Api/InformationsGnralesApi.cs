/*
 * API Entreprise
 *
 * Cette page contient la documentation technique pour accéder à API Entreprise. Les API étant accessible uniquement sous habilitation, l'interaction avec l'environnement de production n'est possible que si vous êtes **en possession d'une clé d'accès (jeton).  ### Comment tester l'API ?  Il est possible de tester les API via notre environnement de **staging** qui vous retournera systématiquement des données fictives.  Il est nécessaire d'utiliser le jeton de staging indiqué ci-dessous.  - --  *eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1MmE1YmZjMi1jMzUwLTQ4ZjQtYjY5Ni05ZWE3NmRiM2VmMjkiLCJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJzY29wZXMiOlsiY2VydGlmaWNhdF9yZ2VfYWRlbWUiLCJtc2FfY290aXNhdGlvbnMiLCJlbnRyZXByaXNlcyIsImV4dHJhaXRzX3JjcyIsImNlcnRpZmljYXRfb3BxaWJpIiwiYXNzb2NpYXRpb25zIiwiZXRhYmxpc3NlbWVudHMiLCJmbnRwX2NhcnRlX3BybyIsInF1YWxpYmF0IiwiZW50cmVwcmlzZXNfYXJ0aXNhbmFsZXMiLCJjZXJ0aWZpY2F0X2NuZXRwIiwiZW9yaV9kb3VhbmVzIiwicHJvYnRwIiwiYWN0ZXNfaW5waSIsImV4dHJhaXRfY291cnRfaW5waSIsImF0dGVzdGF0aW9uc19zb2NpYWxlcyIsImxpYXNzZV9maXNjYWxlIiwiYXR0ZXN0YXRpb25zX2Zpc2NhbGVzIiwiZXhlcmNpY2VzIiwiY29udmVudGlvbnNfY29sbGVjdGl2ZXMiLCJiaWxhbnNfaW5waSIsImRvY3VtZW50c19hc3NvY2lhdGlvbiIsImNlcnRpZmljYXRfYWdlbmNlX2JpbyIsImJpbGFuc19lbnRyZXByaXNlX2JkZiIsImF0dGVzdGF0aW9uc19hZ2VmaXBoIiwibWVzcmlfaWRlbnRpZmlhbnQiLCJtZXNyaV9pZGVudGl0ZSIsIm1lc3JpX2luc2NyaXB0aW9uX2V0dWRpYW50IiwibWVzcmlfaW5zY3JpcHRpb25fYXV0cmUiLCJtZXNyaV9hZG1pc3Npb24iLCJtZXNyaV9ldGFibGlzc2VtZW50cyIsInBvbGVfZW1wbG9pX2lkZW50aXRlIiwicG9sZV9lbXBsb2lfYWRyZXNzZSIsInBvbGVfZW1wbG9pX2NvbnRhY3QiLCJwb2xlX2VtcGxvaV9pbnNjcmlwdGlvbiIsImNuYWZfcXVvdGllbnRfZmFtaWxpYWwiLCJjbmFmX2FsbG9jYXRhaXJlcyIsImNuYWZfZW5mYW50cyIsImNuYWZfYWRyZXNzZSIsImNub3VzX3N0YXR1dF9ib3Vyc2llciIsInVwdGltZSIsImNub3VzX2VjaGVsb25fYm91cnNlIiwiY25vdXNfZW1haWwiLCJjbm91c19wZXJpb2RlX3ZlcnNlbWVudCIsImNub3VzX3N0YXR1dF9ib3Vyc2UiLCJjbm91c192aWxsZV9ldHVkZXMiLCJjbm91c19pZGVudGl0ZSIsImRnZmlwX2RlY2xhcmFudDFfbm9tIiwiZGdmaXBfZGVjbGFyYW50MV9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50MV9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50MV9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RlY2xhcmFudDJfbm9tIiwiZGdmaXBfZGVjbGFyYW50Ml9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50Ml9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50Ml9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RhdGVfcmVjb3V2cmVtZW50IiwiZGdmaXBfZGF0ZV9ldGFibGlzc2VtZW50IiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX3RheGF0aW9uIiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX2FubmVlIiwiZGdmaXBfbm9tYnJlX3BhcnRzIiwiZGdmaXBfbm9tYnJlX3BlcnNvbm5lc19hX2NoYXJnZSIsImRnZmlwX3NpdHVhdGlvbl9mYW1pbGlhbGUiLCJkZ2ZpcF9yZXZlbnVfYnJ1dF9nbG9iYWwiLCJkZ2ZpcF9yZXZlbnVfaW1wb3NhYmxlIiwiZGdmaXBfaW1wb3RfcmV2ZW51X25ldF9hdmFudF9jb3JyZWN0aW9ucyIsImRnZmlwX21vbnRhbnRfaW1wb3QiLCJkZ2ZpcF9yZXZlbnVfZmlzY2FsX3JlZmVyZW5jZSIsImRnZmlwX2FubmVlX2ltcG90IiwiZGdmaXBfYW5uZWVfcmV2ZW51cyIsImRnZmlwX2VycmV1cl9jb3JyZWN0aWYiLCJkZ2ZpcF9zaXR1YXRpb25fcGFydGllbGxlIl0sInN1YiI6InN0YWdpbmcgZGV2ZWxvcG1lbnQiLCJpYXQiOjE2NjY4NjQwNzQsInZlcnNpb24iOiIxLjAiLCJleHAiOjE5ODI0ODMyNzR9.u2kMWzll3iCTczUOqMQbpS66VfrVzI2lLiyGEPcKAec*       
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@entreprise.api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EntreprisesApi.Client;
using EntreprisesApi.Model;

namespace EntreprisesApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInformationsGnralesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Données du RNM d&#39;une entreprise artisanale
        /// </summary>
        /// <remarks>
        /// Informations de référence d&#39;une entreprise artisanale enregistrée au répertoire national des métiers (RNM).
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3CmaFranceRnmUnitesLegalesSirenGet200Response</returns>
        V3CmaFranceRnmUnitesLegalesSirenGet200Response V3CmaFranceRnmUnitesLegalesSirenGet(string siren, string context, string recipient, string _object, int operationIndex = 0);

        /// <summary>
        /// Données du RNM d&#39;une entreprise artisanale
        /// </summary>
        /// <remarks>
        /// Informations de référence d&#39;une entreprise artisanale enregistrée au répertoire national des métiers (RNM).
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3CmaFranceRnmUnitesLegalesSirenGet200Response</returns>
        ApiResponse<V3CmaFranceRnmUnitesLegalesSirenGet200Response> V3CmaFranceRnmUnitesLegalesSirenGetWithHttpInfo(string siren, string context, string recipient, string _object, int operationIndex = 0);
        /// <summary>
        /// Immatriculation EORI
        /// </summary>
        /// <remarks>
        /// État du numéro EORI d&#39;une entreprise indiquant si celle-ci est immatriculée auprès des douanes dans le cadre de l’import/export en Union Européenne. 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrEori">Siret ou numéro EORI de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response</returns>
        V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet(string siretOrEori, string context, string recipient, string _object, int operationIndex = 0);

        /// <summary>
        /// Immatriculation EORI
        /// </summary>
        /// <remarks>
        /// État du numéro EORI d&#39;une entreprise indiquant si celle-ci est immatriculée auprès des douanes dans le cadre de l’import/export en Union Européenne. 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrEori">Siret ou numéro EORI de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response</returns>
        ApiResponse<V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response> V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGetWithHttpInfo(string siretOrEori, string context, string recipient, string _object, int operationIndex = 0);
        /// <summary>
        /// N°TVA intracommunautaire français
        /// </summary>
        /// <remarks>
        /// Numéro de TVA intracommunautaire français, vérifié auprès de la Commission européenne.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response</returns>
        V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet(string context, string recipient, string _object, string siren, int operationIndex = 0);

        /// <summary>
        /// N°TVA intracommunautaire français
        /// </summary>
        /// <remarks>
        /// Numéro de TVA intracommunautaire français, vérifié auprès de la Commission européenne.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response</returns>
        ApiResponse<V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response> V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGetWithHttpInfo(string context, string recipient, string _object, string siren, int operationIndex = 0);
        /// <summary>
        /// Conventions collectives
        /// </summary>
        /// <remarks>
        /// Identifiants des conventions collectives d’un établissement et lien vers les textes en vigueur.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response</returns>
        V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet(string context, string recipient, string _object, string siret, int operationIndex = 0);

        /// <summary>
        /// Conventions collectives
        /// </summary>
        /// <remarks>
        /// Identifiants des conventions collectives d’un établissement et lien vers les textes en vigueur.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response</returns>
        ApiResponse<V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response> V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGetWithHttpInfo(string context, string recipient, string _object, string siret, int operationIndex = 0);
        /// <summary>
        /// Extrait RCS
        /// </summary>
        /// <remarks>
        /// Extrait d&#39;une partie des données du registre du commerce et des sociétés (RCS) ; ainsi que les commentaires laissés par les greffiers.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response</returns>
        V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet(string context, string recipient, string _object, string siren, int operationIndex = 0);

        /// <summary>
        /// Extrait RCS
        /// </summary>
        /// <remarks>
        /// Extrait d&#39;une partie des données du registre du commerce et des sociétés (RCS) ; ainsi que les commentaires laissés par les greffiers.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response</returns>
        ApiResponse<V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response> V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGetWithHttpInfo(string context, string recipient, string _object, string siren, int operationIndex = 0);
        /// <summary>
        /// Mandataires sociaux
        /// </summary>
        /// <remarks>
        /// Liste des mandataires sociaux d&#39;une société inscrite au RCS, délivrée par Infogreffe.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response</returns>
        V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet(string siren, string context, string recipient, string _object, int operationIndex = 0);

        /// <summary>
        /// Mandataires sociaux
        /// </summary>
        /// <remarks>
        /// Liste des mandataires sociaux d&#39;une société inscrite au RCS, délivrée par Infogreffe.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response</returns>
        ApiResponse<V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response> V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGetWithHttpInfo(string siren, string context, string recipient, string _object, int operationIndex = 0);
        /// <summary>
        /// Actes
        /// </summary>
        /// <remarks>
        /// Actes issus des greffes et archivés à l’Institut national de propriété industrielle (Inpi). 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InpiUnitesLegalesSirenActesGet200Response</returns>
        V3InpiUnitesLegalesSirenActesGet200Response V3InpiUnitesLegalesSirenActesGet(string context, string recipient, string _object, string siren, int operationIndex = 0);

        /// <summary>
        /// Actes
        /// </summary>
        /// <remarks>
        /// Actes issus des greffes et archivés à l’Institut national de propriété industrielle (Inpi). 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InpiUnitesLegalesSirenActesGet200Response</returns>
        ApiResponse<V3InpiUnitesLegalesSirenActesGet200Response> V3InpiUnitesLegalesSirenActesGetWithHttpInfo(string context, string recipient, string _object, string siren, int operationIndex = 0);
        /// <summary>
        /// Adresse établissement diffusible
        /// </summary>
        /// <remarks>
        /// Adresse d&#39;un établissement diffusible inscrit au répertoire Sirene.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InseeSireneEtablissementsSiretAdresseGet200Response</returns>
        V3InseeSireneEtablissementsSiretAdresseGet200Response V3InseeSireneEtablissementsDiffusiblesSiretAdresseGet(string siret, string context, string recipient, string _object, int operationIndex = 0);

        /// <summary>
        /// Adresse établissement diffusible
        /// </summary>
        /// <remarks>
        /// Adresse d&#39;un établissement diffusible inscrit au répertoire Sirene.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InseeSireneEtablissementsSiretAdresseGet200Response</returns>
        ApiResponse<V3InseeSireneEtablissementsSiretAdresseGet200Response> V3InseeSireneEtablissementsDiffusiblesSiretAdresseGetWithHttpInfo(string siret, string context, string recipient, string _object, int operationIndex = 0);
        /// <summary>
        /// Données établissement diffusible
        /// </summary>
        /// <remarks>
        /// Informations générales concernant un établissement diffusible inscrit au répertoire Sirene.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InseeSireneEtablissementsDiffusiblesSiretGet200Response</returns>
        V3InseeSireneEtablissementsDiffusiblesSiretGet200Response V3InseeSireneEtablissementsDiffusiblesSiretGet(string siret, string context, string recipient, string _object, int operationIndex = 0);

        /// <summary>
        /// Données établissement diffusible
        /// </summary>
        /// <remarks>
        /// Informations générales concernant un établissement diffusible inscrit au répertoire Sirene.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InseeSireneEtablissementsDiffusiblesSiretGet200Response</returns>
        ApiResponse<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response> V3InseeSireneEtablissementsDiffusiblesSiretGetWithHttpInfo(string siret, string context, string recipient, string _object, int operationIndex = 0);
        /// <summary>
        /// Adresse établissement
        /// </summary>
        /// <remarks>
        /// Adresse d&#39;un établissement inscrit au répertoire Sirene. Tous les établissements sont appelables, y compris les non-diffusibles.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InseeSireneEtablissementsSiretAdresseGet200Response</returns>
        V3InseeSireneEtablissementsSiretAdresseGet200Response V3InseeSireneEtablissementsSiretAdresseGet(string siret, string context, string recipient, string _object, int operationIndex = 0);

        /// <summary>
        /// Adresse établissement
        /// </summary>
        /// <remarks>
        /// Adresse d&#39;un établissement inscrit au répertoire Sirene. Tous les établissements sont appelables, y compris les non-diffusibles.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InseeSireneEtablissementsSiretAdresseGet200Response</returns>
        ApiResponse<V3InseeSireneEtablissementsSiretAdresseGet200Response> V3InseeSireneEtablissementsSiretAdresseGetWithHttpInfo(string siret, string context, string recipient, string _object, int operationIndex = 0);
        /// <summary>
        /// Données établissement
        /// </summary>
        /// <remarks>
        /// Informations générales concernant un établissement inscrit au répertoire Sirene. Tous les établissements sont appelables, y compris les non-diffusibles.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InseeSireneEtablissementsSiretGet200Response</returns>
        V3InseeSireneEtablissementsSiretGet200Response V3InseeSireneEtablissementsSiretGet(string siret, string context, string recipient, string _object, int operationIndex = 0);

        /// <summary>
        /// Données établissement
        /// </summary>
        /// <remarks>
        /// Informations générales concernant un établissement inscrit au répertoire Sirene. Tous les établissements sont appelables, y compris les non-diffusibles.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InseeSireneEtablissementsSiretGet200Response</returns>
        ApiResponse<V3InseeSireneEtablissementsSiretGet200Response> V3InseeSireneEtablissementsSiretGetWithHttpInfo(string siret, string context, string recipient, string _object, int operationIndex = 0);
        /// <summary>
        /// Données unité légale diffusible
        /// </summary>
        /// <remarks>
        /// Informations de référence d&#39;une unité légale (entreprise, association ou administration) diffusible, inscrite au répertoire Sirene.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response</returns>
        V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response V3InseeSireneUnitesLegalesDiffusiblesSirenGet(string siren, string context, string recipient, string _object, int operationIndex = 0);

        /// <summary>
        /// Données unité légale diffusible
        /// </summary>
        /// <remarks>
        /// Informations de référence d&#39;une unité légale (entreprise, association ou administration) diffusible, inscrite au répertoire Sirene.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response</returns>
        ApiResponse<V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response> V3InseeSireneUnitesLegalesDiffusiblesSirenGetWithHttpInfo(string siren, string context, string recipient, string _object, int operationIndex = 0);
        /// <summary>
        /// Données siège social diffusible
        /// </summary>
        /// <remarks>
        /// Informations générales concernant le siège d&#39;une unité légale diffusible inscrite au répertoire Sirene.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InseeSireneEtablissementsDiffusiblesSiretGet200Response</returns>
        V3InseeSireneEtablissementsDiffusiblesSiretGet200Response V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGet(string siren, string context, string recipient, string _object, int operationIndex = 0);

        /// <summary>
        /// Données siège social diffusible
        /// </summary>
        /// <remarks>
        /// Informations générales concernant le siège d&#39;une unité légale diffusible inscrite au répertoire Sirene.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InseeSireneEtablissementsDiffusiblesSiretGet200Response</returns>
        ApiResponse<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response> V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGetWithHttpInfo(string siren, string context, string recipient, string _object, int operationIndex = 0);
        /// <summary>
        /// Données unité légale
        /// </summary>
        /// <remarks>
        /// Informations de référence d&#39;une unité légale (entreprise, association ou administration) inscrite au répertoire Sirene. Toutes les unités légales sont appelables, y compris les non-diffusibles.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InseeSireneUnitesLegalesSirenGet200Response</returns>
        V3InseeSireneUnitesLegalesSirenGet200Response V3InseeSireneUnitesLegalesSirenGet(string siren, string context, string recipient, string _object, int operationIndex = 0);

        /// <summary>
        /// Données unité légale
        /// </summary>
        /// <remarks>
        /// Informations de référence d&#39;une unité légale (entreprise, association ou administration) inscrite au répertoire Sirene. Toutes les unités légales sont appelables, y compris les non-diffusibles.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InseeSireneUnitesLegalesSirenGet200Response</returns>
        ApiResponse<V3InseeSireneUnitesLegalesSirenGet200Response> V3InseeSireneUnitesLegalesSirenGetWithHttpInfo(string siren, string context, string recipient, string _object, int operationIndex = 0);
        /// <summary>
        /// Données siège social
        /// </summary>
        /// <remarks>
        /// Informations générales concernant le siège social d&#39;une unité légale inscrite au répertoire Sirene. Tous les sièges sociaux sont appelables, y compris les non-diffusibles.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InseeSireneEtablissementsSiretGet200Response</returns>
        V3InseeSireneEtablissementsSiretGet200Response V3InseeSireneUnitesLegalesSirenSiegeSocialGet(string siren, string context, string recipient, string _object, int operationIndex = 0);

        /// <summary>
        /// Données siège social
        /// </summary>
        /// <remarks>
        /// Informations générales concernant le siège social d&#39;une unité légale inscrite au répertoire Sirene. Tous les sièges sociaux sont appelables, y compris les non-diffusibles.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InseeSireneEtablissementsSiretGet200Response</returns>
        ApiResponse<V3InseeSireneEtablissementsSiretGet200Response> V3InseeSireneUnitesLegalesSirenSiegeSocialGetWithHttpInfo(string siren, string context, string recipient, string _object, int operationIndex = 0);
        /// <summary>
        /// Divers documents d&#39;une association
        /// </summary>
        /// <remarks>
        /// Divers documents administratifs en PDF tels que les statuts, le récépissé de déclaration de création, la liste des dirigeants...
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrRna">Siret de l&#39;association ou le numéro RNA</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response</returns>
        V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet(string siretOrRna, string context, string recipient, string _object, int operationIndex = 0);

        /// <summary>
        /// Divers documents d&#39;une association
        /// </summary>
        /// <remarks>
        /// Divers documents administratifs en PDF tels que les statuts, le récépissé de déclaration de création, la liste des dirigeants...
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrRna">Siret de l&#39;association ou le numéro RNA</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response</returns>
        ApiResponse<V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response> V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGetWithHttpInfo(string siretOrRna, string context, string recipient, string _object, int operationIndex = 0);
        /// <summary>
        /// Données du RNA d&#39;une association
        /// </summary>
        /// <remarks>
        /// Informations issues du répertoire national des associations (RNA), telles que la date de création, l’adresse du siège et les dirigeants.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrRna">Siret de l&#39;association ou le numéro RNA</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response</returns>
        V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response V3MinistereInterieurRnaAssociationsSiretOrRnaGet(string siretOrRna, string context, string recipient, string _object, int operationIndex = 0);

        /// <summary>
        /// Données du RNA d&#39;une association
        /// </summary>
        /// <remarks>
        /// Informations issues du répertoire national des associations (RNA), telles que la date de création, l’adresse du siège et les dirigeants.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrRna">Siret de l&#39;association ou le numéro RNA</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response</returns>
        ApiResponse<V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response> V3MinistereInterieurRnaAssociationsSiretOrRnaGetWithHttpInfo(string siretOrRna, string context, string recipient, string _object, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInformationsGnralesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Données du RNM d&#39;une entreprise artisanale
        /// </summary>
        /// <remarks>
        /// Informations de référence d&#39;une entreprise artisanale enregistrée au répertoire national des métiers (RNM).
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3CmaFranceRnmUnitesLegalesSirenGet200Response</returns>
        System.Threading.Tasks.Task<V3CmaFranceRnmUnitesLegalesSirenGet200Response> V3CmaFranceRnmUnitesLegalesSirenGetAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Données du RNM d&#39;une entreprise artisanale
        /// </summary>
        /// <remarks>
        /// Informations de référence d&#39;une entreprise artisanale enregistrée au répertoire national des métiers (RNM).
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3CmaFranceRnmUnitesLegalesSirenGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3CmaFranceRnmUnitesLegalesSirenGet200Response>> V3CmaFranceRnmUnitesLegalesSirenGetWithHttpInfoAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Immatriculation EORI
        /// </summary>
        /// <remarks>
        /// État du numéro EORI d&#39;une entreprise indiquant si celle-ci est immatriculée auprès des douanes dans le cadre de l’import/export en Union Européenne. 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrEori">Siret ou numéro EORI de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response</returns>
        System.Threading.Tasks.Task<V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response> V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGetAsync(string siretOrEori, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Immatriculation EORI
        /// </summary>
        /// <remarks>
        /// État du numéro EORI d&#39;une entreprise indiquant si celle-ci est immatriculée auprès des douanes dans le cadre de l’import/export en Union Européenne. 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrEori">Siret ou numéro EORI de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response>> V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGetWithHttpInfoAsync(string siretOrEori, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// N°TVA intracommunautaire français
        /// </summary>
        /// <remarks>
        /// Numéro de TVA intracommunautaire français, vérifié auprès de la Commission européenne.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response</returns>
        System.Threading.Tasks.Task<V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response> V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGetAsync(string context, string recipient, string _object, string siren, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// N°TVA intracommunautaire français
        /// </summary>
        /// <remarks>
        /// Numéro de TVA intracommunautaire français, vérifié auprès de la Commission européenne.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response>> V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGetWithHttpInfoAsync(string context, string recipient, string _object, string siren, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Conventions collectives
        /// </summary>
        /// <remarks>
        /// Identifiants des conventions collectives d’un établissement et lien vers les textes en vigueur.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response</returns>
        System.Threading.Tasks.Task<V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response> V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGetAsync(string context, string recipient, string _object, string siret, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Conventions collectives
        /// </summary>
        /// <remarks>
        /// Identifiants des conventions collectives d’un établissement et lien vers les textes en vigueur.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response>> V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGetWithHttpInfoAsync(string context, string recipient, string _object, string siret, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Extrait RCS
        /// </summary>
        /// <remarks>
        /// Extrait d&#39;une partie des données du registre du commerce et des sociétés (RCS) ; ainsi que les commentaires laissés par les greffiers.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response</returns>
        System.Threading.Tasks.Task<V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response> V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGetAsync(string context, string recipient, string _object, string siren, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extrait RCS
        /// </summary>
        /// <remarks>
        /// Extrait d&#39;une partie des données du registre du commerce et des sociétés (RCS) ; ainsi que les commentaires laissés par les greffiers.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response>> V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGetWithHttpInfoAsync(string context, string recipient, string _object, string siren, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mandataires sociaux
        /// </summary>
        /// <remarks>
        /// Liste des mandataires sociaux d&#39;une société inscrite au RCS, délivrée par Infogreffe.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response</returns>
        System.Threading.Tasks.Task<V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response> V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGetAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mandataires sociaux
        /// </summary>
        /// <remarks>
        /// Liste des mandataires sociaux d&#39;une société inscrite au RCS, délivrée par Infogreffe.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response>> V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGetWithHttpInfoAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Actes
        /// </summary>
        /// <remarks>
        /// Actes issus des greffes et archivés à l’Institut national de propriété industrielle (Inpi). 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InpiUnitesLegalesSirenActesGet200Response</returns>
        System.Threading.Tasks.Task<V3InpiUnitesLegalesSirenActesGet200Response> V3InpiUnitesLegalesSirenActesGetAsync(string context, string recipient, string _object, string siren, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Actes
        /// </summary>
        /// <remarks>
        /// Actes issus des greffes et archivés à l’Institut national de propriété industrielle (Inpi). 
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InpiUnitesLegalesSirenActesGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3InpiUnitesLegalesSirenActesGet200Response>> V3InpiUnitesLegalesSirenActesGetWithHttpInfoAsync(string context, string recipient, string _object, string siren, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adresse établissement diffusible
        /// </summary>
        /// <remarks>
        /// Adresse d&#39;un établissement diffusible inscrit au répertoire Sirene.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InseeSireneEtablissementsSiretAdresseGet200Response</returns>
        System.Threading.Tasks.Task<V3InseeSireneEtablissementsSiretAdresseGet200Response> V3InseeSireneEtablissementsDiffusiblesSiretAdresseGetAsync(string siret, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adresse établissement diffusible
        /// </summary>
        /// <remarks>
        /// Adresse d&#39;un établissement diffusible inscrit au répertoire Sirene.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InseeSireneEtablissementsSiretAdresseGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3InseeSireneEtablissementsSiretAdresseGet200Response>> V3InseeSireneEtablissementsDiffusiblesSiretAdresseGetWithHttpInfoAsync(string siret, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Données établissement diffusible
        /// </summary>
        /// <remarks>
        /// Informations générales concernant un établissement diffusible inscrit au répertoire Sirene.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InseeSireneEtablissementsDiffusiblesSiretGet200Response</returns>
        System.Threading.Tasks.Task<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response> V3InseeSireneEtablissementsDiffusiblesSiretGetAsync(string siret, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Données établissement diffusible
        /// </summary>
        /// <remarks>
        /// Informations générales concernant un établissement diffusible inscrit au répertoire Sirene.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InseeSireneEtablissementsDiffusiblesSiretGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response>> V3InseeSireneEtablissementsDiffusiblesSiretGetWithHttpInfoAsync(string siret, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adresse établissement
        /// </summary>
        /// <remarks>
        /// Adresse d&#39;un établissement inscrit au répertoire Sirene. Tous les établissements sont appelables, y compris les non-diffusibles.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InseeSireneEtablissementsSiretAdresseGet200Response</returns>
        System.Threading.Tasks.Task<V3InseeSireneEtablissementsSiretAdresseGet200Response> V3InseeSireneEtablissementsSiretAdresseGetAsync(string siret, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adresse établissement
        /// </summary>
        /// <remarks>
        /// Adresse d&#39;un établissement inscrit au répertoire Sirene. Tous les établissements sont appelables, y compris les non-diffusibles.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InseeSireneEtablissementsSiretAdresseGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3InseeSireneEtablissementsSiretAdresseGet200Response>> V3InseeSireneEtablissementsSiretAdresseGetWithHttpInfoAsync(string siret, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Données établissement
        /// </summary>
        /// <remarks>
        /// Informations générales concernant un établissement inscrit au répertoire Sirene. Tous les établissements sont appelables, y compris les non-diffusibles.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InseeSireneEtablissementsSiretGet200Response</returns>
        System.Threading.Tasks.Task<V3InseeSireneEtablissementsSiretGet200Response> V3InseeSireneEtablissementsSiretGetAsync(string siret, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Données établissement
        /// </summary>
        /// <remarks>
        /// Informations générales concernant un établissement inscrit au répertoire Sirene. Tous les établissements sont appelables, y compris les non-diffusibles.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InseeSireneEtablissementsSiretGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3InseeSireneEtablissementsSiretGet200Response>> V3InseeSireneEtablissementsSiretGetWithHttpInfoAsync(string siret, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Données unité légale diffusible
        /// </summary>
        /// <remarks>
        /// Informations de référence d&#39;une unité légale (entreprise, association ou administration) diffusible, inscrite au répertoire Sirene.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response</returns>
        System.Threading.Tasks.Task<V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response> V3InseeSireneUnitesLegalesDiffusiblesSirenGetAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Données unité légale diffusible
        /// </summary>
        /// <remarks>
        /// Informations de référence d&#39;une unité légale (entreprise, association ou administration) diffusible, inscrite au répertoire Sirene.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response>> V3InseeSireneUnitesLegalesDiffusiblesSirenGetWithHttpInfoAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Données siège social diffusible
        /// </summary>
        /// <remarks>
        /// Informations générales concernant le siège d&#39;une unité légale diffusible inscrite au répertoire Sirene.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InseeSireneEtablissementsDiffusiblesSiretGet200Response</returns>
        System.Threading.Tasks.Task<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response> V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGetAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Données siège social diffusible
        /// </summary>
        /// <remarks>
        /// Informations générales concernant le siège d&#39;une unité légale diffusible inscrite au répertoire Sirene.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InseeSireneEtablissementsDiffusiblesSiretGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response>> V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGetWithHttpInfoAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Données unité légale
        /// </summary>
        /// <remarks>
        /// Informations de référence d&#39;une unité légale (entreprise, association ou administration) inscrite au répertoire Sirene. Toutes les unités légales sont appelables, y compris les non-diffusibles.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InseeSireneUnitesLegalesSirenGet200Response</returns>
        System.Threading.Tasks.Task<V3InseeSireneUnitesLegalesSirenGet200Response> V3InseeSireneUnitesLegalesSirenGetAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Données unité légale
        /// </summary>
        /// <remarks>
        /// Informations de référence d&#39;une unité légale (entreprise, association ou administration) inscrite au répertoire Sirene. Toutes les unités légales sont appelables, y compris les non-diffusibles.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InseeSireneUnitesLegalesSirenGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3InseeSireneUnitesLegalesSirenGet200Response>> V3InseeSireneUnitesLegalesSirenGetWithHttpInfoAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Données siège social
        /// </summary>
        /// <remarks>
        /// Informations générales concernant le siège social d&#39;une unité légale inscrite au répertoire Sirene. Tous les sièges sociaux sont appelables, y compris les non-diffusibles.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InseeSireneEtablissementsSiretGet200Response</returns>
        System.Threading.Tasks.Task<V3InseeSireneEtablissementsSiretGet200Response> V3InseeSireneUnitesLegalesSirenSiegeSocialGetAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Données siège social
        /// </summary>
        /// <remarks>
        /// Informations générales concernant le siège social d&#39;une unité légale inscrite au répertoire Sirene. Tous les sièges sociaux sont appelables, y compris les non-diffusibles.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InseeSireneEtablissementsSiretGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3InseeSireneEtablissementsSiretGet200Response>> V3InseeSireneUnitesLegalesSirenSiegeSocialGetWithHttpInfoAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Divers documents d&#39;une association
        /// </summary>
        /// <remarks>
        /// Divers documents administratifs en PDF tels que les statuts, le récépissé de déclaration de création, la liste des dirigeants...
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrRna">Siret de l&#39;association ou le numéro RNA</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response</returns>
        System.Threading.Tasks.Task<V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response> V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGetAsync(string siretOrRna, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Divers documents d&#39;une association
        /// </summary>
        /// <remarks>
        /// Divers documents administratifs en PDF tels que les statuts, le récépissé de déclaration de création, la liste des dirigeants...
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrRna">Siret de l&#39;association ou le numéro RNA</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response>> V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGetWithHttpInfoAsync(string siretOrRna, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Données du RNA d&#39;une association
        /// </summary>
        /// <remarks>
        /// Informations issues du répertoire national des associations (RNA), telles que la date de création, l’adresse du siège et les dirigeants.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrRna">Siret de l&#39;association ou le numéro RNA</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response</returns>
        System.Threading.Tasks.Task<V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response> V3MinistereInterieurRnaAssociationsSiretOrRnaGetAsync(string siretOrRna, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Données du RNA d&#39;une association
        /// </summary>
        /// <remarks>
        /// Informations issues du répertoire national des associations (RNA), telles que la date de création, l’adresse du siège et les dirigeants.
        /// </remarks>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrRna">Siret de l&#39;association ou le numéro RNA</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response>> V3MinistereInterieurRnaAssociationsSiretOrRnaGetWithHttpInfoAsync(string siretOrRna, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInformationsGnralesApi : IInformationsGnralesApiSync, IInformationsGnralesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InformationsGnralesApi : IInformationsGnralesApi
    {
        private EntreprisesApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InformationsGnralesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InformationsGnralesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InformationsGnralesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InformationsGnralesApi(string basePath)
        {
            this.Configuration = EntreprisesApi.Client.Configuration.MergeConfigurations(
                EntreprisesApi.Client.GlobalConfiguration.Instance,
                new EntreprisesApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EntreprisesApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EntreprisesApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EntreprisesApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InformationsGnralesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InformationsGnralesApi(EntreprisesApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EntreprisesApi.Client.Configuration.MergeConfigurations(
                EntreprisesApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EntreprisesApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EntreprisesApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EntreprisesApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InformationsGnralesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InformationsGnralesApi(EntreprisesApi.Client.ISynchronousClient client, EntreprisesApi.Client.IAsynchronousClient asyncClient, EntreprisesApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EntreprisesApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EntreprisesApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EntreprisesApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EntreprisesApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EntreprisesApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Données du RNM d&#39;une entreprise artisanale Informations de référence d&#39;une entreprise artisanale enregistrée au répertoire national des métiers (RNM).
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3CmaFranceRnmUnitesLegalesSirenGet200Response</returns>
        public V3CmaFranceRnmUnitesLegalesSirenGet200Response V3CmaFranceRnmUnitesLegalesSirenGet(string siren, string context, string recipient, string _object, int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3CmaFranceRnmUnitesLegalesSirenGet200Response> localVarResponse = V3CmaFranceRnmUnitesLegalesSirenGetWithHttpInfo(siren, context, recipient, _object);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Données du RNM d&#39;une entreprise artisanale Informations de référence d&#39;une entreprise artisanale enregistrée au répertoire national des métiers (RNM).
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3CmaFranceRnmUnitesLegalesSirenGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3CmaFranceRnmUnitesLegalesSirenGet200Response> V3CmaFranceRnmUnitesLegalesSirenGetWithHttpInfo(string siren, string context, string recipient, string _object, int operationIndex = 0)
        {
            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling InformationsGnralesApi->V3CmaFranceRnmUnitesLegalesSirenGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3CmaFranceRnmUnitesLegalesSirenGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3CmaFranceRnmUnitesLegalesSirenGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3CmaFranceRnmUnitesLegalesSirenGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3CmaFranceRnmUnitesLegalesSirenGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3CmaFranceRnmUnitesLegalesSirenGet200Response>("/v3/cma_france/rnm/unites_legales/{siren}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3CmaFranceRnmUnitesLegalesSirenGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Données du RNM d&#39;une entreprise artisanale Informations de référence d&#39;une entreprise artisanale enregistrée au répertoire national des métiers (RNM).
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3CmaFranceRnmUnitesLegalesSirenGet200Response</returns>
        public async System.Threading.Tasks.Task<V3CmaFranceRnmUnitesLegalesSirenGet200Response> V3CmaFranceRnmUnitesLegalesSirenGetAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3CmaFranceRnmUnitesLegalesSirenGet200Response> localVarResponse = await V3CmaFranceRnmUnitesLegalesSirenGetWithHttpInfoAsync(siren, context, recipient, _object, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Données du RNM d&#39;une entreprise artisanale Informations de référence d&#39;une entreprise artisanale enregistrée au répertoire national des métiers (RNM).
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3CmaFranceRnmUnitesLegalesSirenGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3CmaFranceRnmUnitesLegalesSirenGet200Response>> V3CmaFranceRnmUnitesLegalesSirenGetWithHttpInfoAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling InformationsGnralesApi->V3CmaFranceRnmUnitesLegalesSirenGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3CmaFranceRnmUnitesLegalesSirenGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3CmaFranceRnmUnitesLegalesSirenGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3CmaFranceRnmUnitesLegalesSirenGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3CmaFranceRnmUnitesLegalesSirenGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3CmaFranceRnmUnitesLegalesSirenGet200Response>("/v3/cma_france/rnm/unites_legales/{siren}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3CmaFranceRnmUnitesLegalesSirenGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Immatriculation EORI État du numéro EORI d&#39;une entreprise indiquant si celle-ci est immatriculée auprès des douanes dans le cadre de l’import/export en Union Européenne. 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrEori">Siret ou numéro EORI de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response</returns>
        public V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet(string siretOrEori, string context, string recipient, string _object, int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response> localVarResponse = V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGetWithHttpInfo(siretOrEori, context, recipient, _object);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Immatriculation EORI État du numéro EORI d&#39;une entreprise indiquant si celle-ci est immatriculée auprès des douanes dans le cadre de l’import/export en Union Européenne. 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrEori">Siret ou numéro EORI de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response> V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGetWithHttpInfo(string siretOrEori, string context, string recipient, string _object, int operationIndex = 0)
        {
            // verify the required parameter 'siretOrEori' is set
            if (siretOrEori == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siretOrEori' when calling InformationsGnralesApi->V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siret_or_eori", EntreprisesApi.Client.ClientUtils.ParameterToString(siretOrEori)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response>("/v3/douanes/etablissements/{siret_or_eori}/immatriculations_eori", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Immatriculation EORI État du numéro EORI d&#39;une entreprise indiquant si celle-ci est immatriculée auprès des douanes dans le cadre de l’import/export en Union Européenne. 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrEori">Siret ou numéro EORI de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response</returns>
        public async System.Threading.Tasks.Task<V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response> V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGetAsync(string siretOrEori, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response> localVarResponse = await V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGetWithHttpInfoAsync(siretOrEori, context, recipient, _object, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Immatriculation EORI État du numéro EORI d&#39;une entreprise indiquant si celle-ci est immatriculée auprès des douanes dans le cadre de l’import/export en Union Européenne. 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrEori">Siret ou numéro EORI de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response>> V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGetWithHttpInfoAsync(string siretOrEori, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'siretOrEori' is set
            if (siretOrEori == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siretOrEori' when calling InformationsGnralesApi->V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siret_or_eori", EntreprisesApi.Client.ClientUtils.ParameterToString(siretOrEori)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200Response>("/v3/douanes/etablissements/{siret_or_eori}/immatriculations_eori", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// N°TVA intracommunautaire français Numéro de TVA intracommunautaire français, vérifié auprès de la Commission européenne.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response</returns>
        public V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet(string context, string recipient, string _object, string siren, int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response> localVarResponse = V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGetWithHttpInfo(context, recipient, _object, siren);
            return localVarResponse.Data;
        }

        /// <summary>
        /// N°TVA intracommunautaire français Numéro de TVA intracommunautaire français, vérifié auprès de la Commission européenne.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response> V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGetWithHttpInfo(string context, string recipient, string _object, string siren, int operationIndex = 0)
        {
            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet");
            }

            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling InformationsGnralesApi->V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response>("/v3/european_commission/unites_legales/{siren}/numero_tva", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// N°TVA intracommunautaire français Numéro de TVA intracommunautaire français, vérifié auprès de la Commission européenne.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response</returns>
        public async System.Threading.Tasks.Task<V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response> V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGetAsync(string context, string recipient, string _object, string siren, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response> localVarResponse = await V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGetWithHttpInfoAsync(context, recipient, _object, siren, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// N°TVA intracommunautaire français Numéro de TVA intracommunautaire français, vérifié auprès de la Commission européenne.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response>> V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGetWithHttpInfoAsync(string context, string recipient, string _object, string siren, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet");
            }

            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling InformationsGnralesApi->V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet200Response>("/v3/european_commission/unites_legales/{siren}/numero_tva", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3EuropeanCommissionUnitesLegalesSirenNumeroTvaGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Conventions collectives Identifiants des conventions collectives d’un établissement et lien vers les textes en vigueur.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response</returns>
        public V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet(string context, string recipient, string _object, string siret, int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response> localVarResponse = V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGetWithHttpInfo(context, recipient, _object, siret);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Conventions collectives Identifiants des conventions collectives d’un établissement et lien vers les textes en vigueur.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response> V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGetWithHttpInfo(string context, string recipient, string _object, string siret, int operationIndex = 0)
        {
            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet");
            }

            // verify the required parameter 'siret' is set
            if (siret == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siret' when calling InformationsGnralesApi->V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siret", EntreprisesApi.Client.ClientUtils.ParameterToString(siret)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response>("/v3/fabrique_numerique_ministeres_sociaux/etablissements/{siret}/conventions_collectives", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Conventions collectives Identifiants des conventions collectives d’un établissement et lien vers les textes en vigueur.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response</returns>
        public async System.Threading.Tasks.Task<V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response> V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGetAsync(string context, string recipient, string _object, string siret, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response> localVarResponse = await V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGetWithHttpInfoAsync(context, recipient, _object, siret, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Conventions collectives Identifiants des conventions collectives d’un établissement et lien vers les textes en vigueur.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response>> V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGetWithHttpInfoAsync(string context, string recipient, string _object, string siret, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet");
            }

            // verify the required parameter 'siret' is set
            if (siret == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siret' when calling InformationsGnralesApi->V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siret", EntreprisesApi.Client.ClientUtils.ParameterToString(siret)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet200Response>("/v3/fabrique_numerique_ministeres_sociaux/etablissements/{siret}/conventions_collectives", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3FabriqueNumeriqueMinisteresSociauxEtablissementsSiretConventionsCollectivesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extrait RCS Extrait d&#39;une partie des données du registre du commerce et des sociétés (RCS) ; ainsi que les commentaires laissés par les greffiers.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response</returns>
        public V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet(string context, string recipient, string _object, string siren, int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response> localVarResponse = V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGetWithHttpInfo(context, recipient, _object, siren);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extrait RCS Extrait d&#39;une partie des données du registre du commerce et des sociétés (RCS) ; ainsi que les commentaires laissés par les greffiers.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response> V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGetWithHttpInfo(string context, string recipient, string _object, string siren, int operationIndex = 0)
        {
            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet");
            }

            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling InformationsGnralesApi->V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response>("/v3/infogreffe/rcs/unites_legales/{siren}/extrait_kbis", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extrait RCS Extrait d&#39;une partie des données du registre du commerce et des sociétés (RCS) ; ainsi que les commentaires laissés par les greffiers.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response</returns>
        public async System.Threading.Tasks.Task<V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response> V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGetAsync(string context, string recipient, string _object, string siren, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response> localVarResponse = await V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGetWithHttpInfoAsync(context, recipient, _object, siren, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extrait RCS Extrait d&#39;une partie des données du registre du commerce et des sociétés (RCS) ; ainsi que les commentaires laissés par les greffiers.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response>> V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGetWithHttpInfoAsync(string context, string recipient, string _object, string siren, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet");
            }

            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling InformationsGnralesApi->V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet200Response>("/v3/infogreffe/rcs/unites_legales/{siren}/extrait_kbis", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InfogreffeRcsUnitesLegalesSirenExtraitKbisGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mandataires sociaux Liste des mandataires sociaux d&#39;une société inscrite au RCS, délivrée par Infogreffe.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response</returns>
        public V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet(string siren, string context, string recipient, string _object, int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response> localVarResponse = V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGetWithHttpInfo(siren, context, recipient, _object);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mandataires sociaux Liste des mandataires sociaux d&#39;une société inscrite au RCS, délivrée par Infogreffe.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response> V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGetWithHttpInfo(string siren, string context, string recipient, string _object, int operationIndex = 0)
        {
            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling InformationsGnralesApi->V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response>("/v3/infogreffe/rcs/unites_legales/{siren}/mandataires_sociaux", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mandataires sociaux Liste des mandataires sociaux d&#39;une société inscrite au RCS, délivrée par Infogreffe.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response</returns>
        public async System.Threading.Tasks.Task<V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response> V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGetAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response> localVarResponse = await V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGetWithHttpInfoAsync(siren, context, recipient, _object, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mandataires sociaux Liste des mandataires sociaux d&#39;une société inscrite au RCS, délivrée par Infogreffe.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response>> V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGetWithHttpInfoAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling InformationsGnralesApi->V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet200Response>("/v3/infogreffe/rcs/unites_legales/{siren}/mandataires_sociaux", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InfogreffeRcsUnitesLegalesSirenMandatairesSociauxGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Actes Actes issus des greffes et archivés à l’Institut national de propriété industrielle (Inpi). 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InpiUnitesLegalesSirenActesGet200Response</returns>
        public V3InpiUnitesLegalesSirenActesGet200Response V3InpiUnitesLegalesSirenActesGet(string context, string recipient, string _object, string siren, int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3InpiUnitesLegalesSirenActesGet200Response> localVarResponse = V3InpiUnitesLegalesSirenActesGetWithHttpInfo(context, recipient, _object, siren);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Actes Actes issus des greffes et archivés à l’Institut national de propriété industrielle (Inpi). 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InpiUnitesLegalesSirenActesGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3InpiUnitesLegalesSirenActesGet200Response> V3InpiUnitesLegalesSirenActesGetWithHttpInfo(string context, string recipient, string _object, string siren, int operationIndex = 0)
        {
            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InpiUnitesLegalesSirenActesGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InpiUnitesLegalesSirenActesGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InpiUnitesLegalesSirenActesGet");
            }

            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling InformationsGnralesApi->V3InpiUnitesLegalesSirenActesGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InpiUnitesLegalesSirenActesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3InpiUnitesLegalesSirenActesGet200Response>("/v3/inpi/unites_legales/{siren}/actes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InpiUnitesLegalesSirenActesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Actes Actes issus des greffes et archivés à l’Institut national de propriété industrielle (Inpi). 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InpiUnitesLegalesSirenActesGet200Response</returns>
        public async System.Threading.Tasks.Task<V3InpiUnitesLegalesSirenActesGet200Response> V3InpiUnitesLegalesSirenActesGetAsync(string context, string recipient, string _object, string siren, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3InpiUnitesLegalesSirenActesGet200Response> localVarResponse = await V3InpiUnitesLegalesSirenActesGetWithHttpInfoAsync(context, recipient, _object, siren, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Actes Actes issus des greffes et archivés à l’Institut national de propriété industrielle (Inpi). 
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="siren"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InpiUnitesLegalesSirenActesGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3InpiUnitesLegalesSirenActesGet200Response>> V3InpiUnitesLegalesSirenActesGetWithHttpInfoAsync(string context, string recipient, string _object, string siren, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InpiUnitesLegalesSirenActesGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InpiUnitesLegalesSirenActesGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InpiUnitesLegalesSirenActesGet");
            }

            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling InformationsGnralesApi->V3InpiUnitesLegalesSirenActesGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InpiUnitesLegalesSirenActesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3InpiUnitesLegalesSirenActesGet200Response>("/v3/inpi/unites_legales/{siren}/actes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InpiUnitesLegalesSirenActesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adresse établissement diffusible Adresse d&#39;un établissement diffusible inscrit au répertoire Sirene.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InseeSireneEtablissementsSiretAdresseGet200Response</returns>
        public V3InseeSireneEtablissementsSiretAdresseGet200Response V3InseeSireneEtablissementsDiffusiblesSiretAdresseGet(string siret, string context, string recipient, string _object, int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsSiretAdresseGet200Response> localVarResponse = V3InseeSireneEtablissementsDiffusiblesSiretAdresseGetWithHttpInfo(siret, context, recipient, _object);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adresse établissement diffusible Adresse d&#39;un établissement diffusible inscrit au répertoire Sirene.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InseeSireneEtablissementsSiretAdresseGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsSiretAdresseGet200Response> V3InseeSireneEtablissementsDiffusiblesSiretAdresseGetWithHttpInfo(string siret, string context, string recipient, string _object, int operationIndex = 0)
        {
            // verify the required parameter 'siret' is set
            if (siret == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siret' when calling InformationsGnralesApi->V3InseeSireneEtablissementsDiffusiblesSiretAdresseGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InseeSireneEtablissementsDiffusiblesSiretAdresseGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InseeSireneEtablissementsDiffusiblesSiretAdresseGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InseeSireneEtablissementsDiffusiblesSiretAdresseGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siret", EntreprisesApi.Client.ClientUtils.ParameterToString(siret)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InseeSireneEtablissementsDiffusiblesSiretAdresseGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3InseeSireneEtablissementsSiretAdresseGet200Response>("/v3/insee/sirene/etablissements/diffusibles/{siret}/adresse", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InseeSireneEtablissementsDiffusiblesSiretAdresseGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adresse établissement diffusible Adresse d&#39;un établissement diffusible inscrit au répertoire Sirene.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InseeSireneEtablissementsSiretAdresseGet200Response</returns>
        public async System.Threading.Tasks.Task<V3InseeSireneEtablissementsSiretAdresseGet200Response> V3InseeSireneEtablissementsDiffusiblesSiretAdresseGetAsync(string siret, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsSiretAdresseGet200Response> localVarResponse = await V3InseeSireneEtablissementsDiffusiblesSiretAdresseGetWithHttpInfoAsync(siret, context, recipient, _object, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adresse établissement diffusible Adresse d&#39;un établissement diffusible inscrit au répertoire Sirene.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InseeSireneEtablissementsSiretAdresseGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsSiretAdresseGet200Response>> V3InseeSireneEtablissementsDiffusiblesSiretAdresseGetWithHttpInfoAsync(string siret, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'siret' is set
            if (siret == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siret' when calling InformationsGnralesApi->V3InseeSireneEtablissementsDiffusiblesSiretAdresseGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InseeSireneEtablissementsDiffusiblesSiretAdresseGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InseeSireneEtablissementsDiffusiblesSiretAdresseGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InseeSireneEtablissementsDiffusiblesSiretAdresseGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siret", EntreprisesApi.Client.ClientUtils.ParameterToString(siret)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InseeSireneEtablissementsDiffusiblesSiretAdresseGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3InseeSireneEtablissementsSiretAdresseGet200Response>("/v3/insee/sirene/etablissements/diffusibles/{siret}/adresse", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InseeSireneEtablissementsDiffusiblesSiretAdresseGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Données établissement diffusible Informations générales concernant un établissement diffusible inscrit au répertoire Sirene.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InseeSireneEtablissementsDiffusiblesSiretGet200Response</returns>
        public V3InseeSireneEtablissementsDiffusiblesSiretGet200Response V3InseeSireneEtablissementsDiffusiblesSiretGet(string siret, string context, string recipient, string _object, int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response> localVarResponse = V3InseeSireneEtablissementsDiffusiblesSiretGetWithHttpInfo(siret, context, recipient, _object);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Données établissement diffusible Informations générales concernant un établissement diffusible inscrit au répertoire Sirene.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InseeSireneEtablissementsDiffusiblesSiretGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response> V3InseeSireneEtablissementsDiffusiblesSiretGetWithHttpInfo(string siret, string context, string recipient, string _object, int operationIndex = 0)
        {
            // verify the required parameter 'siret' is set
            if (siret == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siret' when calling InformationsGnralesApi->V3InseeSireneEtablissementsDiffusiblesSiretGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InseeSireneEtablissementsDiffusiblesSiretGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InseeSireneEtablissementsDiffusiblesSiretGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InseeSireneEtablissementsDiffusiblesSiretGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siret", EntreprisesApi.Client.ClientUtils.ParameterToString(siret)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InseeSireneEtablissementsDiffusiblesSiretGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response>("/v3/insee/sirene/etablissements/diffusibles/{siret}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InseeSireneEtablissementsDiffusiblesSiretGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Données établissement diffusible Informations générales concernant un établissement diffusible inscrit au répertoire Sirene.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InseeSireneEtablissementsDiffusiblesSiretGet200Response</returns>
        public async System.Threading.Tasks.Task<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response> V3InseeSireneEtablissementsDiffusiblesSiretGetAsync(string siret, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response> localVarResponse = await V3InseeSireneEtablissementsDiffusiblesSiretGetWithHttpInfoAsync(siret, context, recipient, _object, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Données établissement diffusible Informations générales concernant un établissement diffusible inscrit au répertoire Sirene.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InseeSireneEtablissementsDiffusiblesSiretGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response>> V3InseeSireneEtablissementsDiffusiblesSiretGetWithHttpInfoAsync(string siret, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'siret' is set
            if (siret == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siret' when calling InformationsGnralesApi->V3InseeSireneEtablissementsDiffusiblesSiretGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InseeSireneEtablissementsDiffusiblesSiretGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InseeSireneEtablissementsDiffusiblesSiretGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InseeSireneEtablissementsDiffusiblesSiretGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siret", EntreprisesApi.Client.ClientUtils.ParameterToString(siret)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InseeSireneEtablissementsDiffusiblesSiretGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response>("/v3/insee/sirene/etablissements/diffusibles/{siret}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InseeSireneEtablissementsDiffusiblesSiretGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adresse établissement Adresse d&#39;un établissement inscrit au répertoire Sirene. Tous les établissements sont appelables, y compris les non-diffusibles.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InseeSireneEtablissementsSiretAdresseGet200Response</returns>
        public V3InseeSireneEtablissementsSiretAdresseGet200Response V3InseeSireneEtablissementsSiretAdresseGet(string siret, string context, string recipient, string _object, int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsSiretAdresseGet200Response> localVarResponse = V3InseeSireneEtablissementsSiretAdresseGetWithHttpInfo(siret, context, recipient, _object);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adresse établissement Adresse d&#39;un établissement inscrit au répertoire Sirene. Tous les établissements sont appelables, y compris les non-diffusibles.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InseeSireneEtablissementsSiretAdresseGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsSiretAdresseGet200Response> V3InseeSireneEtablissementsSiretAdresseGetWithHttpInfo(string siret, string context, string recipient, string _object, int operationIndex = 0)
        {
            // verify the required parameter 'siret' is set
            if (siret == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siret' when calling InformationsGnralesApi->V3InseeSireneEtablissementsSiretAdresseGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InseeSireneEtablissementsSiretAdresseGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InseeSireneEtablissementsSiretAdresseGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InseeSireneEtablissementsSiretAdresseGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siret", EntreprisesApi.Client.ClientUtils.ParameterToString(siret)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InseeSireneEtablissementsSiretAdresseGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3InseeSireneEtablissementsSiretAdresseGet200Response>("/v3/insee/sirene/etablissements/{siret}/adresse", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InseeSireneEtablissementsSiretAdresseGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adresse établissement Adresse d&#39;un établissement inscrit au répertoire Sirene. Tous les établissements sont appelables, y compris les non-diffusibles.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InseeSireneEtablissementsSiretAdresseGet200Response</returns>
        public async System.Threading.Tasks.Task<V3InseeSireneEtablissementsSiretAdresseGet200Response> V3InseeSireneEtablissementsSiretAdresseGetAsync(string siret, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsSiretAdresseGet200Response> localVarResponse = await V3InseeSireneEtablissementsSiretAdresseGetWithHttpInfoAsync(siret, context, recipient, _object, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adresse établissement Adresse d&#39;un établissement inscrit au répertoire Sirene. Tous les établissements sont appelables, y compris les non-diffusibles.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InseeSireneEtablissementsSiretAdresseGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsSiretAdresseGet200Response>> V3InseeSireneEtablissementsSiretAdresseGetWithHttpInfoAsync(string siret, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'siret' is set
            if (siret == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siret' when calling InformationsGnralesApi->V3InseeSireneEtablissementsSiretAdresseGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InseeSireneEtablissementsSiretAdresseGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InseeSireneEtablissementsSiretAdresseGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InseeSireneEtablissementsSiretAdresseGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siret", EntreprisesApi.Client.ClientUtils.ParameterToString(siret)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InseeSireneEtablissementsSiretAdresseGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3InseeSireneEtablissementsSiretAdresseGet200Response>("/v3/insee/sirene/etablissements/{siret}/adresse", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InseeSireneEtablissementsSiretAdresseGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Données établissement Informations générales concernant un établissement inscrit au répertoire Sirene. Tous les établissements sont appelables, y compris les non-diffusibles.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InseeSireneEtablissementsSiretGet200Response</returns>
        public V3InseeSireneEtablissementsSiretGet200Response V3InseeSireneEtablissementsSiretGet(string siret, string context, string recipient, string _object, int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsSiretGet200Response> localVarResponse = V3InseeSireneEtablissementsSiretGetWithHttpInfo(siret, context, recipient, _object);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Données établissement Informations générales concernant un établissement inscrit au répertoire Sirene. Tous les établissements sont appelables, y compris les non-diffusibles.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InseeSireneEtablissementsSiretGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsSiretGet200Response> V3InseeSireneEtablissementsSiretGetWithHttpInfo(string siret, string context, string recipient, string _object, int operationIndex = 0)
        {
            // verify the required parameter 'siret' is set
            if (siret == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siret' when calling InformationsGnralesApi->V3InseeSireneEtablissementsSiretGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InseeSireneEtablissementsSiretGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InseeSireneEtablissementsSiretGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InseeSireneEtablissementsSiretGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siret", EntreprisesApi.Client.ClientUtils.ParameterToString(siret)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InseeSireneEtablissementsSiretGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3InseeSireneEtablissementsSiretGet200Response>("/v3/insee/sirene/etablissements/{siret}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InseeSireneEtablissementsSiretGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Données établissement Informations générales concernant un établissement inscrit au répertoire Sirene. Tous les établissements sont appelables, y compris les non-diffusibles.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InseeSireneEtablissementsSiretGet200Response</returns>
        public async System.Threading.Tasks.Task<V3InseeSireneEtablissementsSiretGet200Response> V3InseeSireneEtablissementsSiretGetAsync(string siret, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsSiretGet200Response> localVarResponse = await V3InseeSireneEtablissementsSiretGetWithHttpInfoAsync(siret, context, recipient, _object, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Données établissement Informations générales concernant un établissement inscrit au répertoire Sirene. Tous les établissements sont appelables, y compris les non-diffusibles.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siret">Siret de l&#39;établissement</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InseeSireneEtablissementsSiretGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsSiretGet200Response>> V3InseeSireneEtablissementsSiretGetWithHttpInfoAsync(string siret, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'siret' is set
            if (siret == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siret' when calling InformationsGnralesApi->V3InseeSireneEtablissementsSiretGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InseeSireneEtablissementsSiretGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InseeSireneEtablissementsSiretGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InseeSireneEtablissementsSiretGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siret", EntreprisesApi.Client.ClientUtils.ParameterToString(siret)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InseeSireneEtablissementsSiretGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3InseeSireneEtablissementsSiretGet200Response>("/v3/insee/sirene/etablissements/{siret}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InseeSireneEtablissementsSiretGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Données unité légale diffusible Informations de référence d&#39;une unité légale (entreprise, association ou administration) diffusible, inscrite au répertoire Sirene.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response</returns>
        public V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response V3InseeSireneUnitesLegalesDiffusiblesSirenGet(string siren, string context, string recipient, string _object, int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response> localVarResponse = V3InseeSireneUnitesLegalesDiffusiblesSirenGetWithHttpInfo(siren, context, recipient, _object);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Données unité légale diffusible Informations de référence d&#39;une unité légale (entreprise, association ou administration) diffusible, inscrite au répertoire Sirene.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response> V3InseeSireneUnitesLegalesDiffusiblesSirenGetWithHttpInfo(string siren, string context, string recipient, string _object, int operationIndex = 0)
        {
            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesDiffusiblesSirenGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesDiffusiblesSirenGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesDiffusiblesSirenGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesDiffusiblesSirenGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InseeSireneUnitesLegalesDiffusiblesSirenGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response>("/v3/insee/sirene/unites_legales/diffusibles/{siren}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InseeSireneUnitesLegalesDiffusiblesSirenGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Données unité légale diffusible Informations de référence d&#39;une unité légale (entreprise, association ou administration) diffusible, inscrite au répertoire Sirene.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response</returns>
        public async System.Threading.Tasks.Task<V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response> V3InseeSireneUnitesLegalesDiffusiblesSirenGetAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response> localVarResponse = await V3InseeSireneUnitesLegalesDiffusiblesSirenGetWithHttpInfoAsync(siren, context, recipient, _object, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Données unité légale diffusible Informations de référence d&#39;une unité légale (entreprise, association ou administration) diffusible, inscrite au répertoire Sirene.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response>> V3InseeSireneUnitesLegalesDiffusiblesSirenGetWithHttpInfoAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesDiffusiblesSirenGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesDiffusiblesSirenGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesDiffusiblesSirenGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesDiffusiblesSirenGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InseeSireneUnitesLegalesDiffusiblesSirenGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3InseeSireneUnitesLegalesDiffusiblesSirenGet200Response>("/v3/insee/sirene/unites_legales/diffusibles/{siren}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InseeSireneUnitesLegalesDiffusiblesSirenGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Données siège social diffusible Informations générales concernant le siège d&#39;une unité légale diffusible inscrite au répertoire Sirene.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InseeSireneEtablissementsDiffusiblesSiretGet200Response</returns>
        public V3InseeSireneEtablissementsDiffusiblesSiretGet200Response V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGet(string siren, string context, string recipient, string _object, int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response> localVarResponse = V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGetWithHttpInfo(siren, context, recipient, _object);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Données siège social diffusible Informations générales concernant le siège d&#39;une unité légale diffusible inscrite au répertoire Sirene.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InseeSireneEtablissementsDiffusiblesSiretGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response> V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGetWithHttpInfo(string siren, string context, string recipient, string _object, int operationIndex = 0)
        {
            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response>("/v3/insee/sirene/unites_legales/diffusibles/{siren}/siege_social", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Données siège social diffusible Informations générales concernant le siège d&#39;une unité légale diffusible inscrite au répertoire Sirene.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InseeSireneEtablissementsDiffusiblesSiretGet200Response</returns>
        public async System.Threading.Tasks.Task<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response> V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGetAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response> localVarResponse = await V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGetWithHttpInfoAsync(siren, context, recipient, _object, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Données siège social diffusible Informations générales concernant le siège d&#39;une unité légale diffusible inscrite au répertoire Sirene.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InseeSireneEtablissementsDiffusiblesSiretGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response>> V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGetWithHttpInfoAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3InseeSireneEtablissementsDiffusiblesSiretGet200Response>("/v3/insee/sirene/unites_legales/diffusibles/{siren}/siege_social", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InseeSireneUnitesLegalesDiffusiblesSirenSiegeSocialGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Données unité légale Informations de référence d&#39;une unité légale (entreprise, association ou administration) inscrite au répertoire Sirene. Toutes les unités légales sont appelables, y compris les non-diffusibles.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InseeSireneUnitesLegalesSirenGet200Response</returns>
        public V3InseeSireneUnitesLegalesSirenGet200Response V3InseeSireneUnitesLegalesSirenGet(string siren, string context, string recipient, string _object, int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3InseeSireneUnitesLegalesSirenGet200Response> localVarResponse = V3InseeSireneUnitesLegalesSirenGetWithHttpInfo(siren, context, recipient, _object);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Données unité légale Informations de référence d&#39;une unité légale (entreprise, association ou administration) inscrite au répertoire Sirene. Toutes les unités légales sont appelables, y compris les non-diffusibles.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InseeSireneUnitesLegalesSirenGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3InseeSireneUnitesLegalesSirenGet200Response> V3InseeSireneUnitesLegalesSirenGetWithHttpInfo(string siren, string context, string recipient, string _object, int operationIndex = 0)
        {
            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesSirenGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesSirenGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesSirenGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesSirenGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InseeSireneUnitesLegalesSirenGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3InseeSireneUnitesLegalesSirenGet200Response>("/v3/insee/sirene/unites_legales/{siren}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InseeSireneUnitesLegalesSirenGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Données unité légale Informations de référence d&#39;une unité légale (entreprise, association ou administration) inscrite au répertoire Sirene. Toutes les unités légales sont appelables, y compris les non-diffusibles.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InseeSireneUnitesLegalesSirenGet200Response</returns>
        public async System.Threading.Tasks.Task<V3InseeSireneUnitesLegalesSirenGet200Response> V3InseeSireneUnitesLegalesSirenGetAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3InseeSireneUnitesLegalesSirenGet200Response> localVarResponse = await V3InseeSireneUnitesLegalesSirenGetWithHttpInfoAsync(siren, context, recipient, _object, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Données unité légale Informations de référence d&#39;une unité légale (entreprise, association ou administration) inscrite au répertoire Sirene. Toutes les unités légales sont appelables, y compris les non-diffusibles.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InseeSireneUnitesLegalesSirenGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3InseeSireneUnitesLegalesSirenGet200Response>> V3InseeSireneUnitesLegalesSirenGetWithHttpInfoAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesSirenGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesSirenGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesSirenGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesSirenGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InseeSireneUnitesLegalesSirenGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3InseeSireneUnitesLegalesSirenGet200Response>("/v3/insee/sirene/unites_legales/{siren}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InseeSireneUnitesLegalesSirenGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Données siège social Informations générales concernant le siège social d&#39;une unité légale inscrite au répertoire Sirene. Tous les sièges sociaux sont appelables, y compris les non-diffusibles.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3InseeSireneEtablissementsSiretGet200Response</returns>
        public V3InseeSireneEtablissementsSiretGet200Response V3InseeSireneUnitesLegalesSirenSiegeSocialGet(string siren, string context, string recipient, string _object, int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsSiretGet200Response> localVarResponse = V3InseeSireneUnitesLegalesSirenSiegeSocialGetWithHttpInfo(siren, context, recipient, _object);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Données siège social Informations générales concernant le siège social d&#39;une unité légale inscrite au répertoire Sirene. Tous les sièges sociaux sont appelables, y compris les non-diffusibles.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3InseeSireneEtablissementsSiretGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsSiretGet200Response> V3InseeSireneUnitesLegalesSirenSiegeSocialGetWithHttpInfo(string siren, string context, string recipient, string _object, int operationIndex = 0)
        {
            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesSirenSiegeSocialGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesSirenSiegeSocialGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesSirenSiegeSocialGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesSirenSiegeSocialGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InseeSireneUnitesLegalesSirenSiegeSocialGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3InseeSireneEtablissementsSiretGet200Response>("/v3/insee/sirene/unites_legales/{siren}/siege_social", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InseeSireneUnitesLegalesSirenSiegeSocialGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Données siège social Informations générales concernant le siège social d&#39;une unité légale inscrite au répertoire Sirene. Tous les sièges sociaux sont appelables, y compris les non-diffusibles.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3InseeSireneEtablissementsSiretGet200Response</returns>
        public async System.Threading.Tasks.Task<V3InseeSireneEtablissementsSiretGet200Response> V3InseeSireneUnitesLegalesSirenSiegeSocialGetAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsSiretGet200Response> localVarResponse = await V3InseeSireneUnitesLegalesSirenSiegeSocialGetWithHttpInfoAsync(siren, context, recipient, _object, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Données siège social Informations générales concernant le siège social d&#39;une unité légale inscrite au répertoire Sirene. Tous les sièges sociaux sont appelables, y compris les non-diffusibles.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siren">Siren de l&#39;entreprise</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3InseeSireneEtablissementsSiretGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3InseeSireneEtablissementsSiretGet200Response>> V3InseeSireneUnitesLegalesSirenSiegeSocialGetWithHttpInfoAsync(string siren, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'siren' is set
            if (siren == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siren' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesSirenSiegeSocialGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesSirenSiegeSocialGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesSirenSiegeSocialGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3InseeSireneUnitesLegalesSirenSiegeSocialGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siren", EntreprisesApi.Client.ClientUtils.ParameterToString(siren)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3InseeSireneUnitesLegalesSirenSiegeSocialGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3InseeSireneEtablissementsSiretGet200Response>("/v3/insee/sirene/unites_legales/{siren}/siege_social", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3InseeSireneUnitesLegalesSirenSiegeSocialGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Divers documents d&#39;une association Divers documents administratifs en PDF tels que les statuts, le récépissé de déclaration de création, la liste des dirigeants...
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrRna">Siret de l&#39;association ou le numéro RNA</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response</returns>
        public V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet(string siretOrRna, string context, string recipient, string _object, int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response> localVarResponse = V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGetWithHttpInfo(siretOrRna, context, recipient, _object);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Divers documents d&#39;une association Divers documents administratifs en PDF tels que les statuts, le récépissé de déclaration de création, la liste des dirigeants...
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrRna">Siret de l&#39;association ou le numéro RNA</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response> V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGetWithHttpInfo(string siretOrRna, string context, string recipient, string _object, int operationIndex = 0)
        {
            // verify the required parameter 'siretOrRna' is set
            if (siretOrRna == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siretOrRna' when calling InformationsGnralesApi->V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siret_or_rna", EntreprisesApi.Client.ClientUtils.ParameterToString(siretOrRna)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response>("/v3/ministere_interieur/rna/associations/{siret_or_rna}/documents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Divers documents d&#39;une association Divers documents administratifs en PDF tels que les statuts, le récépissé de déclaration de création, la liste des dirigeants...
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrRna">Siret de l&#39;association ou le numéro RNA</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response</returns>
        public async System.Threading.Tasks.Task<V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response> V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGetAsync(string siretOrRna, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response> localVarResponse = await V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGetWithHttpInfoAsync(siretOrRna, context, recipient, _object, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Divers documents d&#39;une association Divers documents administratifs en PDF tels que les statuts, le récépissé de déclaration de création, la liste des dirigeants...
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrRna">Siret de l&#39;association ou le numéro RNA</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response>> V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGetWithHttpInfoAsync(string siretOrRna, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'siretOrRna' is set
            if (siretOrRna == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siretOrRna' when calling InformationsGnralesApi->V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siret_or_rna", EntreprisesApi.Client.ClientUtils.ParameterToString(siretOrRna)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet200Response>("/v3/ministere_interieur/rna/associations/{siret_or_rna}/documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3MinistereInterieurRnaAssociationsSiretOrRnaDocumentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Données du RNA d&#39;une association Informations issues du répertoire national des associations (RNA), telles que la date de création, l’adresse du siège et les dirigeants.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrRna">Siret de l&#39;association ou le numéro RNA</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response</returns>
        public V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response V3MinistereInterieurRnaAssociationsSiretOrRnaGet(string siretOrRna, string context, string recipient, string _object, int operationIndex = 0)
        {
            EntreprisesApi.Client.ApiResponse<V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response> localVarResponse = V3MinistereInterieurRnaAssociationsSiretOrRnaGetWithHttpInfo(siretOrRna, context, recipient, _object);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Données du RNA d&#39;une association Informations issues du répertoire national des associations (RNA), telles que la date de création, l’adresse du siège et les dirigeants.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrRna">Siret de l&#39;association ou le numéro RNA</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response</returns>
        public EntreprisesApi.Client.ApiResponse<V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response> V3MinistereInterieurRnaAssociationsSiretOrRnaGetWithHttpInfo(string siretOrRna, string context, string recipient, string _object, int operationIndex = 0)
        {
            // verify the required parameter 'siretOrRna' is set
            if (siretOrRna == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siretOrRna' when calling InformationsGnralesApi->V3MinistereInterieurRnaAssociationsSiretOrRnaGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3MinistereInterieurRnaAssociationsSiretOrRnaGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3MinistereInterieurRnaAssociationsSiretOrRnaGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3MinistereInterieurRnaAssociationsSiretOrRnaGet");
            }

            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siret_or_rna", EntreprisesApi.Client.ClientUtils.ParameterToString(siretOrRna)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3MinistereInterieurRnaAssociationsSiretOrRnaGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response>("/v3/ministere_interieur/rna/associations/{siret_or_rna}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3MinistereInterieurRnaAssociationsSiretOrRnaGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Données du RNA d&#39;une association Informations issues du répertoire national des associations (RNA), telles que la date de création, l’adresse du siège et les dirigeants.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrRna">Siret de l&#39;association ou le numéro RNA</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response</returns>
        public async System.Threading.Tasks.Task<V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response> V3MinistereInterieurRnaAssociationsSiretOrRnaGetAsync(string siretOrRna, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EntreprisesApi.Client.ApiResponse<V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response> localVarResponse = await V3MinistereInterieurRnaAssociationsSiretOrRnaGetWithHttpInfoAsync(siretOrRna, context, recipient, _object, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Données du RNA d&#39;une association Informations issues du répertoire national des associations (RNA), telles que la date de création, l’adresse du siège et les dirigeants.
        /// </summary>
        /// <exception cref="EntreprisesApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siretOrRna">Siret de l&#39;association ou le numéro RNA</param>
        /// <param name="context">\&quot;**Cadre de la requête**  Par exemple : aides publiques, marchés publics ou gestion d’un référentiel tiers utilisé pour tel type d’application.\&quot;</param>
        /// <param name="recipient">\&quot;**Bénéficiaire de l’appel**  SIRET de l’administration destinatrice des données.\&quot;</param>
        /// <param name="_object">\&quot;**La raison de l’appel ou l’identifiant de la procédure.**  L’identifiant peut être interne à votre organisation ou bien un numéro de marché publique, un nom de procédure ; l’essentiel est que celui-ci vous permette de tracer et de retrouver les informations relatives à l’appel. En effet, vous devez pouvoir justifier de la raison d’un appel auprès du fournisseur de données. Description courte ( &lt; 50 caractères ).\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response)</returns>
        public async System.Threading.Tasks.Task<EntreprisesApi.Client.ApiResponse<V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response>> V3MinistereInterieurRnaAssociationsSiretOrRnaGetWithHttpInfoAsync(string siretOrRna, string context, string recipient, string _object, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'siretOrRna' is set
            if (siretOrRna == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'siretOrRna' when calling InformationsGnralesApi->V3MinistereInterieurRnaAssociationsSiretOrRnaGet");
            }

            // verify the required parameter 'context' is set
            if (context == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'context' when calling InformationsGnralesApi->V3MinistereInterieurRnaAssociationsSiretOrRnaGet");
            }

            // verify the required parameter 'recipient' is set
            if (recipient == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter 'recipient' when calling InformationsGnralesApi->V3MinistereInterieurRnaAssociationsSiretOrRnaGet");
            }

            // verify the required parameter '_object' is set
            if (_object == null)
            {
                throw new EntreprisesApi.Client.ApiException(400, "Missing required parameter '_object' when calling InformationsGnralesApi->V3MinistereInterieurRnaAssociationsSiretOrRnaGet");
            }


            EntreprisesApi.Client.RequestOptions localVarRequestOptions = new EntreprisesApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EntreprisesApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EntreprisesApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("siret_or_rna", EntreprisesApi.Client.ClientUtils.ParameterToString(siretOrRna)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "context", context));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "recipient", recipient));
            localVarRequestOptions.QueryParameters.Add(EntreprisesApi.Client.ClientUtils.ParameterToMultiMap("", "object", _object));

            localVarRequestOptions.Operation = "InformationsGnralesApi.V3MinistereInterieurRnaAssociationsSiretOrRnaGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (jwt_bearer_token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<V3MinistereInterieurRnaAssociationsSiretOrRnaGet200Response>("/v3/ministere_interieur/rna/associations/{siret_or_rna}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3MinistereInterieurRnaAssociationsSiretOrRnaGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
