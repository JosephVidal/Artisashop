/*
 * API Entreprise
 *
 * Cette page contient la documentation technique pour accéder à API Entreprise. Les API étant accessible uniquement sous habilitation, l'interaction avec l'environnement de production n'est possible que si vous êtes **en possession d'une clé d'accès (jeton).  ### Comment tester l'API ?  Il est possible de tester les API via notre environnement de **staging** qui vous retournera systématiquement des données fictives.  Il est nécessaire d'utiliser le jeton de staging indiqué ci-dessous.  - --  *eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1MmE1YmZjMi1jMzUwLTQ4ZjQtYjY5Ni05ZWE3NmRiM2VmMjkiLCJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJzY29wZXMiOlsiY2VydGlmaWNhdF9yZ2VfYWRlbWUiLCJtc2FfY290aXNhdGlvbnMiLCJlbnRyZXByaXNlcyIsImV4dHJhaXRzX3JjcyIsImNlcnRpZmljYXRfb3BxaWJpIiwiYXNzb2NpYXRpb25zIiwiZXRhYmxpc3NlbWVudHMiLCJmbnRwX2NhcnRlX3BybyIsInF1YWxpYmF0IiwiZW50cmVwcmlzZXNfYXJ0aXNhbmFsZXMiLCJjZXJ0aWZpY2F0X2NuZXRwIiwiZW9yaV9kb3VhbmVzIiwicHJvYnRwIiwiYWN0ZXNfaW5waSIsImV4dHJhaXRfY291cnRfaW5waSIsImF0dGVzdGF0aW9uc19zb2NpYWxlcyIsImxpYXNzZV9maXNjYWxlIiwiYXR0ZXN0YXRpb25zX2Zpc2NhbGVzIiwiZXhlcmNpY2VzIiwiY29udmVudGlvbnNfY29sbGVjdGl2ZXMiLCJiaWxhbnNfaW5waSIsImRvY3VtZW50c19hc3NvY2lhdGlvbiIsImNlcnRpZmljYXRfYWdlbmNlX2JpbyIsImJpbGFuc19lbnRyZXByaXNlX2JkZiIsImF0dGVzdGF0aW9uc19hZ2VmaXBoIiwibWVzcmlfaWRlbnRpZmlhbnQiLCJtZXNyaV9pZGVudGl0ZSIsIm1lc3JpX2luc2NyaXB0aW9uX2V0dWRpYW50IiwibWVzcmlfaW5zY3JpcHRpb25fYXV0cmUiLCJtZXNyaV9hZG1pc3Npb24iLCJtZXNyaV9ldGFibGlzc2VtZW50cyIsInBvbGVfZW1wbG9pX2lkZW50aXRlIiwicG9sZV9lbXBsb2lfYWRyZXNzZSIsInBvbGVfZW1wbG9pX2NvbnRhY3QiLCJwb2xlX2VtcGxvaV9pbnNjcmlwdGlvbiIsImNuYWZfcXVvdGllbnRfZmFtaWxpYWwiLCJjbmFmX2FsbG9jYXRhaXJlcyIsImNuYWZfZW5mYW50cyIsImNuYWZfYWRyZXNzZSIsImNub3VzX3N0YXR1dF9ib3Vyc2llciIsInVwdGltZSIsImNub3VzX2VjaGVsb25fYm91cnNlIiwiY25vdXNfZW1haWwiLCJjbm91c19wZXJpb2RlX3ZlcnNlbWVudCIsImNub3VzX3N0YXR1dF9ib3Vyc2UiLCJjbm91c192aWxsZV9ldHVkZXMiLCJjbm91c19pZGVudGl0ZSIsImRnZmlwX2RlY2xhcmFudDFfbm9tIiwiZGdmaXBfZGVjbGFyYW50MV9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50MV9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50MV9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RlY2xhcmFudDJfbm9tIiwiZGdmaXBfZGVjbGFyYW50Ml9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50Ml9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50Ml9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RhdGVfcmVjb3V2cmVtZW50IiwiZGdmaXBfZGF0ZV9ldGFibGlzc2VtZW50IiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX3RheGF0aW9uIiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX2FubmVlIiwiZGdmaXBfbm9tYnJlX3BhcnRzIiwiZGdmaXBfbm9tYnJlX3BlcnNvbm5lc19hX2NoYXJnZSIsImRnZmlwX3NpdHVhdGlvbl9mYW1pbGlhbGUiLCJkZ2ZpcF9yZXZlbnVfYnJ1dF9nbG9iYWwiLCJkZ2ZpcF9yZXZlbnVfaW1wb3NhYmxlIiwiZGdmaXBfaW1wb3RfcmV2ZW51X25ldF9hdmFudF9jb3JyZWN0aW9ucyIsImRnZmlwX21vbnRhbnRfaW1wb3QiLCJkZ2ZpcF9yZXZlbnVfZmlzY2FsX3JlZmVyZW5jZSIsImRnZmlwX2FubmVlX2ltcG90IiwiZGdmaXBfYW5uZWVfcmV2ZW51cyIsImRnZmlwX2VycmV1cl9jb3JyZWN0aWYiLCJkZ2ZpcF9zaXR1YXRpb25fcGFydGllbGxlIl0sInN1YiI6InN0YWdpbmcgZGV2ZWxvcG1lbnQiLCJpYXQiOjE2NjY4NjQwNzQsInZlcnNpb24iOiIxLjAiLCJleHAiOjE5ODI0ODMyNzR9.u2kMWzll3iCTczUOqMQbpS66VfrVzI2lLiyGEPcKAec*       
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@entreprise.api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EntreprisesApi.Client.OpenAPIDateConverter;

namespace EntreprisesApi.Model
{
    /// <summary>
    /// V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData
    /// </summary>
    [DataContract(Name = "_v3_insee_sirene_unites_legales_diffusibles__siren__get_200_response_data")]
    public partial class V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData : IEquatable<V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData>, IValidatableObject
    {
        /// <summary>
        /// Indique si l&#39;unité légale est une personne morale ou une personne physique. Cette valeur est déterminée à l&#39;aide du code juridique : &#39;1000&#39; correspondant à une personne physique.
        /// </summary>
        /// <value>Indique si l&#39;unité légale est une personne morale ou une personne physique. Cette valeur est déterminée à l&#39;aide du code juridique : &#39;1000&#39; correspondant à une personne physique.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Physique for value: personne_physique
            /// </summary>
            [EnumMember(Value = "personne_physique")]
            Physique = 1,

            /// <summary>
            /// Enum Morale for value: personne_morale
            /// </summary>
            [EnumMember(Value = "personne_morale")]
            Morale = 2

        }


        /// <summary>
        /// Indique si l&#39;unité légale est une personne morale ou une personne physique. Cette valeur est déterminée à l&#39;aide du code juridique : &#39;1000&#39; correspondant à une personne physique.
        /// </summary>
        /// <value>Indique si l&#39;unité légale est une personne morale ou une personne physique. Cette valeur est déterminée à l&#39;aide du code juridique : &#39;1000&#39; correspondant à une personne physique.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Il s&#39;agit d&#39;une variable statistique calculée par l&#39;Insee. Elle ne peut prendre que 3 valeurs:     - GE: Grande Entreprise   - ETI: Entreprise de Taille Intermédiaire   - PME: Petite ou Moyenne Entreprise     Celle-ci peut-être &#39;null&#39; dans certains cas : quand il s’agit d’une unité légale nouvellement créée, ou bien d’une unité légale cessée, ou encore d’une unité légale hors champ du calcul de la catégorie (unité légale agricole ou ne faisant pas partie du système productif).     Définition de &#39;catégorie d&#39;entreprise&#39; par l&#39;Insee : https://www.insee.fr/fr/metadonnees/definition/c1057
        /// </summary>
        /// <value>Il s&#39;agit d&#39;une variable statistique calculée par l&#39;Insee. Elle ne peut prendre que 3 valeurs:     - GE: Grande Entreprise   - ETI: Entreprise de Taille Intermédiaire   - PME: Petite ou Moyenne Entreprise     Celle-ci peut-être &#39;null&#39; dans certains cas : quand il s’agit d’une unité légale nouvellement créée, ou bien d’une unité légale cessée, ou encore d’une unité légale hors champ du calcul de la catégorie (unité légale agricole ou ne faisant pas partie du système productif).     Définition de &#39;catégorie d&#39;entreprise&#39; par l&#39;Insee : https://www.insee.fr/fr/metadonnees/definition/c1057</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategorieEntrepriseEnum
        {
            /// <summary>
            /// Enum GE for value: GE
            /// </summary>
            [EnumMember(Value = "GE")]
            GE = 1,

            /// <summary>
            /// Enum ETI for value: ETI
            /// </summary>
            [EnumMember(Value = "ETI")]
            ETI = 2,

            /// <summary>
            /// Enum PME for value: PME
            /// </summary>
            [EnumMember(Value = "PME")]
            PME = 3,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 4

        }


        /// <summary>
        /// Il s&#39;agit d&#39;une variable statistique calculée par l&#39;Insee. Elle ne peut prendre que 3 valeurs:     - GE: Grande Entreprise   - ETI: Entreprise de Taille Intermédiaire   - PME: Petite ou Moyenne Entreprise     Celle-ci peut-être &#39;null&#39; dans certains cas : quand il s’agit d’une unité légale nouvellement créée, ou bien d’une unité légale cessée, ou encore d’une unité légale hors champ du calcul de la catégorie (unité légale agricole ou ne faisant pas partie du système productif).     Définition de &#39;catégorie d&#39;entreprise&#39; par l&#39;Insee : https://www.insee.fr/fr/metadonnees/definition/c1057
        /// </summary>
        /// <value>Il s&#39;agit d&#39;une variable statistique calculée par l&#39;Insee. Elle ne peut prendre que 3 valeurs:     - GE: Grande Entreprise   - ETI: Entreprise de Taille Intermédiaire   - PME: Petite ou Moyenne Entreprise     Celle-ci peut-être &#39;null&#39; dans certains cas : quand il s’agit d’une unité légale nouvellement créée, ou bien d’une unité légale cessée, ou encore d’une unité légale hors champ du calcul de la catégorie (unité légale agricole ou ne faisant pas partie du système productif).     Définition de &#39;catégorie d&#39;entreprise&#39; par l&#39;Insee : https://www.insee.fr/fr/metadonnees/definition/c1057</value>
        [DataMember(Name = "categorie_entreprise", IsRequired = true, EmitDefaultValue = true)]
        public CategorieEntrepriseEnum CategorieEntreprise { get; set; }
        /// <summary>
        /// Détermine si l&#39;unité légale est une entité non-diffusible. Cette API n&#39;appelant pas les non-diffusible, cette valeur est toujours à &#39;true&#39;. Pour récupérer des unités légales non-diffusible, référez-vous à la documentation de l&#39;API /insee/unites_legales/:siren
        /// </summary>
        /// <value>Détermine si l&#39;unité légale est une entité non-diffusible. Cette API n&#39;appelant pas les non-diffusible, cette valeur est toujours à &#39;true&#39;. Pour récupérer des unités légales non-diffusible, référez-vous à la documentation de l&#39;API /insee/unites_legales/:siren</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DiffusableCommercialementEnum
        {
            /// <summary>
            /// Enum True for value: true
            /// </summary>
            True = 1

        }


        /// <summary>
        /// Détermine si l&#39;unité légale est une entité non-diffusible. Cette API n&#39;appelant pas les non-diffusible, cette valeur est toujours à &#39;true&#39;. Pour récupérer des unités légales non-diffusible, référez-vous à la documentation de l&#39;API /insee/unites_legales/:siren
        /// </summary>
        /// <value>Détermine si l&#39;unité légale est une entité non-diffusible. Cette API n&#39;appelant pas les non-diffusible, cette valeur est toujours à &#39;true&#39;. Pour récupérer des unités légales non-diffusible, référez-vous à la documentation de l&#39;API /insee/unites_legales/:siren</value>
        [DataMember(Name = "diffusable_commercialement", IsRequired = true, EmitDefaultValue = true)]
        public DiffusableCommercialementEnum DiffusableCommercialement { get; set; }
        /// <summary>
        /// Cette valeur décrit l&#39;état administratif de l&#39;unité légale, qui peut être :     - cessée. Le passage à l&#39;état « Cessée » découle de la prise en compte d&#39;une déclaration de cessation administrative. Pour les personnes morales, cela correspond au dépôt de la déclaration de disparition de la personne morale. Pour les personnes physiques, cela correspond soit à la prise en compte de la déclaration de cessation d&#39;activité déposée par l&#39;exploitant soit au décès de l&#39;exploitant conformément à la réglementation.   - active. En dehors des cas explicités ci-dessus, l&#39;unité légale est toujours à l&#39;état administratif « Active ».     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/etatAdministratifUniteLegale
        /// </summary>
        /// <value>Cette valeur décrit l&#39;état administratif de l&#39;unité légale, qui peut être :     - cessée. Le passage à l&#39;état « Cessée » découle de la prise en compte d&#39;une déclaration de cessation administrative. Pour les personnes morales, cela correspond au dépôt de la déclaration de disparition de la personne morale. Pour les personnes physiques, cela correspond soit à la prise en compte de la déclaration de cessation d&#39;activité déposée par l&#39;exploitant soit au décès de l&#39;exploitant conformément à la réglementation.   - active. En dehors des cas explicités ci-dessus, l&#39;unité légale est toujours à l&#39;état administratif « Active ».     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/etatAdministratifUniteLegale</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EtatAdministratifEnum
        {
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 1,

            /// <summary>
            /// Enum C for value: C
            /// </summary>
            [EnumMember(Value = "C")]
            C = 2

        }


        /// <summary>
        /// Cette valeur décrit l&#39;état administratif de l&#39;unité légale, qui peut être :     - cessée. Le passage à l&#39;état « Cessée » découle de la prise en compte d&#39;une déclaration de cessation administrative. Pour les personnes morales, cela correspond au dépôt de la déclaration de disparition de la personne morale. Pour les personnes physiques, cela correspond soit à la prise en compte de la déclaration de cessation d&#39;activité déposée par l&#39;exploitant soit au décès de l&#39;exploitant conformément à la réglementation.   - active. En dehors des cas explicités ci-dessus, l&#39;unité légale est toujours à l&#39;état administratif « Active ».     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/etatAdministratifUniteLegale
        /// </summary>
        /// <value>Cette valeur décrit l&#39;état administratif de l&#39;unité légale, qui peut être :     - cessée. Le passage à l&#39;état « Cessée » découle de la prise en compte d&#39;une déclaration de cessation administrative. Pour les personnes morales, cela correspond au dépôt de la déclaration de disparition de la personne morale. Pour les personnes physiques, cela correspond soit à la prise en compte de la déclaration de cessation d&#39;activité déposée par l&#39;exploitant soit au décès de l&#39;exploitant conformément à la réglementation.   - active. En dehors des cas explicités ci-dessus, l&#39;unité légale est toujours à l&#39;état administratif « Active ».     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/etatAdministratifUniteLegale</value>
        [DataMember(Name = "etat_administratif", IsRequired = true, EmitDefaultValue = true)]
        public EtatAdministratifEnum EtatAdministratif { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData" /> class.
        /// </summary>
        /// <param name="siretSiegeSocial">siretSiegeSocial (required).</param>
        /// <param name="type">Indique si l&#39;unité légale est une personne morale ou une personne physique. Cette valeur est déterminée à l&#39;aide du code juridique : &#39;1000&#39; correspondant à une personne physique. (required).</param>
        /// <param name="personneMoraleAttributs">personneMoraleAttributs (required).</param>
        /// <param name="personnePhysiqueAttributs">personnePhysiqueAttributs (required).</param>
        /// <param name="categorieEntreprise">Il s&#39;agit d&#39;une variable statistique calculée par l&#39;Insee. Elle ne peut prendre que 3 valeurs:     - GE: Grande Entreprise   - ETI: Entreprise de Taille Intermédiaire   - PME: Petite ou Moyenne Entreprise     Celle-ci peut-être &#39;null&#39; dans certains cas : quand il s’agit d’une unité légale nouvellement créée, ou bien d’une unité légale cessée, ou encore d’une unité légale hors champ du calcul de la catégorie (unité légale agricole ou ne faisant pas partie du système productif).     Définition de &#39;catégorie d&#39;entreprise&#39; par l&#39;Insee : https://www.insee.fr/fr/metadonnees/definition/c1057 (required).</param>
        /// <param name="diffusableCommercialement">Détermine si l&#39;unité légale est une entité non-diffusible. Cette API n&#39;appelant pas les non-diffusible, cette valeur est toujours à &#39;true&#39;. Pour récupérer des unités légales non-diffusible, référez-vous à la documentation de l&#39;API /insee/unites_legales/:siren (required).</param>
        /// <param name="formeJuridique">formeJuridique (required).</param>
        /// <param name="activitePrincipale">activitePrincipale (required).</param>
        /// <param name="trancheEffectifSalarie">trancheEffectifSalarie (required).</param>
        /// <param name="etatAdministratif">Cette valeur décrit l&#39;état administratif de l&#39;unité légale, qui peut être :     - cessée. Le passage à l&#39;état « Cessée » découle de la prise en compte d&#39;une déclaration de cessation administrative. Pour les personnes morales, cela correspond au dépôt de la déclaration de disparition de la personne morale. Pour les personnes physiques, cela correspond soit à la prise en compte de la déclaration de cessation d&#39;activité déposée par l&#39;exploitant soit au décès de l&#39;exploitant conformément à la réglementation.   - active. En dehors des cas explicités ci-dessus, l&#39;unité légale est toujours à l&#39;état administratif « Active ».     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/etatAdministratifUniteLegale (required).</param>
        /// <param name="dateCreation">La date de création correspond à la date qui figure dans les statuts de l&#39;entreprise qui sont déposés au centre de formalité des entreprises (CFE) compétent. Cette valeur est renvoyée sous format timestamp.     Saufpour les unités purgées, la date de création n&#39;est jamais à &#39;null&#39;. Si elle est non renseignée, elle sera au 01/01/1900.     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/dateCreationUniteLegale (required).</param>
        /// <param name="dateCessation">Cette valeur est renvoyée sous format timestamp. Si l&#39;entreprise est juridique active, cette valeur est à &#39;null&#39;. (required).</param>
        public V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData(string siretSiegeSocial = default(string), TypeEnum type = default(TypeEnum), AttributsDeLaPersonneMorale personneMoraleAttributs = default(AttributsDeLaPersonneMorale), AttributsDeLaPersonnePhysique personnePhysiqueAttributs = default(AttributsDeLaPersonnePhysique), CategorieEntrepriseEnum categorieEntreprise = default(CategorieEntrepriseEnum), DiffusableCommercialementEnum diffusableCommercialement = default(DiffusableCommercialementEnum), AttributsDeLaFormeJuridique formeJuridique = default(AttributsDeLaFormeJuridique), AttributsDeLActivitPrincipale1 activitePrincipale = default(AttributsDeLActivitPrincipale1), TrancheDEffectifSalariDeLUnitLGale trancheEffectifSalarie = default(TrancheDEffectifSalariDeLUnitLGale), EtatAdministratifEnum etatAdministratif = default(EtatAdministratifEnum), int dateCreation = default(int), int? dateCessation = default(int?))
        {
            // to ensure "siretSiegeSocial" is required (not null)
            if (siretSiegeSocial == null)
            {
                throw new ArgumentNullException("siretSiegeSocial is a required property for V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData and cannot be null");
            }
            this.SiretSiegeSocial = siretSiegeSocial;
            this.Type = type;
            // to ensure "personneMoraleAttributs" is required (not null)
            if (personneMoraleAttributs == null)
            {
                throw new ArgumentNullException("personneMoraleAttributs is a required property for V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData and cannot be null");
            }
            this.PersonneMoraleAttributs = personneMoraleAttributs;
            // to ensure "personnePhysiqueAttributs" is required (not null)
            if (personnePhysiqueAttributs == null)
            {
                throw new ArgumentNullException("personnePhysiqueAttributs is a required property for V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData and cannot be null");
            }
            this.PersonnePhysiqueAttributs = personnePhysiqueAttributs;
            this.CategorieEntreprise = categorieEntreprise;
            this.DiffusableCommercialement = diffusableCommercialement;
            // to ensure "formeJuridique" is required (not null)
            if (formeJuridique == null)
            {
                throw new ArgumentNullException("formeJuridique is a required property for V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData and cannot be null");
            }
            this.FormeJuridique = formeJuridique;
            // to ensure "activitePrincipale" is required (not null)
            if (activitePrincipale == null)
            {
                throw new ArgumentNullException("activitePrincipale is a required property for V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData and cannot be null");
            }
            this.ActivitePrincipale = activitePrincipale;
            // to ensure "trancheEffectifSalarie" is required (not null)
            if (trancheEffectifSalarie == null)
            {
                throw new ArgumentNullException("trancheEffectifSalarie is a required property for V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData and cannot be null");
            }
            this.TrancheEffectifSalarie = trancheEffectifSalarie;
            this.EtatAdministratif = etatAdministratif;
            this.DateCreation = dateCreation;
            // to ensure "dateCessation" is required (not null)
            if (dateCessation == null)
            {
                throw new ArgumentNullException("dateCessation is a required property for V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData and cannot be null");
            }
            this.DateCessation = dateCessation;
        }

        /// <summary>
        /// Gets or Sets SiretSiegeSocial
        /// </summary>
        [DataMember(Name = "siret_siege_social", IsRequired = true, EmitDefaultValue = true)]
        public string SiretSiegeSocial { get; set; }

        /// <summary>
        /// Gets or Sets PersonneMoraleAttributs
        /// </summary>
        [DataMember(Name = "personne_morale_attributs", IsRequired = true, EmitDefaultValue = true)]
        public AttributsDeLaPersonneMorale PersonneMoraleAttributs { get; set; }

        /// <summary>
        /// Gets or Sets PersonnePhysiqueAttributs
        /// </summary>
        [DataMember(Name = "personne_physique_attributs", IsRequired = true, EmitDefaultValue = true)]
        public AttributsDeLaPersonnePhysique PersonnePhysiqueAttributs { get; set; }

        /// <summary>
        /// Gets or Sets FormeJuridique
        /// </summary>
        [DataMember(Name = "forme_juridique", IsRequired = true, EmitDefaultValue = true)]
        public AttributsDeLaFormeJuridique FormeJuridique { get; set; }

        /// <summary>
        /// Gets or Sets ActivitePrincipale
        /// </summary>
        [DataMember(Name = "activite_principale", IsRequired = true, EmitDefaultValue = true)]
        public AttributsDeLActivitPrincipale1 ActivitePrincipale { get; set; }

        /// <summary>
        /// Gets or Sets TrancheEffectifSalarie
        /// </summary>
        [DataMember(Name = "tranche_effectif_salarie", IsRequired = true, EmitDefaultValue = true)]
        public TrancheDEffectifSalariDeLUnitLGale TrancheEffectifSalarie { get; set; }

        /// <summary>
        /// La date de création correspond à la date qui figure dans les statuts de l&#39;entreprise qui sont déposés au centre de formalité des entreprises (CFE) compétent. Cette valeur est renvoyée sous format timestamp.     Saufpour les unités purgées, la date de création n&#39;est jamais à &#39;null&#39;. Si elle est non renseignée, elle sera au 01/01/1900.     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/dateCreationUniteLegale
        /// </summary>
        /// <value>La date de création correspond à la date qui figure dans les statuts de l&#39;entreprise qui sont déposés au centre de formalité des entreprises (CFE) compétent. Cette valeur est renvoyée sous format timestamp.     Saufpour les unités purgées, la date de création n&#39;est jamais à &#39;null&#39;. Si elle est non renseignée, elle sera au 01/01/1900.     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/dateCreationUniteLegale</value>
        [DataMember(Name = "date_creation", IsRequired = true, EmitDefaultValue = true)]
        public int DateCreation { get; set; }

        /// <summary>
        /// Cette valeur est renvoyée sous format timestamp. Si l&#39;entreprise est juridique active, cette valeur est à &#39;null&#39;.
        /// </summary>
        /// <value>Cette valeur est renvoyée sous format timestamp. Si l&#39;entreprise est juridique active, cette valeur est à &#39;null&#39;.</value>
        [DataMember(Name = "date_cessation", IsRequired = true, EmitDefaultValue = true)]
        public int? DateCessation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData {\n");
            sb.Append("  SiretSiegeSocial: ").Append(SiretSiegeSocial).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PersonneMoraleAttributs: ").Append(PersonneMoraleAttributs).Append("\n");
            sb.Append("  PersonnePhysiqueAttributs: ").Append(PersonnePhysiqueAttributs).Append("\n");
            sb.Append("  CategorieEntreprise: ").Append(CategorieEntreprise).Append("\n");
            sb.Append("  DiffusableCommercialement: ").Append(DiffusableCommercialement).Append("\n");
            sb.Append("  FormeJuridique: ").Append(FormeJuridique).Append("\n");
            sb.Append("  ActivitePrincipale: ").Append(ActivitePrincipale).Append("\n");
            sb.Append("  TrancheEffectifSalarie: ").Append(TrancheEffectifSalarie).Append("\n");
            sb.Append("  EtatAdministratif: ").Append(EtatAdministratif).Append("\n");
            sb.Append("  DateCreation: ").Append(DateCreation).Append("\n");
            sb.Append("  DateCessation: ").Append(DateCessation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData);
        }

        /// <summary>
        /// Returns true if V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V3InseeSireneUnitesLegalesDiffusiblesSirenGet200ResponseData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SiretSiegeSocial == input.SiretSiegeSocial ||
                    (this.SiretSiegeSocial != null &&
                    this.SiretSiegeSocial.Equals(input.SiretSiegeSocial))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.PersonneMoraleAttributs == input.PersonneMoraleAttributs ||
                    (this.PersonneMoraleAttributs != null &&
                    this.PersonneMoraleAttributs.Equals(input.PersonneMoraleAttributs))
                ) && 
                (
                    this.PersonnePhysiqueAttributs == input.PersonnePhysiqueAttributs ||
                    (this.PersonnePhysiqueAttributs != null &&
                    this.PersonnePhysiqueAttributs.Equals(input.PersonnePhysiqueAttributs))
                ) && 
                (
                    this.CategorieEntreprise == input.CategorieEntreprise ||
                    this.CategorieEntreprise.Equals(input.CategorieEntreprise)
                ) && 
                (
                    this.DiffusableCommercialement == input.DiffusableCommercialement ||
                    this.DiffusableCommercialement.Equals(input.DiffusableCommercialement)
                ) && 
                (
                    this.FormeJuridique == input.FormeJuridique ||
                    (this.FormeJuridique != null &&
                    this.FormeJuridique.Equals(input.FormeJuridique))
                ) && 
                (
                    this.ActivitePrincipale == input.ActivitePrincipale ||
                    (this.ActivitePrincipale != null &&
                    this.ActivitePrincipale.Equals(input.ActivitePrincipale))
                ) && 
                (
                    this.TrancheEffectifSalarie == input.TrancheEffectifSalarie ||
                    (this.TrancheEffectifSalarie != null &&
                    this.TrancheEffectifSalarie.Equals(input.TrancheEffectifSalarie))
                ) && 
                (
                    this.EtatAdministratif == input.EtatAdministratif ||
                    this.EtatAdministratif.Equals(input.EtatAdministratif)
                ) && 
                (
                    this.DateCreation == input.DateCreation ||
                    this.DateCreation.Equals(input.DateCreation)
                ) && 
                (
                    this.DateCessation == input.DateCessation ||
                    (this.DateCessation != null &&
                    this.DateCessation.Equals(input.DateCessation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SiretSiegeSocial != null)
                {
                    hashCode = (hashCode * 59) + this.SiretSiegeSocial.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.PersonneMoraleAttributs != null)
                {
                    hashCode = (hashCode * 59) + this.PersonneMoraleAttributs.GetHashCode();
                }
                if (this.PersonnePhysiqueAttributs != null)
                {
                    hashCode = (hashCode * 59) + this.PersonnePhysiqueAttributs.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CategorieEntreprise.GetHashCode();
                hashCode = (hashCode * 59) + this.DiffusableCommercialement.GetHashCode();
                if (this.FormeJuridique != null)
                {
                    hashCode = (hashCode * 59) + this.FormeJuridique.GetHashCode();
                }
                if (this.ActivitePrincipale != null)
                {
                    hashCode = (hashCode * 59) + this.ActivitePrincipale.GetHashCode();
                }
                if (this.TrancheEffectifSalarie != null)
                {
                    hashCode = (hashCode * 59) + this.TrancheEffectifSalarie.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EtatAdministratif.GetHashCode();
                hashCode = (hashCode * 59) + this.DateCreation.GetHashCode();
                if (this.DateCessation != null)
                {
                    hashCode = (hashCode * 59) + this.DateCessation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
