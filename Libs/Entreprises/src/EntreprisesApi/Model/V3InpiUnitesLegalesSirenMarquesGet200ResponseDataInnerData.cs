/*
 * API Entreprise
 *
 * Cette page contient la documentation technique pour accéder à API Entreprise. Les API étant accessible uniquement sous habilitation, l'interaction avec l'environnement de production n'est possible que si vous êtes **en possession d'une clé d'accès (jeton).  ### Comment tester l'API ?  Il est possible de tester les API via notre environnement de **staging** qui vous retournera systématiquement des données fictives.  Il est nécessaire d'utiliser le jeton de staging indiqué ci-dessous.  - --  *eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1MmE1YmZjMi1jMzUwLTQ4ZjQtYjY5Ni05ZWE3NmRiM2VmMjkiLCJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJzY29wZXMiOlsiY2VydGlmaWNhdF9yZ2VfYWRlbWUiLCJtc2FfY290aXNhdGlvbnMiLCJlbnRyZXByaXNlcyIsImV4dHJhaXRzX3JjcyIsImNlcnRpZmljYXRfb3BxaWJpIiwiYXNzb2NpYXRpb25zIiwiZXRhYmxpc3NlbWVudHMiLCJmbnRwX2NhcnRlX3BybyIsInF1YWxpYmF0IiwiZW50cmVwcmlzZXNfYXJ0aXNhbmFsZXMiLCJjZXJ0aWZpY2F0X2NuZXRwIiwiZW9yaV9kb3VhbmVzIiwicHJvYnRwIiwiYWN0ZXNfaW5waSIsImV4dHJhaXRfY291cnRfaW5waSIsImF0dGVzdGF0aW9uc19zb2NpYWxlcyIsImxpYXNzZV9maXNjYWxlIiwiYXR0ZXN0YXRpb25zX2Zpc2NhbGVzIiwiZXhlcmNpY2VzIiwiY29udmVudGlvbnNfY29sbGVjdGl2ZXMiLCJiaWxhbnNfaW5waSIsImRvY3VtZW50c19hc3NvY2lhdGlvbiIsImNlcnRpZmljYXRfYWdlbmNlX2JpbyIsImJpbGFuc19lbnRyZXByaXNlX2JkZiIsImF0dGVzdGF0aW9uc19hZ2VmaXBoIiwibWVzcmlfaWRlbnRpZmlhbnQiLCJtZXNyaV9pZGVudGl0ZSIsIm1lc3JpX2luc2NyaXB0aW9uX2V0dWRpYW50IiwibWVzcmlfaW5zY3JpcHRpb25fYXV0cmUiLCJtZXNyaV9hZG1pc3Npb24iLCJtZXNyaV9ldGFibGlzc2VtZW50cyIsInBvbGVfZW1wbG9pX2lkZW50aXRlIiwicG9sZV9lbXBsb2lfYWRyZXNzZSIsInBvbGVfZW1wbG9pX2NvbnRhY3QiLCJwb2xlX2VtcGxvaV9pbnNjcmlwdGlvbiIsImNuYWZfcXVvdGllbnRfZmFtaWxpYWwiLCJjbmFmX2FsbG9jYXRhaXJlcyIsImNuYWZfZW5mYW50cyIsImNuYWZfYWRyZXNzZSIsImNub3VzX3N0YXR1dF9ib3Vyc2llciIsInVwdGltZSIsImNub3VzX2VjaGVsb25fYm91cnNlIiwiY25vdXNfZW1haWwiLCJjbm91c19wZXJpb2RlX3ZlcnNlbWVudCIsImNub3VzX3N0YXR1dF9ib3Vyc2UiLCJjbm91c192aWxsZV9ldHVkZXMiLCJjbm91c19pZGVudGl0ZSIsImRnZmlwX2RlY2xhcmFudDFfbm9tIiwiZGdmaXBfZGVjbGFyYW50MV9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50MV9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50MV9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RlY2xhcmFudDJfbm9tIiwiZGdmaXBfZGVjbGFyYW50Ml9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50Ml9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50Ml9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RhdGVfcmVjb3V2cmVtZW50IiwiZGdmaXBfZGF0ZV9ldGFibGlzc2VtZW50IiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX3RheGF0aW9uIiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX2FubmVlIiwiZGdmaXBfbm9tYnJlX3BhcnRzIiwiZGdmaXBfbm9tYnJlX3BlcnNvbm5lc19hX2NoYXJnZSIsImRnZmlwX3NpdHVhdGlvbl9mYW1pbGlhbGUiLCJkZ2ZpcF9yZXZlbnVfYnJ1dF9nbG9iYWwiLCJkZ2ZpcF9yZXZlbnVfaW1wb3NhYmxlIiwiZGdmaXBfaW1wb3RfcmV2ZW51X25ldF9hdmFudF9jb3JyZWN0aW9ucyIsImRnZmlwX21vbnRhbnRfaW1wb3QiLCJkZ2ZpcF9yZXZlbnVfZmlzY2FsX3JlZmVyZW5jZSIsImRnZmlwX2FubmVlX2ltcG90IiwiZGdmaXBfYW5uZWVfcmV2ZW51cyIsImRnZmlwX2VycmV1cl9jb3JyZWN0aWYiLCJkZ2ZpcF9zaXR1YXRpb25fcGFydGllbGxlIl0sInN1YiI6InN0YWdpbmcgZGV2ZWxvcG1lbnQiLCJpYXQiOjE2NjY4NjQwNzQsInZlcnNpb24iOiIxLjAiLCJleHAiOjE5ODI0ODMyNzR9.u2kMWzll3iCTczUOqMQbpS66VfrVzI2lLiyGEPcKAec*       
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@entreprise.api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EntreprisesApi.Client.OpenAPIDateConverter;

namespace EntreprisesApi.Model
{
    /// <summary>
    /// V3InpiUnitesLegalesSirenMarquesGet200ResponseDataInnerData
    /// </summary>
    [DataContract(Name = "_v3_inpi_unites_legales__siren__marques_get_200_response_data_inner_data")]
    public partial class V3InpiUnitesLegalesSirenMarquesGet200ResponseDataInnerData : IEquatable<V3InpiUnitesLegalesSirenMarquesGet200ResponseDataInnerData>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Marque for value: marque
            /// </summary>
            [EnumMember(Value = "marque")]
            Marque = 1

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum DemandeDpose for value: Demande déposée
            /// </summary>
            [EnumMember(Value = "Demande déposée")]
            DemandeDpose = 1,

            /// <summary>
            /// Enum DemandePublie for value: Demande publiée
            /// </summary>
            [EnumMember(Value = "Demande publiée")]
            DemandePublie = 2,

            /// <summary>
            /// Enum DemandeNonPublie for value: Demande non publiée
            /// </summary>
            [EnumMember(Value = "Demande non publiée")]
            DemandeNonPublie = 3,

            /// <summary>
            /// Enum DemandeIrrecevableAprsPublication for value: Demande irrecevable après publication
            /// </summary>
            [EnumMember(Value = "Demande irrecevable après publication")]
            DemandeIrrecevableAprsPublication = 4,

            /// <summary>
            /// Enum MarqueEnregistre for value: Marque enregistrée
            /// </summary>
            [EnumMember(Value = "Marque enregistrée")]
            MarqueEnregistre = 5,

            /// <summary>
            /// Enum RenouvellementDemand for value: Renouvellement demandé
            /// </summary>
            [EnumMember(Value = "Renouvellement demandé")]
            RenouvellementDemand = 6,

            /// <summary>
            /// Enum MarqueRenouvele for value: Marque renouvelée
            /// </summary>
            [EnumMember(Value = "Marque renouvelée")]
            MarqueRenouvele = 7,

            /// <summary>
            /// Enum DemandeTotalementRejete for value: Demande totalement rejetée
            /// </summary>
            [EnumMember(Value = "Demande totalement rejetée")]
            DemandeTotalementRejete = 8,

            /// <summary>
            /// Enum MarqueAyantFaitLobjetDuneRenonciationTotale for value: Marque ayant fait l&#39;objet d&#39;une renonciation totale
            /// </summary>
            [EnumMember(Value = "Marque ayant fait l'objet d'une renonciation totale")]
            MarqueAyantFaitLobjetDuneRenonciationTotale = 9,

            /// <summary>
            /// Enum MarqueAyantFaitLobjetDunRetraitTotal for value: Marque ayant fait l&#39;objet d&#39;un retrait total
            /// </summary>
            [EnumMember(Value = "Marque ayant fait l'objet d'un retrait total")]
            MarqueAyantFaitLobjetDunRetraitTotal = 10,

            /// <summary>
            /// Enum MarqueAnnule for value: Marque annulée
            /// </summary>
            [EnumMember(Value = "Marque annulée")]
            MarqueAnnule = 11,

            /// <summary>
            /// Enum MarqueExpire for value: Marque expirée
            /// </summary>
            [EnumMember(Value = "Marque expirée")]
            MarqueExpire = 12

        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3InpiUnitesLegalesSirenMarquesGet200ResponseDataInnerData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V3InpiUnitesLegalesSirenMarquesGet200ResponseDataInnerData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3InpiUnitesLegalesSirenMarquesGet200ResponseDataInnerData" /> class.
        /// </summary>
        /// <param name="numeroApplication">numeroApplication (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="nom">nom (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="depositaire">Nom de déposant ou titulaire (required).</param>
        /// <param name="clef">clef (required).</param>
        public V3InpiUnitesLegalesSirenMarquesGet200ResponseDataInnerData(string numeroApplication = default(string), TypeEnum type = default(TypeEnum), string nom = default(string), StatusEnum status = default(StatusEnum), string depositaire = default(string), string clef = default(string))
        {
            // to ensure "numeroApplication" is required (not null)
            if (numeroApplication == null)
            {
                throw new ArgumentNullException("numeroApplication is a required property for V3InpiUnitesLegalesSirenMarquesGet200ResponseDataInnerData and cannot be null");
            }
            this.NumeroApplication = numeroApplication;
            this.Type = type;
            // to ensure "nom" is required (not null)
            if (nom == null)
            {
                throw new ArgumentNullException("nom is a required property for V3InpiUnitesLegalesSirenMarquesGet200ResponseDataInnerData and cannot be null");
            }
            this.Nom = nom;
            this.Status = status;
            // to ensure "depositaire" is required (not null)
            if (depositaire == null)
            {
                throw new ArgumentNullException("depositaire is a required property for V3InpiUnitesLegalesSirenMarquesGet200ResponseDataInnerData and cannot be null");
            }
            this.Depositaire = depositaire;
            // to ensure "clef" is required (not null)
            if (clef == null)
            {
                throw new ArgumentNullException("clef is a required property for V3InpiUnitesLegalesSirenMarquesGet200ResponseDataInnerData and cannot be null");
            }
            this.Clef = clef;
        }

        /// <summary>
        /// Gets or Sets NumeroApplication
        /// </summary>
        [DataMember(Name = "numero_application", IsRequired = true, EmitDefaultValue = true)]
        public string NumeroApplication { get; set; }

        /// <summary>
        /// Gets or Sets Nom
        /// </summary>
        [DataMember(Name = "nom", IsRequired = true, EmitDefaultValue = true)]
        public string Nom { get; set; }

        /// <summary>
        /// Nom de déposant ou titulaire
        /// </summary>
        /// <value>Nom de déposant ou titulaire</value>
        [DataMember(Name = "depositaire", IsRequired = true, EmitDefaultValue = true)]
        public string Depositaire { get; set; }

        /// <summary>
        /// Gets or Sets Clef
        /// </summary>
        [DataMember(Name = "clef", IsRequired = true, EmitDefaultValue = true)]
        public string Clef { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V3InpiUnitesLegalesSirenMarquesGet200ResponseDataInnerData {\n");
            sb.Append("  NumeroApplication: ").Append(NumeroApplication).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Nom: ").Append(Nom).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Depositaire: ").Append(Depositaire).Append("\n");
            sb.Append("  Clef: ").Append(Clef).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V3InpiUnitesLegalesSirenMarquesGet200ResponseDataInnerData);
        }

        /// <summary>
        /// Returns true if V3InpiUnitesLegalesSirenMarquesGet200ResponseDataInnerData instances are equal
        /// </summary>
        /// <param name="input">Instance of V3InpiUnitesLegalesSirenMarquesGet200ResponseDataInnerData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V3InpiUnitesLegalesSirenMarquesGet200ResponseDataInnerData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NumeroApplication == input.NumeroApplication ||
                    (this.NumeroApplication != null &&
                    this.NumeroApplication.Equals(input.NumeroApplication))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Nom == input.Nom ||
                    (this.Nom != null &&
                    this.Nom.Equals(input.Nom))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Depositaire == input.Depositaire ||
                    (this.Depositaire != null &&
                    this.Depositaire.Equals(input.Depositaire))
                ) && 
                (
                    this.Clef == input.Clef ||
                    (this.Clef != null &&
                    this.Clef.Equals(input.Clef))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NumeroApplication != null)
                {
                    hashCode = (hashCode * 59) + this.NumeroApplication.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Nom != null)
                {
                    hashCode = (hashCode * 59) + this.Nom.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Depositaire != null)
                {
                    hashCode = (hashCode * 59) + this.Depositaire.GetHashCode();
                }
                if (this.Clef != null)
                {
                    hashCode = (hashCode * 59) + this.Clef.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
