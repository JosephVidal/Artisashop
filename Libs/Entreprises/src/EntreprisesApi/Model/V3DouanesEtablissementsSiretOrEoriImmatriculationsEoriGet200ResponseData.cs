/*
 * API Entreprise
 *
 * Cette page contient la documentation technique pour accéder à API Entreprise. Les API étant accessible uniquement sous habilitation, l'interaction avec l'environnement de production n'est possible que si vous êtes **en possession d'une clé d'accès (jeton).  ### Comment tester l'API ?  Il est possible de tester les API via notre environnement de **staging** qui vous retournera systématiquement des données fictives.  Il est nécessaire d'utiliser le jeton de staging indiqué ci-dessous.  - --  *eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1MmE1YmZjMi1jMzUwLTQ4ZjQtYjY5Ni05ZWE3NmRiM2VmMjkiLCJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJzY29wZXMiOlsiY2VydGlmaWNhdF9yZ2VfYWRlbWUiLCJtc2FfY290aXNhdGlvbnMiLCJlbnRyZXByaXNlcyIsImV4dHJhaXRzX3JjcyIsImNlcnRpZmljYXRfb3BxaWJpIiwiYXNzb2NpYXRpb25zIiwiZXRhYmxpc3NlbWVudHMiLCJmbnRwX2NhcnRlX3BybyIsInF1YWxpYmF0IiwiZW50cmVwcmlzZXNfYXJ0aXNhbmFsZXMiLCJjZXJ0aWZpY2F0X2NuZXRwIiwiZW9yaV9kb3VhbmVzIiwicHJvYnRwIiwiYWN0ZXNfaW5waSIsImV4dHJhaXRfY291cnRfaW5waSIsImF0dGVzdGF0aW9uc19zb2NpYWxlcyIsImxpYXNzZV9maXNjYWxlIiwiYXR0ZXN0YXRpb25zX2Zpc2NhbGVzIiwiZXhlcmNpY2VzIiwiY29udmVudGlvbnNfY29sbGVjdGl2ZXMiLCJiaWxhbnNfaW5waSIsImRvY3VtZW50c19hc3NvY2lhdGlvbiIsImNlcnRpZmljYXRfYWdlbmNlX2JpbyIsImJpbGFuc19lbnRyZXByaXNlX2JkZiIsImF0dGVzdGF0aW9uc19hZ2VmaXBoIiwibWVzcmlfaWRlbnRpZmlhbnQiLCJtZXNyaV9pZGVudGl0ZSIsIm1lc3JpX2luc2NyaXB0aW9uX2V0dWRpYW50IiwibWVzcmlfaW5zY3JpcHRpb25fYXV0cmUiLCJtZXNyaV9hZG1pc3Npb24iLCJtZXNyaV9ldGFibGlzc2VtZW50cyIsInBvbGVfZW1wbG9pX2lkZW50aXRlIiwicG9sZV9lbXBsb2lfYWRyZXNzZSIsInBvbGVfZW1wbG9pX2NvbnRhY3QiLCJwb2xlX2VtcGxvaV9pbnNjcmlwdGlvbiIsImNuYWZfcXVvdGllbnRfZmFtaWxpYWwiLCJjbmFmX2FsbG9jYXRhaXJlcyIsImNuYWZfZW5mYW50cyIsImNuYWZfYWRyZXNzZSIsImNub3VzX3N0YXR1dF9ib3Vyc2llciIsInVwdGltZSIsImNub3VzX2VjaGVsb25fYm91cnNlIiwiY25vdXNfZW1haWwiLCJjbm91c19wZXJpb2RlX3ZlcnNlbWVudCIsImNub3VzX3N0YXR1dF9ib3Vyc2UiLCJjbm91c192aWxsZV9ldHVkZXMiLCJjbm91c19pZGVudGl0ZSIsImRnZmlwX2RlY2xhcmFudDFfbm9tIiwiZGdmaXBfZGVjbGFyYW50MV9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50MV9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50MV9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RlY2xhcmFudDJfbm9tIiwiZGdmaXBfZGVjbGFyYW50Ml9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50Ml9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50Ml9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RhdGVfcmVjb3V2cmVtZW50IiwiZGdmaXBfZGF0ZV9ldGFibGlzc2VtZW50IiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX3RheGF0aW9uIiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX2FubmVlIiwiZGdmaXBfbm9tYnJlX3BhcnRzIiwiZGdmaXBfbm9tYnJlX3BlcnNvbm5lc19hX2NoYXJnZSIsImRnZmlwX3NpdHVhdGlvbl9mYW1pbGlhbGUiLCJkZ2ZpcF9yZXZlbnVfYnJ1dF9nbG9iYWwiLCJkZ2ZpcF9yZXZlbnVfaW1wb3NhYmxlIiwiZGdmaXBfaW1wb3RfcmV2ZW51X25ldF9hdmFudF9jb3JyZWN0aW9ucyIsImRnZmlwX21vbnRhbnRfaW1wb3QiLCJkZ2ZpcF9yZXZlbnVfZmlzY2FsX3JlZmVyZW5jZSIsImRnZmlwX2FubmVlX2ltcG90IiwiZGdmaXBfYW5uZWVfcmV2ZW51cyIsImRnZmlwX2VycmV1cl9jb3JyZWN0aWYiLCJkZ2ZpcF9zaXR1YXRpb25fcGFydGllbGxlIl0sInN1YiI6InN0YWdpbmcgZGV2ZWxvcG1lbnQiLCJpYXQiOjE2NjY4NjQwNzQsInZlcnNpb24iOiIxLjAiLCJleHAiOjE5ODI0ODMyNzR9.u2kMWzll3iCTczUOqMQbpS66VfrVzI2lLiyGEPcKAec*       
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@entreprise.api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EntreprisesApi.Client.OpenAPIDateConverter;

namespace EntreprisesApi.Model
{
    /// <summary>
    /// V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData
    /// </summary>
    [DataContract(Name = "_v3_douanes_etablissements__siret_or_eori__immatriculations_eori_get_200_response_data")]
    public partial class V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData : IEquatable<V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData" /> class.
        /// </summary>
        /// <param name="id">Numéro EORI (Economic Operator Registration and Identification) de l&#39;entité: un numéro unique communautaire permettant d’identifier chaque opérateur économique dans ses relations avec les autorités douanières. (required).</param>
        /// <param name="actif">Indique si ce numéro est encore actif (true) ou non (false) (required).</param>
        /// <param name="codePays">codePays (required).</param>
        /// <param name="codePostal">codePostal (required).</param>
        /// <param name="libelle">Libellé de l&#39;entreprise tel que connu par les douanes, équivalent à la Raison Sociale pour une entreprise Française. (required).</param>
        /// <param name="pays">Pays de résidence de l&#39;établissement telle que connue par les douanes (required).</param>
        /// <param name="rue">Rue de l&#39;établissement telle que connue par les douanes (required).</param>
        /// <param name="ville">Ville de l&#39;établissement telle que connue par les douanes (required).</param>
        public V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData(string id = default(string), bool actif = default(bool), string codePays = default(string), string codePostal = default(string), string libelle = default(string), string pays = default(string), string rue = default(string), string ville = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData and cannot be null");
            }
            this.Id = id;
            this.Actif = actif;
            // to ensure "codePays" is required (not null)
            if (codePays == null)
            {
                throw new ArgumentNullException("codePays is a required property for V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData and cannot be null");
            }
            this.CodePays = codePays;
            // to ensure "codePostal" is required (not null)
            if (codePostal == null)
            {
                throw new ArgumentNullException("codePostal is a required property for V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData and cannot be null");
            }
            this.CodePostal = codePostal;
            // to ensure "libelle" is required (not null)
            if (libelle == null)
            {
                throw new ArgumentNullException("libelle is a required property for V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData and cannot be null");
            }
            this.Libelle = libelle;
            // to ensure "pays" is required (not null)
            if (pays == null)
            {
                throw new ArgumentNullException("pays is a required property for V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData and cannot be null");
            }
            this.Pays = pays;
            // to ensure "rue" is required (not null)
            if (rue == null)
            {
                throw new ArgumentNullException("rue is a required property for V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData and cannot be null");
            }
            this.Rue = rue;
            // to ensure "ville" is required (not null)
            if (ville == null)
            {
                throw new ArgumentNullException("ville is a required property for V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData and cannot be null");
            }
            this.Ville = ville;
        }

        /// <summary>
        /// Numéro EORI (Economic Operator Registration and Identification) de l&#39;entité: un numéro unique communautaire permettant d’identifier chaque opérateur économique dans ses relations avec les autorités douanières.
        /// </summary>
        /// <value>Numéro EORI (Economic Operator Registration and Identification) de l&#39;entité: un numéro unique communautaire permettant d’identifier chaque opérateur économique dans ses relations avec les autorités douanières.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Indique si ce numéro est encore actif (true) ou non (false)
        /// </summary>
        /// <value>Indique si ce numéro est encore actif (true) ou non (false)</value>
        [DataMember(Name = "actif", IsRequired = true, EmitDefaultValue = true)]
        public bool Actif { get; set; }

        /// <summary>
        /// Gets or Sets CodePays
        /// </summary>
        [DataMember(Name = "code_pays", IsRequired = true, EmitDefaultValue = true)]
        public string CodePays { get; set; }

        /// <summary>
        /// Gets or Sets CodePostal
        /// </summary>
        [DataMember(Name = "code_postal", IsRequired = true, EmitDefaultValue = true)]
        public string CodePostal { get; set; }

        /// <summary>
        /// Libellé de l&#39;entreprise tel que connu par les douanes, équivalent à la Raison Sociale pour une entreprise Française.
        /// </summary>
        /// <value>Libellé de l&#39;entreprise tel que connu par les douanes, équivalent à la Raison Sociale pour une entreprise Française.</value>
        [DataMember(Name = "libelle", IsRequired = true, EmitDefaultValue = true)]
        public string Libelle { get; set; }

        /// <summary>
        /// Pays de résidence de l&#39;établissement telle que connue par les douanes
        /// </summary>
        /// <value>Pays de résidence de l&#39;établissement telle que connue par les douanes</value>
        [DataMember(Name = "pays", IsRequired = true, EmitDefaultValue = true)]
        public string Pays { get; set; }

        /// <summary>
        /// Rue de l&#39;établissement telle que connue par les douanes
        /// </summary>
        /// <value>Rue de l&#39;établissement telle que connue par les douanes</value>
        [DataMember(Name = "rue", IsRequired = true, EmitDefaultValue = true)]
        public string Rue { get; set; }

        /// <summary>
        /// Ville de l&#39;établissement telle que connue par les douanes
        /// </summary>
        /// <value>Ville de l&#39;établissement telle que connue par les douanes</value>
        [DataMember(Name = "ville", IsRequired = true, EmitDefaultValue = true)]
        public string Ville { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Actif: ").Append(Actif).Append("\n");
            sb.Append("  CodePays: ").Append(CodePays).Append("\n");
            sb.Append("  CodePostal: ").Append(CodePostal).Append("\n");
            sb.Append("  Libelle: ").Append(Libelle).Append("\n");
            sb.Append("  Pays: ").Append(Pays).Append("\n");
            sb.Append("  Rue: ").Append(Rue).Append("\n");
            sb.Append("  Ville: ").Append(Ville).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData);
        }

        /// <summary>
        /// Returns true if V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V3DouanesEtablissementsSiretOrEoriImmatriculationsEoriGet200ResponseData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Actif == input.Actif ||
                    this.Actif.Equals(input.Actif)
                ) && 
                (
                    this.CodePays == input.CodePays ||
                    (this.CodePays != null &&
                    this.CodePays.Equals(input.CodePays))
                ) && 
                (
                    this.CodePostal == input.CodePostal ||
                    (this.CodePostal != null &&
                    this.CodePostal.Equals(input.CodePostal))
                ) && 
                (
                    this.Libelle == input.Libelle ||
                    (this.Libelle != null &&
                    this.Libelle.Equals(input.Libelle))
                ) && 
                (
                    this.Pays == input.Pays ||
                    (this.Pays != null &&
                    this.Pays.Equals(input.Pays))
                ) && 
                (
                    this.Rue == input.Rue ||
                    (this.Rue != null &&
                    this.Rue.Equals(input.Rue))
                ) && 
                (
                    this.Ville == input.Ville ||
                    (this.Ville != null &&
                    this.Ville.Equals(input.Ville))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Actif.GetHashCode();
                if (this.CodePays != null)
                {
                    hashCode = (hashCode * 59) + this.CodePays.GetHashCode();
                }
                if (this.CodePostal != null)
                {
                    hashCode = (hashCode * 59) + this.CodePostal.GetHashCode();
                }
                if (this.Libelle != null)
                {
                    hashCode = (hashCode * 59) + this.Libelle.GetHashCode();
                }
                if (this.Pays != null)
                {
                    hashCode = (hashCode * 59) + this.Pays.GetHashCode();
                }
                if (this.Rue != null)
                {
                    hashCode = (hashCode * 59) + this.Rue.GetHashCode();
                }
                if (this.Ville != null)
                {
                    hashCode = (hashCode * 59) + this.Ville.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
