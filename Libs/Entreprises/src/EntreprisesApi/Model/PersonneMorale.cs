/*
 * API Entreprise
 *
 * Cette page contient la documentation technique pour accéder à API Entreprise. Les API étant accessible uniquement sous habilitation, l'interaction avec l'environnement de production n'est possible que si vous êtes **en possession d'une clé d'accès (jeton).  ### Comment tester l'API ?  Il est possible de tester les API via notre environnement de **staging** qui vous retournera systématiquement des données fictives.  Il est nécessaire d'utiliser le jeton de staging indiqué ci-dessous.  - --  *eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1MmE1YmZjMi1jMzUwLTQ4ZjQtYjY5Ni05ZWE3NmRiM2VmMjkiLCJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJzY29wZXMiOlsiY2VydGlmaWNhdF9yZ2VfYWRlbWUiLCJtc2FfY290aXNhdGlvbnMiLCJlbnRyZXByaXNlcyIsImV4dHJhaXRzX3JjcyIsImNlcnRpZmljYXRfb3BxaWJpIiwiYXNzb2NpYXRpb25zIiwiZXRhYmxpc3NlbWVudHMiLCJmbnRwX2NhcnRlX3BybyIsInF1YWxpYmF0IiwiZW50cmVwcmlzZXNfYXJ0aXNhbmFsZXMiLCJjZXJ0aWZpY2F0X2NuZXRwIiwiZW9yaV9kb3VhbmVzIiwicHJvYnRwIiwiYWN0ZXNfaW5waSIsImV4dHJhaXRfY291cnRfaW5waSIsImF0dGVzdGF0aW9uc19zb2NpYWxlcyIsImxpYXNzZV9maXNjYWxlIiwiYXR0ZXN0YXRpb25zX2Zpc2NhbGVzIiwiZXhlcmNpY2VzIiwiY29udmVudGlvbnNfY29sbGVjdGl2ZXMiLCJiaWxhbnNfaW5waSIsImRvY3VtZW50c19hc3NvY2lhdGlvbiIsImNlcnRpZmljYXRfYWdlbmNlX2JpbyIsImJpbGFuc19lbnRyZXByaXNlX2JkZiIsImF0dGVzdGF0aW9uc19hZ2VmaXBoIiwibWVzcmlfaWRlbnRpZmlhbnQiLCJtZXNyaV9pZGVudGl0ZSIsIm1lc3JpX2luc2NyaXB0aW9uX2V0dWRpYW50IiwibWVzcmlfaW5zY3JpcHRpb25fYXV0cmUiLCJtZXNyaV9hZG1pc3Npb24iLCJtZXNyaV9ldGFibGlzc2VtZW50cyIsInBvbGVfZW1wbG9pX2lkZW50aXRlIiwicG9sZV9lbXBsb2lfYWRyZXNzZSIsInBvbGVfZW1wbG9pX2NvbnRhY3QiLCJwb2xlX2VtcGxvaV9pbnNjcmlwdGlvbiIsImNuYWZfcXVvdGllbnRfZmFtaWxpYWwiLCJjbmFmX2FsbG9jYXRhaXJlcyIsImNuYWZfZW5mYW50cyIsImNuYWZfYWRyZXNzZSIsImNub3VzX3N0YXR1dF9ib3Vyc2llciIsInVwdGltZSIsImNub3VzX2VjaGVsb25fYm91cnNlIiwiY25vdXNfZW1haWwiLCJjbm91c19wZXJpb2RlX3ZlcnNlbWVudCIsImNub3VzX3N0YXR1dF9ib3Vyc2UiLCJjbm91c192aWxsZV9ldHVkZXMiLCJjbm91c19pZGVudGl0ZSIsImRnZmlwX2RlY2xhcmFudDFfbm9tIiwiZGdmaXBfZGVjbGFyYW50MV9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50MV9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50MV9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RlY2xhcmFudDJfbm9tIiwiZGdmaXBfZGVjbGFyYW50Ml9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50Ml9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50Ml9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RhdGVfcmVjb3V2cmVtZW50IiwiZGdmaXBfZGF0ZV9ldGFibGlzc2VtZW50IiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX3RheGF0aW9uIiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX2FubmVlIiwiZGdmaXBfbm9tYnJlX3BhcnRzIiwiZGdmaXBfbm9tYnJlX3BlcnNvbm5lc19hX2NoYXJnZSIsImRnZmlwX3NpdHVhdGlvbl9mYW1pbGlhbGUiLCJkZ2ZpcF9yZXZlbnVfYnJ1dF9nbG9iYWwiLCJkZ2ZpcF9yZXZlbnVfaW1wb3NhYmxlIiwiZGdmaXBfaW1wb3RfcmV2ZW51X25ldF9hdmFudF9jb3JyZWN0aW9ucyIsImRnZmlwX21vbnRhbnRfaW1wb3QiLCJkZ2ZpcF9yZXZlbnVfZmlzY2FsX3JlZmVyZW5jZSIsImRnZmlwX2FubmVlX2ltcG90IiwiZGdmaXBfYW5uZWVfcmV2ZW51cyIsImRnZmlwX2VycmV1cl9jb3JyZWN0aWYiLCJkZ2ZpcF9zaXR1YXRpb25fcGFydGllbGxlIl0sInN1YiI6InN0YWdpbmcgZGV2ZWxvcG1lbnQiLCJpYXQiOjE2NjY4NjQwNzQsInZlcnNpb24iOiIxLjAiLCJleHAiOjE5ODI0ODMyNzR9.u2kMWzll3iCTczUOqMQbpS66VfrVzI2lLiyGEPcKAec*       
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@entreprise.api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EntreprisesApi.Client.OpenAPIDateConverter;

namespace EntreprisesApi.Model
{
    /// <summary>
    /// Informations sur l&#39;entreprise s&#39;il s&#39;agit d&#39;une personne morale. Les champs sont vides si l&#39;entreprise est une personne physique.
    /// </summary>
    [DataContract(Name = "Personne_morale")]
    public partial class PersonneMorale : IEquatable<PersonneMorale>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonneMorale" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PersonneMorale() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonneMorale" /> class.
        /// </summary>
        /// <param name="formeJuridique">formeJuridique (required).</param>
        /// <param name="denomination">denomination (required).</param>
        /// <param name="dateClotureExerciceComptable">Mois et jour de l&#39;année où l&#39;exercice comptable de l&#39;entreprise est clôturé. (required).</param>
        /// <param name="dateFinDeVie">Date à laquelle l&#39;entreprise cesse d&#39;exister, sauf potentiel renouvellement. Correspond souvent à la date de création + 100 ans. (required).</param>
        public PersonneMorale(FormeJuridique formeJuridique = default(FormeJuridique), string denomination = default(string), string dateClotureExerciceComptable = default(string), string dateFinDeVie = default(string))
        {
            // to ensure "formeJuridique" is required (not null)
            if (formeJuridique == null)
            {
                throw new ArgumentNullException("formeJuridique is a required property for PersonneMorale and cannot be null");
            }
            this.FormeJuridique = formeJuridique;
            // to ensure "denomination" is required (not null)
            if (denomination == null)
            {
                throw new ArgumentNullException("denomination is a required property for PersonneMorale and cannot be null");
            }
            this.Denomination = denomination;
            // to ensure "dateClotureExerciceComptable" is required (not null)
            if (dateClotureExerciceComptable == null)
            {
                throw new ArgumentNullException("dateClotureExerciceComptable is a required property for PersonneMorale and cannot be null");
            }
            this.DateClotureExerciceComptable = dateClotureExerciceComptable;
            // to ensure "dateFinDeVie" is required (not null)
            if (dateFinDeVie == null)
            {
                throw new ArgumentNullException("dateFinDeVie is a required property for PersonneMorale and cannot be null");
            }
            this.DateFinDeVie = dateFinDeVie;
        }

        /// <summary>
        /// Gets or Sets FormeJuridique
        /// </summary>
        [DataMember(Name = "forme_juridique", IsRequired = true, EmitDefaultValue = true)]
        public FormeJuridique FormeJuridique { get; set; }

        /// <summary>
        /// Gets or Sets Denomination
        /// </summary>
        [DataMember(Name = "denomination", IsRequired = true, EmitDefaultValue = true)]
        public string Denomination { get; set; }

        /// <summary>
        /// Mois et jour de l&#39;année où l&#39;exercice comptable de l&#39;entreprise est clôturé.
        /// </summary>
        /// <value>Mois et jour de l&#39;année où l&#39;exercice comptable de l&#39;entreprise est clôturé.</value>
        [DataMember(Name = "date_cloture_exercice_comptable", IsRequired = true, EmitDefaultValue = true)]
        public string DateClotureExerciceComptable { get; set; }

        /// <summary>
        /// Date à laquelle l&#39;entreprise cesse d&#39;exister, sauf potentiel renouvellement. Correspond souvent à la date de création + 100 ans.
        /// </summary>
        /// <value>Date à laquelle l&#39;entreprise cesse d&#39;exister, sauf potentiel renouvellement. Correspond souvent à la date de création + 100 ans.</value>
        [DataMember(Name = "date_fin_de_vie", IsRequired = true, EmitDefaultValue = true)]
        public string DateFinDeVie { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PersonneMorale {\n");
            sb.Append("  FormeJuridique: ").Append(FormeJuridique).Append("\n");
            sb.Append("  Denomination: ").Append(Denomination).Append("\n");
            sb.Append("  DateClotureExerciceComptable: ").Append(DateClotureExerciceComptable).Append("\n");
            sb.Append("  DateFinDeVie: ").Append(DateFinDeVie).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PersonneMorale);
        }

        /// <summary>
        /// Returns true if PersonneMorale instances are equal
        /// </summary>
        /// <param name="input">Instance of PersonneMorale to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonneMorale input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FormeJuridique == input.FormeJuridique ||
                    (this.FormeJuridique != null &&
                    this.FormeJuridique.Equals(input.FormeJuridique))
                ) && 
                (
                    this.Denomination == input.Denomination ||
                    (this.Denomination != null &&
                    this.Denomination.Equals(input.Denomination))
                ) && 
                (
                    this.DateClotureExerciceComptable == input.DateClotureExerciceComptable ||
                    (this.DateClotureExerciceComptable != null &&
                    this.DateClotureExerciceComptable.Equals(input.DateClotureExerciceComptable))
                ) && 
                (
                    this.DateFinDeVie == input.DateFinDeVie ||
                    (this.DateFinDeVie != null &&
                    this.DateFinDeVie.Equals(input.DateFinDeVie))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FormeJuridique != null)
                {
                    hashCode = (hashCode * 59) + this.FormeJuridique.GetHashCode();
                }
                if (this.Denomination != null)
                {
                    hashCode = (hashCode * 59) + this.Denomination.GetHashCode();
                }
                if (this.DateClotureExerciceComptable != null)
                {
                    hashCode = (hashCode * 59) + this.DateClotureExerciceComptable.GetHashCode();
                }
                if (this.DateFinDeVie != null)
                {
                    hashCode = (hashCode * 59) + this.DateFinDeVie.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
