/*
 * API Entreprise
 *
 * Cette page contient la documentation technique pour accéder à API Entreprise. Les API étant accessible uniquement sous habilitation, l'interaction avec l'environnement de production n'est possible que si vous êtes **en possession d'une clé d'accès (jeton).  ### Comment tester l'API ?  Il est possible de tester les API via notre environnement de **staging** qui vous retournera systématiquement des données fictives.  Il est nécessaire d'utiliser le jeton de staging indiqué ci-dessous.  - --  *eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1MmE1YmZjMi1jMzUwLTQ4ZjQtYjY5Ni05ZWE3NmRiM2VmMjkiLCJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJzY29wZXMiOlsiY2VydGlmaWNhdF9yZ2VfYWRlbWUiLCJtc2FfY290aXNhdGlvbnMiLCJlbnRyZXByaXNlcyIsImV4dHJhaXRzX3JjcyIsImNlcnRpZmljYXRfb3BxaWJpIiwiYXNzb2NpYXRpb25zIiwiZXRhYmxpc3NlbWVudHMiLCJmbnRwX2NhcnRlX3BybyIsInF1YWxpYmF0IiwiZW50cmVwcmlzZXNfYXJ0aXNhbmFsZXMiLCJjZXJ0aWZpY2F0X2NuZXRwIiwiZW9yaV9kb3VhbmVzIiwicHJvYnRwIiwiYWN0ZXNfaW5waSIsImV4dHJhaXRfY291cnRfaW5waSIsImF0dGVzdGF0aW9uc19zb2NpYWxlcyIsImxpYXNzZV9maXNjYWxlIiwiYXR0ZXN0YXRpb25zX2Zpc2NhbGVzIiwiZXhlcmNpY2VzIiwiY29udmVudGlvbnNfY29sbGVjdGl2ZXMiLCJiaWxhbnNfaW5waSIsImRvY3VtZW50c19hc3NvY2lhdGlvbiIsImNlcnRpZmljYXRfYWdlbmNlX2JpbyIsImJpbGFuc19lbnRyZXByaXNlX2JkZiIsImF0dGVzdGF0aW9uc19hZ2VmaXBoIiwibWVzcmlfaWRlbnRpZmlhbnQiLCJtZXNyaV9pZGVudGl0ZSIsIm1lc3JpX2luc2NyaXB0aW9uX2V0dWRpYW50IiwibWVzcmlfaW5zY3JpcHRpb25fYXV0cmUiLCJtZXNyaV9hZG1pc3Npb24iLCJtZXNyaV9ldGFibGlzc2VtZW50cyIsInBvbGVfZW1wbG9pX2lkZW50aXRlIiwicG9sZV9lbXBsb2lfYWRyZXNzZSIsInBvbGVfZW1wbG9pX2NvbnRhY3QiLCJwb2xlX2VtcGxvaV9pbnNjcmlwdGlvbiIsImNuYWZfcXVvdGllbnRfZmFtaWxpYWwiLCJjbmFmX2FsbG9jYXRhaXJlcyIsImNuYWZfZW5mYW50cyIsImNuYWZfYWRyZXNzZSIsImNub3VzX3N0YXR1dF9ib3Vyc2llciIsInVwdGltZSIsImNub3VzX2VjaGVsb25fYm91cnNlIiwiY25vdXNfZW1haWwiLCJjbm91c19wZXJpb2RlX3ZlcnNlbWVudCIsImNub3VzX3N0YXR1dF9ib3Vyc2UiLCJjbm91c192aWxsZV9ldHVkZXMiLCJjbm91c19pZGVudGl0ZSIsImRnZmlwX2RlY2xhcmFudDFfbm9tIiwiZGdmaXBfZGVjbGFyYW50MV9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50MV9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50MV9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RlY2xhcmFudDJfbm9tIiwiZGdmaXBfZGVjbGFyYW50Ml9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50Ml9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50Ml9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RhdGVfcmVjb3V2cmVtZW50IiwiZGdmaXBfZGF0ZV9ldGFibGlzc2VtZW50IiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX3RheGF0aW9uIiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX2FubmVlIiwiZGdmaXBfbm9tYnJlX3BhcnRzIiwiZGdmaXBfbm9tYnJlX3BlcnNvbm5lc19hX2NoYXJnZSIsImRnZmlwX3NpdHVhdGlvbl9mYW1pbGlhbGUiLCJkZ2ZpcF9yZXZlbnVfYnJ1dF9nbG9iYWwiLCJkZ2ZpcF9yZXZlbnVfaW1wb3NhYmxlIiwiZGdmaXBfaW1wb3RfcmV2ZW51X25ldF9hdmFudF9jb3JyZWN0aW9ucyIsImRnZmlwX21vbnRhbnRfaW1wb3QiLCJkZ2ZpcF9yZXZlbnVfZmlzY2FsX3JlZmVyZW5jZSIsImRnZmlwX2FubmVlX2ltcG90IiwiZGdmaXBfYW5uZWVfcmV2ZW51cyIsImRnZmlwX2VycmV1cl9jb3JyZWN0aWYiLCJkZ2ZpcF9zaXR1YXRpb25fcGFydGllbGxlIl0sInN1YiI6InN0YWdpbmcgZGV2ZWxvcG1lbnQiLCJpYXQiOjE2NjY4NjQwNzQsInZlcnNpb24iOiIxLjAiLCJleHAiOjE5ODI0ODMyNzR9.u2kMWzll3iCTczUOqMQbpS66VfrVzI2lLiyGEPcKAec*       
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@entreprise.api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EntreprisesApi.Client.OpenAPIDateConverter;

namespace EntreprisesApi.Model
{
    /// <summary>
    /// V3InpiUnitesLegalesSirenBrevetsGet200ResponseDataInnerData
    /// </summary>
    [DataContract(Name = "_v3_inpi_unites_legales__siren__brevets_get_200_response_data_inner_data")]
    public partial class V3InpiUnitesLegalesSirenBrevetsGet200ResponseDataInnerData : IEquatable<V3InpiUnitesLegalesSirenBrevetsGet200ResponseDataInnerData>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Brevet for value: brevet
            /// </summary>
            [EnumMember(Value = "brevet")]
            Brevet = 1

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Code de deux lettres représentant la zone géographique où le brevet a été déposé, en fonction de l&#39;organisation qui a enregistré le brevet. 
        /// </summary>
        /// <value>Code de deux lettres représentant la zone géographique où le brevet a été déposé, en fonction de l&#39;organisation qui a enregistré le brevet. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodeZoneEnum
        {
            /// <summary>
            /// Enum AL for value: AL
            /// </summary>
            [EnumMember(Value = "AL")]
            AL = 1,

            /// <summary>
            /// Enum AP for value: AP
            /// </summary>
            [EnumMember(Value = "AP")]
            AP = 2,

            /// <summary>
            /// Enum AR for value: AR
            /// </summary>
            [EnumMember(Value = "AR")]
            AR = 3,

            /// <summary>
            /// Enum AT for value: AT
            /// </summary>
            [EnumMember(Value = "AT")]
            AT = 4,

            /// <summary>
            /// Enum AU for value: AU
            /// </summary>
            [EnumMember(Value = "AU")]
            AU = 5,

            /// <summary>
            /// Enum BA for value: BA
            /// </summary>
            [EnumMember(Value = "BA")]
            BA = 6,

            /// <summary>
            /// Enum BE for value: BE
            /// </summary>
            [EnumMember(Value = "BE")]
            BE = 7,

            /// <summary>
            /// Enum BG for value: BG
            /// </summary>
            [EnumMember(Value = "BG")]
            BG = 8,

            /// <summary>
            /// Enum BR for value: BR
            /// </summary>
            [EnumMember(Value = "BR")]
            BR = 9,

            /// <summary>
            /// Enum CA for value: CA
            /// </summary>
            [EnumMember(Value = "CA")]
            CA = 10,

            /// <summary>
            /// Enum CH for value: CH
            /// </summary>
            [EnumMember(Value = "CH")]
            CH = 11,

            /// <summary>
            /// Enum CL for value: CL
            /// </summary>
            [EnumMember(Value = "CL")]
            CL = 12,

            /// <summary>
            /// Enum CN for value: CN
            /// </summary>
            [EnumMember(Value = "CN")]
            CN = 13,

            /// <summary>
            /// Enum CO for value: CO
            /// </summary>
            [EnumMember(Value = "CO")]
            CO = 14,

            /// <summary>
            /// Enum CR for value: CR
            /// </summary>
            [EnumMember(Value = "CR")]
            CR = 15,

            /// <summary>
            /// Enum CS for value: CS
            /// </summary>
            [EnumMember(Value = "CS")]
            CS = 16,

            /// <summary>
            /// Enum CU for value: CU
            /// </summary>
            [EnumMember(Value = "CU")]
            CU = 17,

            /// <summary>
            /// Enum CY for value: CY
            /// </summary>
            [EnumMember(Value = "CY")]
            CY = 18,

            /// <summary>
            /// Enum CZ for value: CZ
            /// </summary>
            [EnumMember(Value = "CZ")]
            CZ = 19,

            /// <summary>
            /// Enum DD for value: DD
            /// </summary>
            [EnumMember(Value = "DD")]
            DD = 20,

            /// <summary>
            /// Enum DE for value: DE
            /// </summary>
            [EnumMember(Value = "DE")]
            DE = 21,

            /// <summary>
            /// Enum DK for value: DK
            /// </summary>
            [EnumMember(Value = "DK")]
            DK = 22,

            /// <summary>
            /// Enum DZ for value: DZ
            /// </summary>
            [EnumMember(Value = "DZ")]
            DZ = 23,

            /// <summary>
            /// Enum EA for value: EA
            /// </summary>
            [EnumMember(Value = "EA")]
            EA = 24,

            /// <summary>
            /// Enum EC for value: EC
            /// </summary>
            [EnumMember(Value = "EC")]
            EC = 25,

            /// <summary>
            /// Enum EE for value: EE
            /// </summary>
            [EnumMember(Value = "EE")]
            EE = 26,

            /// <summary>
            /// Enum EG for value: EG
            /// </summary>
            [EnumMember(Value = "EG")]
            EG = 27,

            /// <summary>
            /// Enum EP for value: EP
            /// </summary>
            [EnumMember(Value = "EP")]
            EP = 28,

            /// <summary>
            /// Enum ES for value: ES
            /// </summary>
            [EnumMember(Value = "ES")]
            ES = 29,

            /// <summary>
            /// Enum FI for value: FI
            /// </summary>
            [EnumMember(Value = "FI")]
            FI = 30,

            /// <summary>
            /// Enum FR for value: FR
            /// </summary>
            [EnumMember(Value = "FR")]
            FR = 31,

            /// <summary>
            /// Enum GB for value: GB
            /// </summary>
            [EnumMember(Value = "GB")]
            GB = 32,

            /// <summary>
            /// Enum GC for value: GC
            /// </summary>
            [EnumMember(Value = "GC")]
            GC = 33,

            /// <summary>
            /// Enum GE for value: GE
            /// </summary>
            [EnumMember(Value = "GE")]
            GE = 34,

            /// <summary>
            /// Enum GR for value: GR
            /// </summary>
            [EnumMember(Value = "GR")]
            GR = 35,

            /// <summary>
            /// Enum GT for value: GT
            /// </summary>
            [EnumMember(Value = "GT")]
            GT = 36,

            /// <summary>
            /// Enum HK for value: HK
            /// </summary>
            [EnumMember(Value = "HK")]
            HK = 37,

            /// <summary>
            /// Enum HR for value: HR
            /// </summary>
            [EnumMember(Value = "HR")]
            HR = 38,

            /// <summary>
            /// Enum HU for value: HU
            /// </summary>
            [EnumMember(Value = "HU")]
            HU = 39,

            /// <summary>
            /// Enum ID for value: ID
            /// </summary>
            [EnumMember(Value = "ID")]
            ID = 40,

            /// <summary>
            /// Enum IE for value: IE
            /// </summary>
            [EnumMember(Value = "IE")]
            IE = 41,

            /// <summary>
            /// Enum IL for value: IL
            /// </summary>
            [EnumMember(Value = "IL")]
            IL = 42,

            /// <summary>
            /// Enum IN for value: IN
            /// </summary>
            [EnumMember(Value = "IN")]
            IN = 43,

            /// <summary>
            /// Enum IS for value: IS
            /// </summary>
            [EnumMember(Value = "IS")]
            IS = 44,

            /// <summary>
            /// Enum IT for value: IT
            /// </summary>
            [EnumMember(Value = "IT")]
            IT = 45,

            /// <summary>
            /// Enum JP for value: JP
            /// </summary>
            [EnumMember(Value = "JP")]
            JP = 46,

            /// <summary>
            /// Enum KE for value: KE
            /// </summary>
            [EnumMember(Value = "KE")]
            KE = 47,

            /// <summary>
            /// Enum KR for value: KR
            /// </summary>
            [EnumMember(Value = "KR")]
            KR = 48,

            /// <summary>
            /// Enum LI for value: LI
            /// </summary>
            [EnumMember(Value = "LI")]
            LI = 49,

            /// <summary>
            /// Enum LT for value: LT
            /// </summary>
            [EnumMember(Value = "LT")]
            LT = 50,

            /// <summary>
            /// Enum LU for value: LU
            /// </summary>
            [EnumMember(Value = "LU")]
            LU = 51,

            /// <summary>
            /// Enum LV for value: LV
            /// </summary>
            [EnumMember(Value = "LV")]
            LV = 52,

            /// <summary>
            /// Enum MA for value: MA
            /// </summary>
            [EnumMember(Value = "MA")]
            MA = 53,

            /// <summary>
            /// Enum MC for value: MC
            /// </summary>
            [EnumMember(Value = "MC")]
            MC = 54,

            /// <summary>
            /// Enum MD for value: MD
            /// </summary>
            [EnumMember(Value = "MD")]
            MD = 55,

            /// <summary>
            /// Enum ME for value: ME
            /// </summary>
            [EnumMember(Value = "ME")]
            ME = 56,

            /// <summary>
            /// Enum MK for value: MK
            /// </summary>
            [EnumMember(Value = "MK")]
            MK = 57,

            /// <summary>
            /// Enum MN for value: MN
            /// </summary>
            [EnumMember(Value = "MN")]
            MN = 58,

            /// <summary>
            /// Enum MT for value: MT
            /// </summary>
            [EnumMember(Value = "MT")]
            MT = 59,

            /// <summary>
            /// Enum MW for value: MW
            /// </summary>
            [EnumMember(Value = "MW")]
            MW = 60,

            /// <summary>
            /// Enum MX for value: MX
            /// </summary>
            [EnumMember(Value = "MX")]
            MX = 61,

            /// <summary>
            /// Enum MY for value: MY
            /// </summary>
            [EnumMember(Value = "MY")]
            MY = 62,

            /// <summary>
            /// Enum NC for value: NC
            /// </summary>
            [EnumMember(Value = "NC")]
            NC = 63,

            /// <summary>
            /// Enum NI for value: NI
            /// </summary>
            [EnumMember(Value = "NI")]
            NI = 64,

            /// <summary>
            /// Enum NL for value: NL
            /// </summary>
            [EnumMember(Value = "NL")]
            NL = 65,

            /// <summary>
            /// Enum False for value: false
            /// </summary>
            [EnumMember(Value = "false")]
            False = 66,

            /// <summary>
            /// Enum NZ for value: NZ
            /// </summary>
            [EnumMember(Value = "NZ")]
            NZ = 67,

            /// <summary>
            /// Enum OA for value: OA
            /// </summary>
            [EnumMember(Value = "OA")]
            OA = 68,

            /// <summary>
            /// Enum PA for value: PA
            /// </summary>
            [EnumMember(Value = "PA")]
            PA = 69,

            /// <summary>
            /// Enum PE for value: PE
            /// </summary>
            [EnumMember(Value = "PE")]
            PE = 70,

            /// <summary>
            /// Enum PH for value: PH
            /// </summary>
            [EnumMember(Value = "PH")]
            PH = 71,

            /// <summary>
            /// Enum PL for value: PL
            /// </summary>
            [EnumMember(Value = "PL")]
            PL = 72,

            /// <summary>
            /// Enum PT for value: PT
            /// </summary>
            [EnumMember(Value = "PT")]
            PT = 73,

            /// <summary>
            /// Enum RO for value: RO
            /// </summary>
            [EnumMember(Value = "RO")]
            RO = 74,

            /// <summary>
            /// Enum RS for value: RS
            /// </summary>
            [EnumMember(Value = "RS")]
            RS = 75,

            /// <summary>
            /// Enum RU for value: RU
            /// </summary>
            [EnumMember(Value = "RU")]
            RU = 76,

            /// <summary>
            /// Enum SE for value: SE
            /// </summary>
            [EnumMember(Value = "SE")]
            SE = 77,

            /// <summary>
            /// Enum SG for value: SG
            /// </summary>
            [EnumMember(Value = "SG")]
            SG = 78,

            /// <summary>
            /// Enum SI for value: SI
            /// </summary>
            [EnumMember(Value = "SI")]
            SI = 79,

            /// <summary>
            /// Enum SK for value: SK
            /// </summary>
            [EnumMember(Value = "SK")]
            SK = 80,

            /// <summary>
            /// Enum SM for value: SM
            /// </summary>
            [EnumMember(Value = "SM")]
            SM = 81,

            /// <summary>
            /// Enum SU for value: SU
            /// </summary>
            [EnumMember(Value = "SU")]
            SU = 82,

            /// <summary>
            /// Enum SV for value: SV
            /// </summary>
            [EnumMember(Value = "SV")]
            SV = 83,

            /// <summary>
            /// Enum TJ for value: TJ
            /// </summary>
            [EnumMember(Value = "TJ")]
            TJ = 84,

            /// <summary>
            /// Enum TR for value: TR
            /// </summary>
            [EnumMember(Value = "TR")]
            TR = 85,

            /// <summary>
            /// Enum TT for value: TT
            /// </summary>
            [EnumMember(Value = "TT")]
            TT = 86,

            /// <summary>
            /// Enum TW for value: TW
            /// </summary>
            [EnumMember(Value = "TW")]
            TW = 87,

            /// <summary>
            /// Enum UA for value: UA
            /// </summary>
            [EnumMember(Value = "UA")]
            UA = 88,

            /// <summary>
            /// Enum US for value: US
            /// </summary>
            [EnumMember(Value = "US")]
            US = 89,

            /// <summary>
            /// Enum UY for value: UY
            /// </summary>
            [EnumMember(Value = "UY")]
            UY = 90,

            /// <summary>
            /// Enum VN for value: VN
            /// </summary>
            [EnumMember(Value = "VN")]
            VN = 91,

            /// <summary>
            /// Enum WO for value: WO
            /// </summary>
            [EnumMember(Value = "WO")]
            WO = 92,

            /// <summary>
            /// Enum YU for value: YU
            /// </summary>
            [EnumMember(Value = "YU")]
            YU = 93,

            /// <summary>
            /// Enum ZA for value: ZA
            /// </summary>
            [EnumMember(Value = "ZA")]
            ZA = 94,

            /// <summary>
            /// Enum ZM for value: ZM
            /// </summary>
            [EnumMember(Value = "ZM")]
            ZM = 95,

            /// <summary>
            /// Enum ZW for value: ZW
            /// </summary>
            [EnumMember(Value = "ZW")]
            ZW = 96,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 97

        }


        /// <summary>
        /// Code de deux lettres représentant la zone géographique où le brevet a été déposé, en fonction de l&#39;organisation qui a enregistré le brevet. 
        /// </summary>
        /// <value>Code de deux lettres représentant la zone géographique où le brevet a été déposé, en fonction de l&#39;organisation qui a enregistré le brevet. </value>
        [DataMember(Name = "code_zone", IsRequired = true, EmitDefaultValue = true)]
        public CodeZoneEnum CodeZone { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3InpiUnitesLegalesSirenBrevetsGet200ResponseDataInnerData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V3InpiUnitesLegalesSirenBrevetsGet200ResponseDataInnerData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3InpiUnitesLegalesSirenBrevetsGet200ResponseDataInnerData" /> class.
        /// </summary>
        /// <param name="numeroPublication">Numéro de publication du brevet, constitué du code zone + numéro du brevet + catégorie de publication (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="titre">Titre du brevet (required).</param>
        /// <param name="datePublication">Date de publication du brevet (required).</param>
        /// <param name="dateDepot">Date de dépot du brevet (required).</param>
        /// <param name="codeZone">Code de deux lettres représentant la zone géographique où le brevet a été déposé, en fonction de l&#39;organisation qui a enregistré le brevet.  (required).</param>
        /// <param name="numeroBrevet">Numéro du brevet dans l&#39;organisation ou il a été déposé (déterminée par le code de zone)  (required).</param>
        /// <param name="categoriePublication">Code représentant la catégorie du brevet (ex: A1 pour une demande de brevet, (required).</param>
        public V3InpiUnitesLegalesSirenBrevetsGet200ResponseDataInnerData(string numeroPublication = default(string), TypeEnum type = default(TypeEnum), string titre = default(string), DateTime datePublication = default(DateTime), DateTime dateDepot = default(DateTime), CodeZoneEnum codeZone = default(CodeZoneEnum), string numeroBrevet = default(string), string categoriePublication = default(string))
        {
            // to ensure "numeroPublication" is required (not null)
            if (numeroPublication == null)
            {
                throw new ArgumentNullException("numeroPublication is a required property for V3InpiUnitesLegalesSirenBrevetsGet200ResponseDataInnerData and cannot be null");
            }
            this.NumeroPublication = numeroPublication;
            this.Type = type;
            // to ensure "titre" is required (not null)
            if (titre == null)
            {
                throw new ArgumentNullException("titre is a required property for V3InpiUnitesLegalesSirenBrevetsGet200ResponseDataInnerData and cannot be null");
            }
            this.Titre = titre;
            this.DatePublication = datePublication;
            this.DateDepot = dateDepot;
            this.CodeZone = codeZone;
            // to ensure "numeroBrevet" is required (not null)
            if (numeroBrevet == null)
            {
                throw new ArgumentNullException("numeroBrevet is a required property for V3InpiUnitesLegalesSirenBrevetsGet200ResponseDataInnerData and cannot be null");
            }
            this.NumeroBrevet = numeroBrevet;
            // to ensure "categoriePublication" is required (not null)
            if (categoriePublication == null)
            {
                throw new ArgumentNullException("categoriePublication is a required property for V3InpiUnitesLegalesSirenBrevetsGet200ResponseDataInnerData and cannot be null");
            }
            this.CategoriePublication = categoriePublication;
        }

        /// <summary>
        /// Numéro de publication du brevet, constitué du code zone + numéro du brevet + catégorie de publication
        /// </summary>
        /// <value>Numéro de publication du brevet, constitué du code zone + numéro du brevet + catégorie de publication</value>
        [DataMember(Name = "numero_publication", IsRequired = true, EmitDefaultValue = true)]
        public string NumeroPublication { get; set; }

        /// <summary>
        /// Titre du brevet
        /// </summary>
        /// <value>Titre du brevet</value>
        [DataMember(Name = "titre", IsRequired = true, EmitDefaultValue = true)]
        public string Titre { get; set; }

        /// <summary>
        /// Date de publication du brevet
        /// </summary>
        /// <value>Date de publication du brevet</value>
        [DataMember(Name = "date_publication", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DatePublication { get; set; }

        /// <summary>
        /// Date de dépot du brevet
        /// </summary>
        /// <value>Date de dépot du brevet</value>
        [DataMember(Name = "date_depot", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateDepot { get; set; }

        /// <summary>
        /// Numéro du brevet dans l&#39;organisation ou il a été déposé (déterminée par le code de zone) 
        /// </summary>
        /// <value>Numéro du brevet dans l&#39;organisation ou il a été déposé (déterminée par le code de zone) </value>
        [DataMember(Name = "numero_brevet", IsRequired = true, EmitDefaultValue = true)]
        public string NumeroBrevet { get; set; }

        /// <summary>
        /// Code représentant la catégorie du brevet (ex: A1 pour une demande de brevet,
        /// </summary>
        /// <value>Code représentant la catégorie du brevet (ex: A1 pour une demande de brevet,</value>
        [DataMember(Name = "categorie_publication", IsRequired = true, EmitDefaultValue = true)]
        public string CategoriePublication { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V3InpiUnitesLegalesSirenBrevetsGet200ResponseDataInnerData {\n");
            sb.Append("  NumeroPublication: ").Append(NumeroPublication).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Titre: ").Append(Titre).Append("\n");
            sb.Append("  DatePublication: ").Append(DatePublication).Append("\n");
            sb.Append("  DateDepot: ").Append(DateDepot).Append("\n");
            sb.Append("  CodeZone: ").Append(CodeZone).Append("\n");
            sb.Append("  NumeroBrevet: ").Append(NumeroBrevet).Append("\n");
            sb.Append("  CategoriePublication: ").Append(CategoriePublication).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V3InpiUnitesLegalesSirenBrevetsGet200ResponseDataInnerData);
        }

        /// <summary>
        /// Returns true if V3InpiUnitesLegalesSirenBrevetsGet200ResponseDataInnerData instances are equal
        /// </summary>
        /// <param name="input">Instance of V3InpiUnitesLegalesSirenBrevetsGet200ResponseDataInnerData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V3InpiUnitesLegalesSirenBrevetsGet200ResponseDataInnerData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NumeroPublication == input.NumeroPublication ||
                    (this.NumeroPublication != null &&
                    this.NumeroPublication.Equals(input.NumeroPublication))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Titre == input.Titre ||
                    (this.Titre != null &&
                    this.Titre.Equals(input.Titre))
                ) && 
                (
                    this.DatePublication == input.DatePublication ||
                    (this.DatePublication != null &&
                    this.DatePublication.Equals(input.DatePublication))
                ) && 
                (
                    this.DateDepot == input.DateDepot ||
                    (this.DateDepot != null &&
                    this.DateDepot.Equals(input.DateDepot))
                ) && 
                (
                    this.CodeZone == input.CodeZone ||
                    this.CodeZone.Equals(input.CodeZone)
                ) && 
                (
                    this.NumeroBrevet == input.NumeroBrevet ||
                    (this.NumeroBrevet != null &&
                    this.NumeroBrevet.Equals(input.NumeroBrevet))
                ) && 
                (
                    this.CategoriePublication == input.CategoriePublication ||
                    (this.CategoriePublication != null &&
                    this.CategoriePublication.Equals(input.CategoriePublication))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NumeroPublication != null)
                {
                    hashCode = (hashCode * 59) + this.NumeroPublication.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Titre != null)
                {
                    hashCode = (hashCode * 59) + this.Titre.GetHashCode();
                }
                if (this.DatePublication != null)
                {
                    hashCode = (hashCode * 59) + this.DatePublication.GetHashCode();
                }
                if (this.DateDepot != null)
                {
                    hashCode = (hashCode * 59) + this.DateDepot.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CodeZone.GetHashCode();
                if (this.NumeroBrevet != null)
                {
                    hashCode = (hashCode * 59) + this.NumeroBrevet.GetHashCode();
                }
                if (this.CategoriePublication != null)
                {
                    hashCode = (hashCode * 59) + this.CategoriePublication.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
