/*
 * API Entreprise
 *
 * Cette page contient la documentation technique pour accéder à API Entreprise. Les API étant accessible uniquement sous habilitation, l'interaction avec l'environnement de production n'est possible que si vous êtes **en possession d'une clé d'accès (jeton).  ### Comment tester l'API ?  Il est possible de tester les API via notre environnement de **staging** qui vous retournera systématiquement des données fictives.  Il est nécessaire d'utiliser le jeton de staging indiqué ci-dessous.  - --  *eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiI1MmE1YmZjMi1jMzUwLTQ4ZjQtYjY5Ni05ZWE3NmRiM2VmMjkiLCJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJzY29wZXMiOlsiY2VydGlmaWNhdF9yZ2VfYWRlbWUiLCJtc2FfY290aXNhdGlvbnMiLCJlbnRyZXByaXNlcyIsImV4dHJhaXRzX3JjcyIsImNlcnRpZmljYXRfb3BxaWJpIiwiYXNzb2NpYXRpb25zIiwiZXRhYmxpc3NlbWVudHMiLCJmbnRwX2NhcnRlX3BybyIsInF1YWxpYmF0IiwiZW50cmVwcmlzZXNfYXJ0aXNhbmFsZXMiLCJjZXJ0aWZpY2F0X2NuZXRwIiwiZW9yaV9kb3VhbmVzIiwicHJvYnRwIiwiYWN0ZXNfaW5waSIsImV4dHJhaXRfY291cnRfaW5waSIsImF0dGVzdGF0aW9uc19zb2NpYWxlcyIsImxpYXNzZV9maXNjYWxlIiwiYXR0ZXN0YXRpb25zX2Zpc2NhbGVzIiwiZXhlcmNpY2VzIiwiY29udmVudGlvbnNfY29sbGVjdGl2ZXMiLCJiaWxhbnNfaW5waSIsImRvY3VtZW50c19hc3NvY2lhdGlvbiIsImNlcnRpZmljYXRfYWdlbmNlX2JpbyIsImJpbGFuc19lbnRyZXByaXNlX2JkZiIsImF0dGVzdGF0aW9uc19hZ2VmaXBoIiwibWVzcmlfaWRlbnRpZmlhbnQiLCJtZXNyaV9pZGVudGl0ZSIsIm1lc3JpX2luc2NyaXB0aW9uX2V0dWRpYW50IiwibWVzcmlfaW5zY3JpcHRpb25fYXV0cmUiLCJtZXNyaV9hZG1pc3Npb24iLCJtZXNyaV9ldGFibGlzc2VtZW50cyIsInBvbGVfZW1wbG9pX2lkZW50aXRlIiwicG9sZV9lbXBsb2lfYWRyZXNzZSIsInBvbGVfZW1wbG9pX2NvbnRhY3QiLCJwb2xlX2VtcGxvaV9pbnNjcmlwdGlvbiIsImNuYWZfcXVvdGllbnRfZmFtaWxpYWwiLCJjbmFmX2FsbG9jYXRhaXJlcyIsImNuYWZfZW5mYW50cyIsImNuYWZfYWRyZXNzZSIsImNub3VzX3N0YXR1dF9ib3Vyc2llciIsInVwdGltZSIsImNub3VzX2VjaGVsb25fYm91cnNlIiwiY25vdXNfZW1haWwiLCJjbm91c19wZXJpb2RlX3ZlcnNlbWVudCIsImNub3VzX3N0YXR1dF9ib3Vyc2UiLCJjbm91c192aWxsZV9ldHVkZXMiLCJjbm91c19pZGVudGl0ZSIsImRnZmlwX2RlY2xhcmFudDFfbm9tIiwiZGdmaXBfZGVjbGFyYW50MV9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50MV9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50MV9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RlY2xhcmFudDJfbm9tIiwiZGdmaXBfZGVjbGFyYW50Ml9ub21fbmFpc3NhbmNlIiwiZGdmaXBfZGVjbGFyYW50Ml9wcmVub21zIiwiZGdmaXBfZGVjbGFyYW50Ml9kYXRlX25haXNzYW5jZSIsImRnZmlwX2RhdGVfcmVjb3V2cmVtZW50IiwiZGdmaXBfZGF0ZV9ldGFibGlzc2VtZW50IiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX3RheGF0aW9uIiwiZGdmaXBfYWRyZXNzZV9maXNjYWxlX2FubmVlIiwiZGdmaXBfbm9tYnJlX3BhcnRzIiwiZGdmaXBfbm9tYnJlX3BlcnNvbm5lc19hX2NoYXJnZSIsImRnZmlwX3NpdHVhdGlvbl9mYW1pbGlhbGUiLCJkZ2ZpcF9yZXZlbnVfYnJ1dF9nbG9iYWwiLCJkZ2ZpcF9yZXZlbnVfaW1wb3NhYmxlIiwiZGdmaXBfaW1wb3RfcmV2ZW51X25ldF9hdmFudF9jb3JyZWN0aW9ucyIsImRnZmlwX21vbnRhbnRfaW1wb3QiLCJkZ2ZpcF9yZXZlbnVfZmlzY2FsX3JlZmVyZW5jZSIsImRnZmlwX2FubmVlX2ltcG90IiwiZGdmaXBfYW5uZWVfcmV2ZW51cyIsImRnZmlwX2VycmV1cl9jb3JyZWN0aWYiLCJkZ2ZpcF9zaXR1YXRpb25fcGFydGllbGxlIl0sInN1YiI6InN0YWdpbmcgZGV2ZWxvcG1lbnQiLCJpYXQiOjE2NjY4NjQwNzQsInZlcnNpb24iOiIxLjAiLCJleHAiOjE5ODI0ODMyNzR9.u2kMWzll3iCTczUOqMQbpS66VfrVzI2lLiyGEPcKAec*       
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@entreprise.api.gouv.fr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EntreprisesApi.Client.OpenAPIDateConverter;

namespace EntreprisesApi.Model
{
    /// <summary>
    /// V3InseeSireneEtablissementsSiretGet200ResponseData
    /// </summary>
    [DataContract(Name = "_v3_insee_sirene_etablissements__siret__get_200_response_data")]
    public partial class V3InseeSireneEtablissementsSiretGet200ResponseData : IEquatable<V3InseeSireneEtablissementsSiretGet200ResponseData>, IValidatableObject
    {
        /// <summary>
        /// Indique si l&#39;établissement est le siège social de l&#39;entreprise.
        /// </summary>
        /// <value>Indique si l&#39;établissement est le siège social de l&#39;entreprise.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SiegeSocialEnum
        {
            /// <summary>
            /// Enum True for value: true
            /// </summary>
            True = 1,

            /// <summary>
            /// Enum False for value: false
            /// </summary>
            False = 0

        }


        /// <summary>
        /// Indique si l&#39;établissement est le siège social de l&#39;entreprise.
        /// </summary>
        /// <value>Indique si l&#39;établissement est le siège social de l&#39;entreprise.</value>
        [DataMember(Name = "siege_social", IsRequired = true, EmitDefaultValue = true)]
        public SiegeSocialEnum SiegeSocial { get; set; }
        /// <summary>
        /// Cette valeur décrit l&#39;état administratif de l&#39;établissement, qui peut être :     - actif. Sauf exception, lors de son inscription au répertoire, tout établissement est à l&#39;état &#39;actif&#39;   - fermé. Cet état découle de la prise en compte d&#39;une déclaration de fermeture. Un établissement fermé peut être rouvert.     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/etatAdministratifEtablissement
        /// </summary>
        /// <value>Cette valeur décrit l&#39;état administratif de l&#39;établissement, qui peut être :     - actif. Sauf exception, lors de son inscription au répertoire, tout établissement est à l&#39;état &#39;actif&#39;   - fermé. Cet état découle de la prise en compte d&#39;une déclaration de fermeture. Un établissement fermé peut être rouvert.     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/etatAdministratifEtablissement</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EtatAdministratifEnum
        {
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 1,

            /// <summary>
            /// Enum F for value: F
            /// </summary>
            [EnumMember(Value = "F")]
            F = 2

        }


        /// <summary>
        /// Cette valeur décrit l&#39;état administratif de l&#39;établissement, qui peut être :     - actif. Sauf exception, lors de son inscription au répertoire, tout établissement est à l&#39;état &#39;actif&#39;   - fermé. Cet état découle de la prise en compte d&#39;une déclaration de fermeture. Un établissement fermé peut être rouvert.     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/etatAdministratifEtablissement
        /// </summary>
        /// <value>Cette valeur décrit l&#39;état administratif de l&#39;établissement, qui peut être :     - actif. Sauf exception, lors de son inscription au répertoire, tout établissement est à l&#39;état &#39;actif&#39;   - fermé. Cet état découle de la prise en compte d&#39;une déclaration de fermeture. Un établissement fermé peut être rouvert.     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/etatAdministratifEtablissement</value>
        [DataMember(Name = "etat_administratif", IsRequired = true, EmitDefaultValue = true)]
        public EtatAdministratifEnum EtatAdministratif { get; set; }
        /// <summary>
        /// Indique si l&#39;établissement est :     - diffusible : &#39;true&#39;   - non-diffusible : &#39;false&#39;. Dans ce cas, les informations obtenues ne doivent en aucun cas être accessibles au grand public.     Plus d&#39;informations sur les conditions de diffusion : LIEN TODO
        /// </summary>
        /// <value>Indique si l&#39;établissement est :     - diffusible : &#39;true&#39;   - non-diffusible : &#39;false&#39;. Dans ce cas, les informations obtenues ne doivent en aucun cas être accessibles au grand public.     Plus d&#39;informations sur les conditions de diffusion : LIEN TODO</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DiffusableCommercialementEnum
        {
            /// <summary>
            /// Enum True for value: true
            /// </summary>
            True = 1,

            /// <summary>
            /// Enum False for value: false
            /// </summary>
            False = 0

        }


        /// <summary>
        /// Indique si l&#39;établissement est :     - diffusible : &#39;true&#39;   - non-diffusible : &#39;false&#39;. Dans ce cas, les informations obtenues ne doivent en aucun cas être accessibles au grand public.     Plus d&#39;informations sur les conditions de diffusion : LIEN TODO
        /// </summary>
        /// <value>Indique si l&#39;établissement est :     - diffusible : &#39;true&#39;   - non-diffusible : &#39;false&#39;. Dans ce cas, les informations obtenues ne doivent en aucun cas être accessibles au grand public.     Plus d&#39;informations sur les conditions de diffusion : LIEN TODO</value>
        [DataMember(Name = "diffusable_commercialement", IsRequired = true, EmitDefaultValue = true)]
        public DiffusableCommercialementEnum DiffusableCommercialement { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3InseeSireneEtablissementsSiretGet200ResponseData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V3InseeSireneEtablissementsSiretGet200ResponseData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V3InseeSireneEtablissementsSiretGet200ResponseData" /> class.
        /// </summary>
        /// <param name="siegeSocial">Indique si l&#39;établissement est le siège social de l&#39;entreprise. (required).</param>
        /// <param name="etatAdministratif">Cette valeur décrit l&#39;état administratif de l&#39;établissement, qui peut être :     - actif. Sauf exception, lors de son inscription au répertoire, tout établissement est à l&#39;état &#39;actif&#39;   - fermé. Cet état découle de la prise en compte d&#39;une déclaration de fermeture. Un établissement fermé peut être rouvert.     Plus d&#39;informations dans la documentation Insee de l&#39;API Sirene : https://www.sirene.fr/sirene/public/variable/etatAdministratifEtablissement (required).</param>
        /// <param name="dateFermeture">Cette valeur est renvoyée sous format timestamp (required).</param>
        /// <param name="activitePrincipale">activitePrincipale (required).</param>
        /// <param name="trancheEffectifSalarie">trancheEffectifSalarie (required).</param>
        /// <param name="diffusableCommercialement">Indique si l&#39;établissement est :     - diffusible : &#39;true&#39;   - non-diffusible : &#39;false&#39;. Dans ce cas, les informations obtenues ne doivent en aucun cas être accessibles au grand public.     Plus d&#39;informations sur les conditions de diffusion : LIEN TODO (required).</param>
        /// <param name="enseigne">L&#39;enseigne est l&#39;appellation désignant l&#39;emplacement ou le local dans lequel est exercée l&#39;activité. Un établissement peut posséder une enseigne, plusieurs enseignes ou aucune.     Cette variable est la concaténation séparée par des virgules des 3 champs \&quot;renvoyés\&quot; par l&#39;Insee. Plus d&#39;informations ici: https://www.sirene.fr/sirene/public/variable/enseigne1Etablissement (required).</param>
        /// <param name="uniteLegale">uniteLegale (required).</param>
        /// <param name="adresse">adresse (required).</param>
        /// <param name="dateCreation">dateCreation (required).</param>
        public V3InseeSireneEtablissementsSiretGet200ResponseData(SiegeSocialEnum siegeSocial = default(SiegeSocialEnum), EtatAdministratifEnum etatAdministratif = default(EtatAdministratifEnum), int? dateFermeture = default(int?), AttributsDeLActivitPrincipale activitePrincipale = default(AttributsDeLActivitPrincipale), TrancheDEffectifSalariDeLTablissement trancheEffectifSalarie = default(TrancheDEffectifSalariDeLTablissement), DiffusableCommercialementEnum diffusableCommercialement = default(DiffusableCommercialementEnum), string enseigne = default(string), UnitLGaleDeLTablissement uniteLegale = default(UnitLGaleDeLTablissement), AdresseDeLTablissement adresse = default(AdresseDeLTablissement), int dateCreation = default(int))
        {
            this.SiegeSocial = siegeSocial;
            this.EtatAdministratif = etatAdministratif;
            // to ensure "dateFermeture" is required (not null)
            if (dateFermeture == null)
            {
                throw new ArgumentNullException("dateFermeture is a required property for V3InseeSireneEtablissementsSiretGet200ResponseData and cannot be null");
            }
            this.DateFermeture = dateFermeture;
            // to ensure "activitePrincipale" is required (not null)
            if (activitePrincipale == null)
            {
                throw new ArgumentNullException("activitePrincipale is a required property for V3InseeSireneEtablissementsSiretGet200ResponseData and cannot be null");
            }
            this.ActivitePrincipale = activitePrincipale;
            // to ensure "trancheEffectifSalarie" is required (not null)
            if (trancheEffectifSalarie == null)
            {
                throw new ArgumentNullException("trancheEffectifSalarie is a required property for V3InseeSireneEtablissementsSiretGet200ResponseData and cannot be null");
            }
            this.TrancheEffectifSalarie = trancheEffectifSalarie;
            this.DiffusableCommercialement = diffusableCommercialement;
            // to ensure "enseigne" is required (not null)
            if (enseigne == null)
            {
                throw new ArgumentNullException("enseigne is a required property for V3InseeSireneEtablissementsSiretGet200ResponseData and cannot be null");
            }
            this.Enseigne = enseigne;
            // to ensure "uniteLegale" is required (not null)
            if (uniteLegale == null)
            {
                throw new ArgumentNullException("uniteLegale is a required property for V3InseeSireneEtablissementsSiretGet200ResponseData and cannot be null");
            }
            this.UniteLegale = uniteLegale;
            // to ensure "adresse" is required (not null)
            if (adresse == null)
            {
                throw new ArgumentNullException("adresse is a required property for V3InseeSireneEtablissementsSiretGet200ResponseData and cannot be null");
            }
            this.Adresse = adresse;
            this.DateCreation = dateCreation;
        }

        /// <summary>
        /// Cette valeur est renvoyée sous format timestamp
        /// </summary>
        /// <value>Cette valeur est renvoyée sous format timestamp</value>
        [DataMember(Name = "date_fermeture", IsRequired = true, EmitDefaultValue = true)]
        public int? DateFermeture { get; set; }

        /// <summary>
        /// Gets or Sets ActivitePrincipale
        /// </summary>
        [DataMember(Name = "activite_principale", IsRequired = true, EmitDefaultValue = true)]
        public AttributsDeLActivitPrincipale ActivitePrincipale { get; set; }

        /// <summary>
        /// Gets or Sets TrancheEffectifSalarie
        /// </summary>
        [DataMember(Name = "tranche_effectif_salarie", IsRequired = true, EmitDefaultValue = true)]
        public TrancheDEffectifSalariDeLTablissement TrancheEffectifSalarie { get; set; }

        /// <summary>
        /// L&#39;enseigne est l&#39;appellation désignant l&#39;emplacement ou le local dans lequel est exercée l&#39;activité. Un établissement peut posséder une enseigne, plusieurs enseignes ou aucune.     Cette variable est la concaténation séparée par des virgules des 3 champs \&quot;renvoyés\&quot; par l&#39;Insee. Plus d&#39;informations ici: https://www.sirene.fr/sirene/public/variable/enseigne1Etablissement
        /// </summary>
        /// <value>L&#39;enseigne est l&#39;appellation désignant l&#39;emplacement ou le local dans lequel est exercée l&#39;activité. Un établissement peut posséder une enseigne, plusieurs enseignes ou aucune.     Cette variable est la concaténation séparée par des virgules des 3 champs \&quot;renvoyés\&quot; par l&#39;Insee. Plus d&#39;informations ici: https://www.sirene.fr/sirene/public/variable/enseigne1Etablissement</value>
        [DataMember(Name = "enseigne", IsRequired = true, EmitDefaultValue = true)]
        public string Enseigne { get; set; }

        /// <summary>
        /// Gets or Sets UniteLegale
        /// </summary>
        [DataMember(Name = "unite_legale", IsRequired = true, EmitDefaultValue = true)]
        public UnitLGaleDeLTablissement UniteLegale { get; set; }

        /// <summary>
        /// Gets or Sets Adresse
        /// </summary>
        [DataMember(Name = "adresse", IsRequired = true, EmitDefaultValue = true)]
        public AdresseDeLTablissement Adresse { get; set; }

        /// <summary>
        /// Gets or Sets DateCreation
        /// </summary>
        [DataMember(Name = "date_creation", IsRequired = true, EmitDefaultValue = true)]
        public int DateCreation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V3InseeSireneEtablissementsSiretGet200ResponseData {\n");
            sb.Append("  SiegeSocial: ").Append(SiegeSocial).Append("\n");
            sb.Append("  EtatAdministratif: ").Append(EtatAdministratif).Append("\n");
            sb.Append("  DateFermeture: ").Append(DateFermeture).Append("\n");
            sb.Append("  ActivitePrincipale: ").Append(ActivitePrincipale).Append("\n");
            sb.Append("  TrancheEffectifSalarie: ").Append(TrancheEffectifSalarie).Append("\n");
            sb.Append("  DiffusableCommercialement: ").Append(DiffusableCommercialement).Append("\n");
            sb.Append("  Enseigne: ").Append(Enseigne).Append("\n");
            sb.Append("  UniteLegale: ").Append(UniteLegale).Append("\n");
            sb.Append("  Adresse: ").Append(Adresse).Append("\n");
            sb.Append("  DateCreation: ").Append(DateCreation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V3InseeSireneEtablissementsSiretGet200ResponseData);
        }

        /// <summary>
        /// Returns true if V3InseeSireneEtablissementsSiretGet200ResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of V3InseeSireneEtablissementsSiretGet200ResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V3InseeSireneEtablissementsSiretGet200ResponseData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SiegeSocial == input.SiegeSocial ||
                    this.SiegeSocial.Equals(input.SiegeSocial)
                ) && 
                (
                    this.EtatAdministratif == input.EtatAdministratif ||
                    this.EtatAdministratif.Equals(input.EtatAdministratif)
                ) && 
                (
                    this.DateFermeture == input.DateFermeture ||
                    (this.DateFermeture != null &&
                    this.DateFermeture.Equals(input.DateFermeture))
                ) && 
                (
                    this.ActivitePrincipale == input.ActivitePrincipale ||
                    (this.ActivitePrincipale != null &&
                    this.ActivitePrincipale.Equals(input.ActivitePrincipale))
                ) && 
                (
                    this.TrancheEffectifSalarie == input.TrancheEffectifSalarie ||
                    (this.TrancheEffectifSalarie != null &&
                    this.TrancheEffectifSalarie.Equals(input.TrancheEffectifSalarie))
                ) && 
                (
                    this.DiffusableCommercialement == input.DiffusableCommercialement ||
                    this.DiffusableCommercialement.Equals(input.DiffusableCommercialement)
                ) && 
                (
                    this.Enseigne == input.Enseigne ||
                    (this.Enseigne != null &&
                    this.Enseigne.Equals(input.Enseigne))
                ) && 
                (
                    this.UniteLegale == input.UniteLegale ||
                    (this.UniteLegale != null &&
                    this.UniteLegale.Equals(input.UniteLegale))
                ) && 
                (
                    this.Adresse == input.Adresse ||
                    (this.Adresse != null &&
                    this.Adresse.Equals(input.Adresse))
                ) && 
                (
                    this.DateCreation == input.DateCreation ||
                    this.DateCreation.Equals(input.DateCreation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SiegeSocial.GetHashCode();
                hashCode = (hashCode * 59) + this.EtatAdministratif.GetHashCode();
                if (this.DateFermeture != null)
                {
                    hashCode = (hashCode * 59) + this.DateFermeture.GetHashCode();
                }
                if (this.ActivitePrincipale != null)
                {
                    hashCode = (hashCode * 59) + this.ActivitePrincipale.GetHashCode();
                }
                if (this.TrancheEffectifSalarie != null)
                {
                    hashCode = (hashCode * 59) + this.TrancheEffectifSalarie.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DiffusableCommercialement.GetHashCode();
                if (this.Enseigne != null)
                {
                    hashCode = (hashCode * 59) + this.Enseigne.GetHashCode();
                }
                if (this.UniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.UniteLegale.GetHashCode();
                }
                if (this.Adresse != null)
                {
                    hashCode = (hashCode * 59) + this.Adresse.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DateCreation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
