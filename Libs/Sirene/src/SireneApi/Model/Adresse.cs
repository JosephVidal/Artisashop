/*
 * API Sirene
 *
 * <p><span style=\"color:red;\"> <b></b></p><br></span><span style=\"color:blue;\"> <b>Les tranches d’effectifs et les catégories d’entreprises du millésime 2020 sont désormais disponibles</b></span> <br><br><span style=\"color:blue;\"><i>La documentation des services est désormais au format html (Cf. Onglet Documentation)</i></span></p> <p><h4 class=\"add-margin-top-5x\"><b>Les données du répertoire Sirene depuis 1973</b></h4><p>API Sirene donne accès aux informations concernant les entreprises et les établissements enregistrés au répertoire interadministratif Sirene depuis sa création en 1973, y compris les unités fermées.</p> <p>La recherche peut être unitaire, multicritère, phonétique et porter sur les données courantes et historisées.</p> <p></p> <p>Les services actuellement disponibles interrogent :</p> <ul> <li> les unités légales (siren) </li> <li> les établissements (siret). </li> </ul> <p>Le service informations permet de connaître les dates de dernières mises à jour.</p> <p>Le service Liens de succession informe sur les prédécesseurs et les successeurs des établissements.</p> <p align=\"justify\" style=\"margin-top: 0.6cm\">Le service nonDiffusibles restitue les siren et siret des personnes physiques ayant demandé à être exclues de la diffusion publique conformément à l'article A123-96 du code de commerce. Les informations les concernant ne peuvent alors être rediffusées, ni utilisées à des fins de prospection. Les utilisateurs ayant un référentiel en interne peuvent ainsi le mettre à jour quotidiennement.</p> <p>La lettre <b>Sirene open data actualités</b> est destinée aux utilisateurs des données Sirene. Pour vous abonner, <a href=\"https://insee.fr/fr/information/1405555\">suivez ce lien</a>. Pour consulter les précédents numéros, <a href=\"https://insee.fr/fr/information/3711739\">cliquez ici</a>.</p>
 *
 * The version of the OpenAPI document: 3.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SireneApi.Client.OpenAPIDateConverter;

namespace SireneApi.Model
{
    /// <summary>
    /// Ensemble des variables d&#39;adresse d&#39;un établissement
    /// </summary>
    [DataContract(Name = "Adresse")]
    public partial class Adresse : IEquatable<Adresse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Adresse" /> class.
        /// </summary>
        /// <param name="complementAdresseEtablissement">Complément d&#39;adresse de l&#39;établissement.</param>
        /// <param name="numeroVoieEtablissement">Numéro dans la voie.</param>
        /// <param name="indiceRepetitionEtablissement">Indice de répétition dans la voie.</param>
        /// <param name="typeVoieEtablissement">Type de la voie.</param>
        /// <param name="libelleVoieEtablissement">Libellé de la voie.</param>
        /// <param name="codePostalEtablissement">Code postal.</param>
        /// <param name="libelleCommuneEtablissement">Libellé de la commune pour les adresses en France.</param>
        /// <param name="libelleCommuneEtrangerEtablissement">Libellé complémentaire pour une adresse à l&#39;étranger.</param>
        /// <param name="distributionSpecialeEtablissement">Distribution spéciale (BP par ex).</param>
        /// <param name="codeCommuneEtablissement">Code commune de localisation de l’établissement hors établissements situés à l’étranger (Le code commune est défini dans le &lt;a href&#x3D;&#39;https://www.insee.fr/fr/information/2028028&#39;&gt;code officiel géographique (COG)&lt;/a&gt;).</param>
        /// <param name="codeCedexEtablissement">Numéro de Cedex.</param>
        /// <param name="libelleCedexEtablissement">Libellé correspondant au numéro de Cedex (variable codeCedexEtablissement).</param>
        /// <param name="codePaysEtrangerEtablissement">Code pays pour les établissements situés à l’étranger.</param>
        /// <param name="libellePaysEtrangerEtablissement">Libellé du pays pour les adresses à l’étranger.</param>
        public Adresse(string complementAdresseEtablissement = default(string), string numeroVoieEtablissement = default(string), string indiceRepetitionEtablissement = default(string), string typeVoieEtablissement = default(string), string libelleVoieEtablissement = default(string), string codePostalEtablissement = default(string), string libelleCommuneEtablissement = default(string), string libelleCommuneEtrangerEtablissement = default(string), string distributionSpecialeEtablissement = default(string), string codeCommuneEtablissement = default(string), string codeCedexEtablissement = default(string), string libelleCedexEtablissement = default(string), string codePaysEtrangerEtablissement = default(string), string libellePaysEtrangerEtablissement = default(string))
        {
            this.ComplementAdresseEtablissement = complementAdresseEtablissement;
            this.NumeroVoieEtablissement = numeroVoieEtablissement;
            this.IndiceRepetitionEtablissement = indiceRepetitionEtablissement;
            this.TypeVoieEtablissement = typeVoieEtablissement;
            this.LibelleVoieEtablissement = libelleVoieEtablissement;
            this.CodePostalEtablissement = codePostalEtablissement;
            this.LibelleCommuneEtablissement = libelleCommuneEtablissement;
            this.LibelleCommuneEtrangerEtablissement = libelleCommuneEtrangerEtablissement;
            this.DistributionSpecialeEtablissement = distributionSpecialeEtablissement;
            this.CodeCommuneEtablissement = codeCommuneEtablissement;
            this.CodeCedexEtablissement = codeCedexEtablissement;
            this.LibelleCedexEtablissement = libelleCedexEtablissement;
            this.CodePaysEtrangerEtablissement = codePaysEtrangerEtablissement;
            this.LibellePaysEtrangerEtablissement = libellePaysEtrangerEtablissement;
        }

        /// <summary>
        /// Complément d&#39;adresse de l&#39;établissement
        /// </summary>
        /// <value>Complément d&#39;adresse de l&#39;établissement</value>
        [DataMember(Name = "complementAdresseEtablissement", EmitDefaultValue = false)]
        public string ComplementAdresseEtablissement { get; set; }

        /// <summary>
        /// Numéro dans la voie
        /// </summary>
        /// <value>Numéro dans la voie</value>
        [DataMember(Name = "numeroVoieEtablissement", EmitDefaultValue = false)]
        public string NumeroVoieEtablissement { get; set; }

        /// <summary>
        /// Indice de répétition dans la voie
        /// </summary>
        /// <value>Indice de répétition dans la voie</value>
        [DataMember(Name = "indiceRepetitionEtablissement", EmitDefaultValue = false)]
        public string IndiceRepetitionEtablissement { get; set; }

        /// <summary>
        /// Type de la voie
        /// </summary>
        /// <value>Type de la voie</value>
        [DataMember(Name = "typeVoieEtablissement", EmitDefaultValue = false)]
        public string TypeVoieEtablissement { get; set; }

        /// <summary>
        /// Libellé de la voie
        /// </summary>
        /// <value>Libellé de la voie</value>
        [DataMember(Name = "libelleVoieEtablissement", EmitDefaultValue = false)]
        public string LibelleVoieEtablissement { get; set; }

        /// <summary>
        /// Code postal
        /// </summary>
        /// <value>Code postal</value>
        [DataMember(Name = "codePostalEtablissement", EmitDefaultValue = false)]
        public string CodePostalEtablissement { get; set; }

        /// <summary>
        /// Libellé de la commune pour les adresses en France
        /// </summary>
        /// <value>Libellé de la commune pour les adresses en France</value>
        [DataMember(Name = "libelleCommuneEtablissement", EmitDefaultValue = false)]
        public string LibelleCommuneEtablissement { get; set; }

        /// <summary>
        /// Libellé complémentaire pour une adresse à l&#39;étranger
        /// </summary>
        /// <value>Libellé complémentaire pour une adresse à l&#39;étranger</value>
        [DataMember(Name = "libelleCommuneEtrangerEtablissement", EmitDefaultValue = false)]
        public string LibelleCommuneEtrangerEtablissement { get; set; }

        /// <summary>
        /// Distribution spéciale (BP par ex)
        /// </summary>
        /// <value>Distribution spéciale (BP par ex)</value>
        [DataMember(Name = "distributionSpecialeEtablissement", EmitDefaultValue = false)]
        public string DistributionSpecialeEtablissement { get; set; }

        /// <summary>
        /// Code commune de localisation de l’établissement hors établissements situés à l’étranger (Le code commune est défini dans le &lt;a href&#x3D;&#39;https://www.insee.fr/fr/information/2028028&#39;&gt;code officiel géographique (COG)&lt;/a&gt;)
        /// </summary>
        /// <value>Code commune de localisation de l’établissement hors établissements situés à l’étranger (Le code commune est défini dans le &lt;a href&#x3D;&#39;https://www.insee.fr/fr/information/2028028&#39;&gt;code officiel géographique (COG)&lt;/a&gt;)</value>
        [DataMember(Name = "codeCommuneEtablissement", EmitDefaultValue = false)]
        public string CodeCommuneEtablissement { get; set; }

        /// <summary>
        /// Numéro de Cedex
        /// </summary>
        /// <value>Numéro de Cedex</value>
        [DataMember(Name = "codeCedexEtablissement", EmitDefaultValue = false)]
        public string CodeCedexEtablissement { get; set; }

        /// <summary>
        /// Libellé correspondant au numéro de Cedex (variable codeCedexEtablissement)
        /// </summary>
        /// <value>Libellé correspondant au numéro de Cedex (variable codeCedexEtablissement)</value>
        [DataMember(Name = "libelleCedexEtablissement", EmitDefaultValue = false)]
        public string LibelleCedexEtablissement { get; set; }

        /// <summary>
        /// Code pays pour les établissements situés à l’étranger
        /// </summary>
        /// <value>Code pays pour les établissements situés à l’étranger</value>
        [DataMember(Name = "codePaysEtrangerEtablissement", EmitDefaultValue = false)]
        public string CodePaysEtrangerEtablissement { get; set; }

        /// <summary>
        /// Libellé du pays pour les adresses à l’étranger
        /// </summary>
        /// <value>Libellé du pays pour les adresses à l’étranger</value>
        [DataMember(Name = "libellePaysEtrangerEtablissement", EmitDefaultValue = false)]
        public string LibellePaysEtrangerEtablissement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Adresse {\n");
            sb.Append("  ComplementAdresseEtablissement: ").Append(ComplementAdresseEtablissement).Append("\n");
            sb.Append("  NumeroVoieEtablissement: ").Append(NumeroVoieEtablissement).Append("\n");
            sb.Append("  IndiceRepetitionEtablissement: ").Append(IndiceRepetitionEtablissement).Append("\n");
            sb.Append("  TypeVoieEtablissement: ").Append(TypeVoieEtablissement).Append("\n");
            sb.Append("  LibelleVoieEtablissement: ").Append(LibelleVoieEtablissement).Append("\n");
            sb.Append("  CodePostalEtablissement: ").Append(CodePostalEtablissement).Append("\n");
            sb.Append("  LibelleCommuneEtablissement: ").Append(LibelleCommuneEtablissement).Append("\n");
            sb.Append("  LibelleCommuneEtrangerEtablissement: ").Append(LibelleCommuneEtrangerEtablissement).Append("\n");
            sb.Append("  DistributionSpecialeEtablissement: ").Append(DistributionSpecialeEtablissement).Append("\n");
            sb.Append("  CodeCommuneEtablissement: ").Append(CodeCommuneEtablissement).Append("\n");
            sb.Append("  CodeCedexEtablissement: ").Append(CodeCedexEtablissement).Append("\n");
            sb.Append("  LibelleCedexEtablissement: ").Append(LibelleCedexEtablissement).Append("\n");
            sb.Append("  CodePaysEtrangerEtablissement: ").Append(CodePaysEtrangerEtablissement).Append("\n");
            sb.Append("  LibellePaysEtrangerEtablissement: ").Append(LibellePaysEtrangerEtablissement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Adresse);
        }

        /// <summary>
        /// Returns true if Adresse instances are equal
        /// </summary>
        /// <param name="input">Instance of Adresse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Adresse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ComplementAdresseEtablissement == input.ComplementAdresseEtablissement ||
                    (this.ComplementAdresseEtablissement != null &&
                    this.ComplementAdresseEtablissement.Equals(input.ComplementAdresseEtablissement))
                ) && 
                (
                    this.NumeroVoieEtablissement == input.NumeroVoieEtablissement ||
                    (this.NumeroVoieEtablissement != null &&
                    this.NumeroVoieEtablissement.Equals(input.NumeroVoieEtablissement))
                ) && 
                (
                    this.IndiceRepetitionEtablissement == input.IndiceRepetitionEtablissement ||
                    (this.IndiceRepetitionEtablissement != null &&
                    this.IndiceRepetitionEtablissement.Equals(input.IndiceRepetitionEtablissement))
                ) && 
                (
                    this.TypeVoieEtablissement == input.TypeVoieEtablissement ||
                    (this.TypeVoieEtablissement != null &&
                    this.TypeVoieEtablissement.Equals(input.TypeVoieEtablissement))
                ) && 
                (
                    this.LibelleVoieEtablissement == input.LibelleVoieEtablissement ||
                    (this.LibelleVoieEtablissement != null &&
                    this.LibelleVoieEtablissement.Equals(input.LibelleVoieEtablissement))
                ) && 
                (
                    this.CodePostalEtablissement == input.CodePostalEtablissement ||
                    (this.CodePostalEtablissement != null &&
                    this.CodePostalEtablissement.Equals(input.CodePostalEtablissement))
                ) && 
                (
                    this.LibelleCommuneEtablissement == input.LibelleCommuneEtablissement ||
                    (this.LibelleCommuneEtablissement != null &&
                    this.LibelleCommuneEtablissement.Equals(input.LibelleCommuneEtablissement))
                ) && 
                (
                    this.LibelleCommuneEtrangerEtablissement == input.LibelleCommuneEtrangerEtablissement ||
                    (this.LibelleCommuneEtrangerEtablissement != null &&
                    this.LibelleCommuneEtrangerEtablissement.Equals(input.LibelleCommuneEtrangerEtablissement))
                ) && 
                (
                    this.DistributionSpecialeEtablissement == input.DistributionSpecialeEtablissement ||
                    (this.DistributionSpecialeEtablissement != null &&
                    this.DistributionSpecialeEtablissement.Equals(input.DistributionSpecialeEtablissement))
                ) && 
                (
                    this.CodeCommuneEtablissement == input.CodeCommuneEtablissement ||
                    (this.CodeCommuneEtablissement != null &&
                    this.CodeCommuneEtablissement.Equals(input.CodeCommuneEtablissement))
                ) && 
                (
                    this.CodeCedexEtablissement == input.CodeCedexEtablissement ||
                    (this.CodeCedexEtablissement != null &&
                    this.CodeCedexEtablissement.Equals(input.CodeCedexEtablissement))
                ) && 
                (
                    this.LibelleCedexEtablissement == input.LibelleCedexEtablissement ||
                    (this.LibelleCedexEtablissement != null &&
                    this.LibelleCedexEtablissement.Equals(input.LibelleCedexEtablissement))
                ) && 
                (
                    this.CodePaysEtrangerEtablissement == input.CodePaysEtrangerEtablissement ||
                    (this.CodePaysEtrangerEtablissement != null &&
                    this.CodePaysEtrangerEtablissement.Equals(input.CodePaysEtrangerEtablissement))
                ) && 
                (
                    this.LibellePaysEtrangerEtablissement == input.LibellePaysEtrangerEtablissement ||
                    (this.LibellePaysEtrangerEtablissement != null &&
                    this.LibellePaysEtrangerEtablissement.Equals(input.LibellePaysEtrangerEtablissement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ComplementAdresseEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.ComplementAdresseEtablissement.GetHashCode();
                }
                if (this.NumeroVoieEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.NumeroVoieEtablissement.GetHashCode();
                }
                if (this.IndiceRepetitionEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.IndiceRepetitionEtablissement.GetHashCode();
                }
                if (this.TypeVoieEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.TypeVoieEtablissement.GetHashCode();
                }
                if (this.LibelleVoieEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.LibelleVoieEtablissement.GetHashCode();
                }
                if (this.CodePostalEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.CodePostalEtablissement.GetHashCode();
                }
                if (this.LibelleCommuneEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.LibelleCommuneEtablissement.GetHashCode();
                }
                if (this.LibelleCommuneEtrangerEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.LibelleCommuneEtrangerEtablissement.GetHashCode();
                }
                if (this.DistributionSpecialeEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.DistributionSpecialeEtablissement.GetHashCode();
                }
                if (this.CodeCommuneEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.CodeCommuneEtablissement.GetHashCode();
                }
                if (this.CodeCedexEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.CodeCedexEtablissement.GetHashCode();
                }
                if (this.LibelleCedexEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.LibelleCedexEtablissement.GetHashCode();
                }
                if (this.CodePaysEtrangerEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.CodePaysEtrangerEtablissement.GetHashCode();
                }
                if (this.LibellePaysEtrangerEtablissement != null)
                {
                    hashCode = (hashCode * 59) + this.LibellePaysEtrangerEtablissement.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
