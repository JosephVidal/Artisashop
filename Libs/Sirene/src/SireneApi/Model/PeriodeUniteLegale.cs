/*
 * API Sirene
 *
 * <p><span style=\"color:red;\"> <b></b></p><br></span><span style=\"color:blue;\"> <b>Les tranches d’effectifs et les catégories d’entreprises du millésime 2020 sont désormais disponibles</b></span> <br><br><span style=\"color:blue;\"><i>La documentation des services est désormais au format html (Cf. Onglet Documentation)</i></span></p> <p><h4 class=\"add-margin-top-5x\"><b>Les données du répertoire Sirene depuis 1973</b></h4><p>API Sirene donne accès aux informations concernant les entreprises et les établissements enregistrés au répertoire interadministratif Sirene depuis sa création en 1973, y compris les unités fermées.</p> <p>La recherche peut être unitaire, multicritère, phonétique et porter sur les données courantes et historisées.</p> <p></p> <p>Les services actuellement disponibles interrogent :</p> <ul> <li> les unités légales (siren) </li> <li> les établissements (siret). </li> </ul> <p>Le service informations permet de connaître les dates de dernières mises à jour.</p> <p>Le service Liens de succession informe sur les prédécesseurs et les successeurs des établissements.</p> <p align=\"justify\" style=\"margin-top: 0.6cm\">Le service nonDiffusibles restitue les siren et siret des personnes physiques ayant demandé à être exclues de la diffusion publique conformément à l'article A123-96 du code de commerce. Les informations les concernant ne peuvent alors être rediffusées, ni utilisées à des fins de prospection. Les utilisateurs ayant un référentiel en interne peuvent ainsi le mettre à jour quotidiennement.</p> <p>La lettre <b>Sirene open data actualités</b> est destinée aux utilisateurs des données Sirene. Pour vous abonner, <a href=\"https://insee.fr/fr/information/1405555\">suivez ce lien</a>. Pour consulter les précédents numéros, <a href=\"https://insee.fr/fr/information/3711739\">cliquez ici</a>.</p>
 *
 * The version of the OpenAPI document: 3.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SireneApi.Client.OpenAPIDateConverter;

namespace SireneApi.Model
{
    /// <summary>
    /// Ensemble des variables historisées de l&#39;unité légale entre dateDebut et dateFin
    /// </summary>
    [DataContract(Name = "PeriodeUniteLegale")]
    public partial class PeriodeUniteLegale : IEquatable<PeriodeUniteLegale>, IValidatableObject
    {
        /// <summary>
        /// État de l&#39;entreprise pendant la période (A&#x3D; entreprise active, C&#x3D; entreprise cessée)
        /// </summary>
        /// <value>État de l&#39;entreprise pendant la période (A&#x3D; entreprise active, C&#x3D; entreprise cessée)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EtatAdministratifUniteLegaleEnum
        {
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 1,

            /// <summary>
            /// Enum C for value: C
            /// </summary>
            [EnumMember(Value = "C")]
            C = 2

        }


        /// <summary>
        /// État de l&#39;entreprise pendant la période (A&#x3D; entreprise active, C&#x3D; entreprise cessée)
        /// </summary>
        /// <value>État de l&#39;entreprise pendant la période (A&#x3D; entreprise active, C&#x3D; entreprise cessée)</value>
        [DataMember(Name = "etatAdministratifUniteLegale", EmitDefaultValue = false)]
        public EtatAdministratifUniteLegaleEnum? EtatAdministratifUniteLegale { get; set; }
        /// <summary>
        /// Nomenclature de l&#39;activité, permet de savoir à partir de quelle nomenclature est codifiée ActivitePrincipale
        /// </summary>
        /// <value>Nomenclature de l&#39;activité, permet de savoir à partir de quelle nomenclature est codifiée ActivitePrincipale</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NomenclatureActivitePrincipaleUniteLegaleEnum
        {
            /// <summary>
            /// Enum NAP for value: NAP
            /// </summary>
            [EnumMember(Value = "NAP")]
            NAP = 1,

            /// <summary>
            /// Enum NAFRev1 for value: NAFRev1
            /// </summary>
            [EnumMember(Value = "NAFRev1")]
            NAFRev1 = 2,

            /// <summary>
            /// Enum NAFRev2 for value: NAFRev2
            /// </summary>
            [EnumMember(Value = "NAFRev2")]
            NAFRev2 = 3,

            /// <summary>
            /// Enum NAF1993 for value: NAF1993
            /// </summary>
            [EnumMember(Value = "NAF1993")]
            NAF1993 = 4

        }


        /// <summary>
        /// Nomenclature de l&#39;activité, permet de savoir à partir de quelle nomenclature est codifiée ActivitePrincipale
        /// </summary>
        /// <value>Nomenclature de l&#39;activité, permet de savoir à partir de quelle nomenclature est codifiée ActivitePrincipale</value>
        [DataMember(Name = "nomenclatureActivitePrincipaleUniteLegale", EmitDefaultValue = false)]
        public NomenclatureActivitePrincipaleUniteLegaleEnum? NomenclatureActivitePrincipaleUniteLegale { get; set; }
        /// <summary>
        /// Caractère employeur de l&#39;entreprise. Valeur courante&#x3D;O si au moins l&#39;un des établissements actifs de l&#39;unité légale emploie des salariés
        /// </summary>
        /// <value>Caractère employeur de l&#39;entreprise. Valeur courante&#x3D;O si au moins l&#39;un des établissements actifs de l&#39;unité légale emploie des salariés</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CaractereEmployeurUniteLegaleEnum
        {
            /// <summary>
            /// Enum O for value: O
            /// </summary>
            [EnumMember(Value = "O")]
            O = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 3

        }


        /// <summary>
        /// Caractère employeur de l&#39;entreprise. Valeur courante&#x3D;O si au moins l&#39;un des établissements actifs de l&#39;unité légale emploie des salariés
        /// </summary>
        /// <value>Caractère employeur de l&#39;entreprise. Valeur courante&#x3D;O si au moins l&#39;un des établissements actifs de l&#39;unité légale emploie des salariés</value>
        [DataMember(Name = "caractereEmployeurUniteLegale", EmitDefaultValue = false)]
        public CaractereEmployeurUniteLegaleEnum? CaractereEmployeurUniteLegale { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PeriodeUniteLegale" /> class.
        /// </summary>
        /// <param name="dateFin">Date de fin de la période, null pour la dernière période, format AAAA-MM-DD.</param>
        /// <param name="dateDebut">Date de début de la période, format AAAA-MM-DD.</param>
        /// <param name="etatAdministratifUniteLegale">État de l&#39;entreprise pendant la période (A&#x3D; entreprise active, C&#x3D; entreprise cessée).</param>
        /// <param name="changementEtatAdministratifUniteLegale">Indicatrice de changement d&#39;état par rapport à la période précédente.</param>
        /// <param name="nomUniteLegale">Nom de naissance pour les personnes physiques pour la période (null pour les personnes morales).</param>
        /// <param name="changementNomUniteLegale">Indicatrice de changement du nom par rapport à la période précédente.</param>
        /// <param name="nomUsageUniteLegale">Nom d’usage pour les personnes physiques si celui-ci existe, null pour les personnes morales.</param>
        /// <param name="changementNomUsageUniteLegale">Indicatrice de changement du nom d&#39;usage par rapport à la période précédente.</param>
        /// <param name="denominationUniteLegale">Raison sociale (personnes morales).</param>
        /// <param name="changementDenominationUniteLegale">Indicatrice de changement de la dénomination par rapport à la période précédente.</param>
        /// <param name="denominationUsuelle1UniteLegale">Premier nom sous lequel l’entreprise est connue du public.</param>
        /// <param name="denominationUsuelle2UniteLegale">Deuxième nom sous lequel l’entreprise est connue du public.</param>
        /// <param name="denominationUsuelle3UniteLegale">Troisième nom sous lequel l’entreprise est connue du public.</param>
        /// <param name="changementDenominationUsuelleUniteLegale">Indicatrice de changement de la dénomination usuelle de l&#39;unité légale par rapport à la période précédente (un seul indicateur pour les trois variables denominationUsuelle1UniteLegale, denominationUsuelle2UniteLegale et denominationUsuelle3UniteLegale).</param>
        /// <param name="categorieJuridiqueUniteLegale">Catégorie juridique de l&#39;entreprise (variable Null pour les personnes physiques. (&lt;a href&#x3D;&#39;https://www.insee.fr/fr/information/2028129&#39;&gt;la nomenclature sur insee.fr&lt;/a&gt;)).</param>
        /// <param name="changementCategorieJuridiqueUniteLegale">Indicatrice de changement de la catégorie juridique par rapport à la période précédente.</param>
        /// <param name="activitePrincipaleUniteLegale">Activité principale de l&#39;entreprise pendant la période (l&#39;APE est codifiée selon la &lt;a href&#x3D;&#39;https://www.insee.fr/fr/information/2406147&#39;&gt;nomenclature d&#39;Activités Française (NAF)&lt;/a&gt;.</param>
        /// <param name="nomenclatureActivitePrincipaleUniteLegale">Nomenclature de l&#39;activité, permet de savoir à partir de quelle nomenclature est codifiée ActivitePrincipale.</param>
        /// <param name="changementActivitePrincipaleUniteLegale">Indicatrice de changement de l&#39;activité principale par rapport à la période précédente.</param>
        /// <param name="nicSiegeUniteLegale">Identifiant du siège pour la période (le Siret du siège est obtenu en concaténant le numéro Siren et le Nic).</param>
        /// <param name="changementNicSiegeUniteLegale">Indicatrice de changement du NIC du siège par rapport à la période précédente.</param>
        /// <param name="economieSocialeSolidaireUniteLegale">Appartenance de l’unité légale au champ de l’économie sociale et solidaire (ESS).</param>
        /// <param name="changementEconomieSocialeSolidaireUniteLegale">Indicatrice de changement de l&#39;ESS par rapport à la période précédente.</param>
        /// <param name="societeMissionUniteLegale">Appartenance de l’unité légale au champ société à mission (SM).</param>
        /// <param name="changementSocieteMissionUniteLegale">Indicatrice de changement du champ société à mission par rapport à la période précédente.</param>
        /// <param name="caractereEmployeurUniteLegale">Caractère employeur de l&#39;entreprise. Valeur courante&#x3D;O si au moins l&#39;un des établissements actifs de l&#39;unité légale emploie des salariés.</param>
        /// <param name="changementCaractereEmployeurUniteLegale">Indicatrice de changement du caractère employeur par rapport à la période précédente.</param>
        public PeriodeUniteLegale(DateTime dateFin = default(DateTime), DateTime dateDebut = default(DateTime), EtatAdministratifUniteLegaleEnum? etatAdministratifUniteLegale = default(EtatAdministratifUniteLegaleEnum?), bool changementEtatAdministratifUniteLegale = default(bool), string nomUniteLegale = default(string), bool changementNomUniteLegale = default(bool), string nomUsageUniteLegale = default(string), bool changementNomUsageUniteLegale = default(bool), string denominationUniteLegale = default(string), bool changementDenominationUniteLegale = default(bool), string denominationUsuelle1UniteLegale = default(string), string denominationUsuelle2UniteLegale = default(string), string denominationUsuelle3UniteLegale = default(string), bool changementDenominationUsuelleUniteLegale = default(bool), string categorieJuridiqueUniteLegale = default(string), bool changementCategorieJuridiqueUniteLegale = default(bool), string activitePrincipaleUniteLegale = default(string), NomenclatureActivitePrincipaleUniteLegaleEnum? nomenclatureActivitePrincipaleUniteLegale = default(NomenclatureActivitePrincipaleUniteLegaleEnum?), bool changementActivitePrincipaleUniteLegale = default(bool), string nicSiegeUniteLegale = default(string), bool changementNicSiegeUniteLegale = default(bool), string economieSocialeSolidaireUniteLegale = default(string), bool changementEconomieSocialeSolidaireUniteLegale = default(bool), string societeMissionUniteLegale = default(string), bool changementSocieteMissionUniteLegale = default(bool), CaractereEmployeurUniteLegaleEnum? caractereEmployeurUniteLegale = default(CaractereEmployeurUniteLegaleEnum?), bool changementCaractereEmployeurUniteLegale = default(bool))
        {
            this.DateFin = dateFin;
            this.DateDebut = dateDebut;
            this.EtatAdministratifUniteLegale = etatAdministratifUniteLegale;
            this.ChangementEtatAdministratifUniteLegale = changementEtatAdministratifUniteLegale;
            this.NomUniteLegale = nomUniteLegale;
            this.ChangementNomUniteLegale = changementNomUniteLegale;
            this.NomUsageUniteLegale = nomUsageUniteLegale;
            this.ChangementNomUsageUniteLegale = changementNomUsageUniteLegale;
            this.DenominationUniteLegale = denominationUniteLegale;
            this.ChangementDenominationUniteLegale = changementDenominationUniteLegale;
            this.DenominationUsuelle1UniteLegale = denominationUsuelle1UniteLegale;
            this.DenominationUsuelle2UniteLegale = denominationUsuelle2UniteLegale;
            this.DenominationUsuelle3UniteLegale = denominationUsuelle3UniteLegale;
            this.ChangementDenominationUsuelleUniteLegale = changementDenominationUsuelleUniteLegale;
            this.CategorieJuridiqueUniteLegale = categorieJuridiqueUniteLegale;
            this.ChangementCategorieJuridiqueUniteLegale = changementCategorieJuridiqueUniteLegale;
            this.ActivitePrincipaleUniteLegale = activitePrincipaleUniteLegale;
            this.NomenclatureActivitePrincipaleUniteLegale = nomenclatureActivitePrincipaleUniteLegale;
            this.ChangementActivitePrincipaleUniteLegale = changementActivitePrincipaleUniteLegale;
            this.NicSiegeUniteLegale = nicSiegeUniteLegale;
            this.ChangementNicSiegeUniteLegale = changementNicSiegeUniteLegale;
            this.EconomieSocialeSolidaireUniteLegale = economieSocialeSolidaireUniteLegale;
            this.ChangementEconomieSocialeSolidaireUniteLegale = changementEconomieSocialeSolidaireUniteLegale;
            this.SocieteMissionUniteLegale = societeMissionUniteLegale;
            this.ChangementSocieteMissionUniteLegale = changementSocieteMissionUniteLegale;
            this.CaractereEmployeurUniteLegale = caractereEmployeurUniteLegale;
            this.ChangementCaractereEmployeurUniteLegale = changementCaractereEmployeurUniteLegale;
        }

        /// <summary>
        /// Date de fin de la période, null pour la dernière période, format AAAA-MM-DD
        /// </summary>
        /// <value>Date de fin de la période, null pour la dernière période, format AAAA-MM-DD</value>
        [DataMember(Name = "dateFin", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateFin { get; set; }

        /// <summary>
        /// Date de début de la période, format AAAA-MM-DD
        /// </summary>
        /// <value>Date de début de la période, format AAAA-MM-DD</value>
        [DataMember(Name = "dateDebut", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateDebut { get; set; }

        /// <summary>
        /// Indicatrice de changement d&#39;état par rapport à la période précédente
        /// </summary>
        /// <value>Indicatrice de changement d&#39;état par rapport à la période précédente</value>
        [DataMember(Name = "changementEtatAdministratifUniteLegale", EmitDefaultValue = true)]
        public bool ChangementEtatAdministratifUniteLegale { get; set; }

        /// <summary>
        /// Nom de naissance pour les personnes physiques pour la période (null pour les personnes morales)
        /// </summary>
        /// <value>Nom de naissance pour les personnes physiques pour la période (null pour les personnes morales)</value>
        [DataMember(Name = "nomUniteLegale", EmitDefaultValue = false)]
        public string NomUniteLegale { get; set; }

        /// <summary>
        /// Indicatrice de changement du nom par rapport à la période précédente
        /// </summary>
        /// <value>Indicatrice de changement du nom par rapport à la période précédente</value>
        [DataMember(Name = "changementNomUniteLegale", EmitDefaultValue = true)]
        public bool ChangementNomUniteLegale { get; set; }

        /// <summary>
        /// Nom d’usage pour les personnes physiques si celui-ci existe, null pour les personnes morales
        /// </summary>
        /// <value>Nom d’usage pour les personnes physiques si celui-ci existe, null pour les personnes morales</value>
        [DataMember(Name = "nomUsageUniteLegale", EmitDefaultValue = false)]
        public string NomUsageUniteLegale { get; set; }

        /// <summary>
        /// Indicatrice de changement du nom d&#39;usage par rapport à la période précédente
        /// </summary>
        /// <value>Indicatrice de changement du nom d&#39;usage par rapport à la période précédente</value>
        [DataMember(Name = "changementNomUsageUniteLegale", EmitDefaultValue = true)]
        public bool ChangementNomUsageUniteLegale { get; set; }

        /// <summary>
        /// Raison sociale (personnes morales)
        /// </summary>
        /// <value>Raison sociale (personnes morales)</value>
        [DataMember(Name = "denominationUniteLegale", EmitDefaultValue = false)]
        public string DenominationUniteLegale { get; set; }

        /// <summary>
        /// Indicatrice de changement de la dénomination par rapport à la période précédente
        /// </summary>
        /// <value>Indicatrice de changement de la dénomination par rapport à la période précédente</value>
        [DataMember(Name = "changementDenominationUniteLegale", EmitDefaultValue = true)]
        public bool ChangementDenominationUniteLegale { get; set; }

        /// <summary>
        /// Premier nom sous lequel l’entreprise est connue du public
        /// </summary>
        /// <value>Premier nom sous lequel l’entreprise est connue du public</value>
        [DataMember(Name = "denominationUsuelle1UniteLegale", EmitDefaultValue = false)]
        public string DenominationUsuelle1UniteLegale { get; set; }

        /// <summary>
        /// Deuxième nom sous lequel l’entreprise est connue du public
        /// </summary>
        /// <value>Deuxième nom sous lequel l’entreprise est connue du public</value>
        [DataMember(Name = "denominationUsuelle2UniteLegale", EmitDefaultValue = false)]
        public string DenominationUsuelle2UniteLegale { get; set; }

        /// <summary>
        /// Troisième nom sous lequel l’entreprise est connue du public
        /// </summary>
        /// <value>Troisième nom sous lequel l’entreprise est connue du public</value>
        [DataMember(Name = "denominationUsuelle3UniteLegale", EmitDefaultValue = false)]
        public string DenominationUsuelle3UniteLegale { get; set; }

        /// <summary>
        /// Indicatrice de changement de la dénomination usuelle de l&#39;unité légale par rapport à la période précédente (un seul indicateur pour les trois variables denominationUsuelle1UniteLegale, denominationUsuelle2UniteLegale et denominationUsuelle3UniteLegale)
        /// </summary>
        /// <value>Indicatrice de changement de la dénomination usuelle de l&#39;unité légale par rapport à la période précédente (un seul indicateur pour les trois variables denominationUsuelle1UniteLegale, denominationUsuelle2UniteLegale et denominationUsuelle3UniteLegale)</value>
        [DataMember(Name = "changementDenominationUsuelleUniteLegale", EmitDefaultValue = true)]
        public bool ChangementDenominationUsuelleUniteLegale { get; set; }

        /// <summary>
        /// Catégorie juridique de l&#39;entreprise (variable Null pour les personnes physiques. (&lt;a href&#x3D;&#39;https://www.insee.fr/fr/information/2028129&#39;&gt;la nomenclature sur insee.fr&lt;/a&gt;))
        /// </summary>
        /// <value>Catégorie juridique de l&#39;entreprise (variable Null pour les personnes physiques. (&lt;a href&#x3D;&#39;https://www.insee.fr/fr/information/2028129&#39;&gt;la nomenclature sur insee.fr&lt;/a&gt;))</value>
        [DataMember(Name = "categorieJuridiqueUniteLegale", EmitDefaultValue = false)]
        public string CategorieJuridiqueUniteLegale { get; set; }

        /// <summary>
        /// Indicatrice de changement de la catégorie juridique par rapport à la période précédente
        /// </summary>
        /// <value>Indicatrice de changement de la catégorie juridique par rapport à la période précédente</value>
        [DataMember(Name = "changementCategorieJuridiqueUniteLegale", EmitDefaultValue = true)]
        public bool ChangementCategorieJuridiqueUniteLegale { get; set; }

        /// <summary>
        /// Activité principale de l&#39;entreprise pendant la période (l&#39;APE est codifiée selon la &lt;a href&#x3D;&#39;https://www.insee.fr/fr/information/2406147&#39;&gt;nomenclature d&#39;Activités Française (NAF)&lt;/a&gt;
        /// </summary>
        /// <value>Activité principale de l&#39;entreprise pendant la période (l&#39;APE est codifiée selon la &lt;a href&#x3D;&#39;https://www.insee.fr/fr/information/2406147&#39;&gt;nomenclature d&#39;Activités Française (NAF)&lt;/a&gt;</value>
        [DataMember(Name = "activitePrincipaleUniteLegale", EmitDefaultValue = false)]
        public string ActivitePrincipaleUniteLegale { get; set; }

        /// <summary>
        /// Indicatrice de changement de l&#39;activité principale par rapport à la période précédente
        /// </summary>
        /// <value>Indicatrice de changement de l&#39;activité principale par rapport à la période précédente</value>
        [DataMember(Name = "changementActivitePrincipaleUniteLegale", EmitDefaultValue = true)]
        public bool ChangementActivitePrincipaleUniteLegale { get; set; }

        /// <summary>
        /// Identifiant du siège pour la période (le Siret du siège est obtenu en concaténant le numéro Siren et le Nic)
        /// </summary>
        /// <value>Identifiant du siège pour la période (le Siret du siège est obtenu en concaténant le numéro Siren et le Nic)</value>
        [DataMember(Name = "nicSiegeUniteLegale", EmitDefaultValue = false)]
        public string NicSiegeUniteLegale { get; set; }

        /// <summary>
        /// Indicatrice de changement du NIC du siège par rapport à la période précédente
        /// </summary>
        /// <value>Indicatrice de changement du NIC du siège par rapport à la période précédente</value>
        [DataMember(Name = "changementNicSiegeUniteLegale", EmitDefaultValue = true)]
        public bool ChangementNicSiegeUniteLegale { get; set; }

        /// <summary>
        /// Appartenance de l’unité légale au champ de l’économie sociale et solidaire (ESS)
        /// </summary>
        /// <value>Appartenance de l’unité légale au champ de l’économie sociale et solidaire (ESS)</value>
        [DataMember(Name = "economieSocialeSolidaireUniteLegale", EmitDefaultValue = false)]
        public string EconomieSocialeSolidaireUniteLegale { get; set; }

        /// <summary>
        /// Indicatrice de changement de l&#39;ESS par rapport à la période précédente
        /// </summary>
        /// <value>Indicatrice de changement de l&#39;ESS par rapport à la période précédente</value>
        [DataMember(Name = "changementEconomieSocialeSolidaireUniteLegale", EmitDefaultValue = true)]
        public bool ChangementEconomieSocialeSolidaireUniteLegale { get; set; }

        /// <summary>
        /// Appartenance de l’unité légale au champ société à mission (SM)
        /// </summary>
        /// <value>Appartenance de l’unité légale au champ société à mission (SM)</value>
        [DataMember(Name = "societeMissionUniteLegale", EmitDefaultValue = false)]
        public string SocieteMissionUniteLegale { get; set; }

        /// <summary>
        /// Indicatrice de changement du champ société à mission par rapport à la période précédente
        /// </summary>
        /// <value>Indicatrice de changement du champ société à mission par rapport à la période précédente</value>
        [DataMember(Name = "changementSocieteMissionUniteLegale", EmitDefaultValue = true)]
        public bool ChangementSocieteMissionUniteLegale { get; set; }

        /// <summary>
        /// Indicatrice de changement du caractère employeur par rapport à la période précédente
        /// </summary>
        /// <value>Indicatrice de changement du caractère employeur par rapport à la période précédente</value>
        [DataMember(Name = "changementCaractereEmployeurUniteLegale", EmitDefaultValue = true)]
        public bool ChangementCaractereEmployeurUniteLegale { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PeriodeUniteLegale {\n");
            sb.Append("  DateFin: ").Append(DateFin).Append("\n");
            sb.Append("  DateDebut: ").Append(DateDebut).Append("\n");
            sb.Append("  EtatAdministratifUniteLegale: ").Append(EtatAdministratifUniteLegale).Append("\n");
            sb.Append("  ChangementEtatAdministratifUniteLegale: ").Append(ChangementEtatAdministratifUniteLegale).Append("\n");
            sb.Append("  NomUniteLegale: ").Append(NomUniteLegale).Append("\n");
            sb.Append("  ChangementNomUniteLegale: ").Append(ChangementNomUniteLegale).Append("\n");
            sb.Append("  NomUsageUniteLegale: ").Append(NomUsageUniteLegale).Append("\n");
            sb.Append("  ChangementNomUsageUniteLegale: ").Append(ChangementNomUsageUniteLegale).Append("\n");
            sb.Append("  DenominationUniteLegale: ").Append(DenominationUniteLegale).Append("\n");
            sb.Append("  ChangementDenominationUniteLegale: ").Append(ChangementDenominationUniteLegale).Append("\n");
            sb.Append("  DenominationUsuelle1UniteLegale: ").Append(DenominationUsuelle1UniteLegale).Append("\n");
            sb.Append("  DenominationUsuelle2UniteLegale: ").Append(DenominationUsuelle2UniteLegale).Append("\n");
            sb.Append("  DenominationUsuelle3UniteLegale: ").Append(DenominationUsuelle3UniteLegale).Append("\n");
            sb.Append("  ChangementDenominationUsuelleUniteLegale: ").Append(ChangementDenominationUsuelleUniteLegale).Append("\n");
            sb.Append("  CategorieJuridiqueUniteLegale: ").Append(CategorieJuridiqueUniteLegale).Append("\n");
            sb.Append("  ChangementCategorieJuridiqueUniteLegale: ").Append(ChangementCategorieJuridiqueUniteLegale).Append("\n");
            sb.Append("  ActivitePrincipaleUniteLegale: ").Append(ActivitePrincipaleUniteLegale).Append("\n");
            sb.Append("  NomenclatureActivitePrincipaleUniteLegale: ").Append(NomenclatureActivitePrincipaleUniteLegale).Append("\n");
            sb.Append("  ChangementActivitePrincipaleUniteLegale: ").Append(ChangementActivitePrincipaleUniteLegale).Append("\n");
            sb.Append("  NicSiegeUniteLegale: ").Append(NicSiegeUniteLegale).Append("\n");
            sb.Append("  ChangementNicSiegeUniteLegale: ").Append(ChangementNicSiegeUniteLegale).Append("\n");
            sb.Append("  EconomieSocialeSolidaireUniteLegale: ").Append(EconomieSocialeSolidaireUniteLegale).Append("\n");
            sb.Append("  ChangementEconomieSocialeSolidaireUniteLegale: ").Append(ChangementEconomieSocialeSolidaireUniteLegale).Append("\n");
            sb.Append("  SocieteMissionUniteLegale: ").Append(SocieteMissionUniteLegale).Append("\n");
            sb.Append("  ChangementSocieteMissionUniteLegale: ").Append(ChangementSocieteMissionUniteLegale).Append("\n");
            sb.Append("  CaractereEmployeurUniteLegale: ").Append(CaractereEmployeurUniteLegale).Append("\n");
            sb.Append("  ChangementCaractereEmployeurUniteLegale: ").Append(ChangementCaractereEmployeurUniteLegale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PeriodeUniteLegale);
        }

        /// <summary>
        /// Returns true if PeriodeUniteLegale instances are equal
        /// </summary>
        /// <param name="input">Instance of PeriodeUniteLegale to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PeriodeUniteLegale input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DateFin == input.DateFin ||
                    (this.DateFin != null &&
                    this.DateFin.Equals(input.DateFin))
                ) && 
                (
                    this.DateDebut == input.DateDebut ||
                    (this.DateDebut != null &&
                    this.DateDebut.Equals(input.DateDebut))
                ) && 
                (
                    this.EtatAdministratifUniteLegale == input.EtatAdministratifUniteLegale ||
                    this.EtatAdministratifUniteLegale.Equals(input.EtatAdministratifUniteLegale)
                ) && 
                (
                    this.ChangementEtatAdministratifUniteLegale == input.ChangementEtatAdministratifUniteLegale ||
                    this.ChangementEtatAdministratifUniteLegale.Equals(input.ChangementEtatAdministratifUniteLegale)
                ) && 
                (
                    this.NomUniteLegale == input.NomUniteLegale ||
                    (this.NomUniteLegale != null &&
                    this.NomUniteLegale.Equals(input.NomUniteLegale))
                ) && 
                (
                    this.ChangementNomUniteLegale == input.ChangementNomUniteLegale ||
                    this.ChangementNomUniteLegale.Equals(input.ChangementNomUniteLegale)
                ) && 
                (
                    this.NomUsageUniteLegale == input.NomUsageUniteLegale ||
                    (this.NomUsageUniteLegale != null &&
                    this.NomUsageUniteLegale.Equals(input.NomUsageUniteLegale))
                ) && 
                (
                    this.ChangementNomUsageUniteLegale == input.ChangementNomUsageUniteLegale ||
                    this.ChangementNomUsageUniteLegale.Equals(input.ChangementNomUsageUniteLegale)
                ) && 
                (
                    this.DenominationUniteLegale == input.DenominationUniteLegale ||
                    (this.DenominationUniteLegale != null &&
                    this.DenominationUniteLegale.Equals(input.DenominationUniteLegale))
                ) && 
                (
                    this.ChangementDenominationUniteLegale == input.ChangementDenominationUniteLegale ||
                    this.ChangementDenominationUniteLegale.Equals(input.ChangementDenominationUniteLegale)
                ) && 
                (
                    this.DenominationUsuelle1UniteLegale == input.DenominationUsuelle1UniteLegale ||
                    (this.DenominationUsuelle1UniteLegale != null &&
                    this.DenominationUsuelle1UniteLegale.Equals(input.DenominationUsuelle1UniteLegale))
                ) && 
                (
                    this.DenominationUsuelle2UniteLegale == input.DenominationUsuelle2UniteLegale ||
                    (this.DenominationUsuelle2UniteLegale != null &&
                    this.DenominationUsuelle2UniteLegale.Equals(input.DenominationUsuelle2UniteLegale))
                ) && 
                (
                    this.DenominationUsuelle3UniteLegale == input.DenominationUsuelle3UniteLegale ||
                    (this.DenominationUsuelle3UniteLegale != null &&
                    this.DenominationUsuelle3UniteLegale.Equals(input.DenominationUsuelle3UniteLegale))
                ) && 
                (
                    this.ChangementDenominationUsuelleUniteLegale == input.ChangementDenominationUsuelleUniteLegale ||
                    this.ChangementDenominationUsuelleUniteLegale.Equals(input.ChangementDenominationUsuelleUniteLegale)
                ) && 
                (
                    this.CategorieJuridiqueUniteLegale == input.CategorieJuridiqueUniteLegale ||
                    (this.CategorieJuridiqueUniteLegale != null &&
                    this.CategorieJuridiqueUniteLegale.Equals(input.CategorieJuridiqueUniteLegale))
                ) && 
                (
                    this.ChangementCategorieJuridiqueUniteLegale == input.ChangementCategorieJuridiqueUniteLegale ||
                    this.ChangementCategorieJuridiqueUniteLegale.Equals(input.ChangementCategorieJuridiqueUniteLegale)
                ) && 
                (
                    this.ActivitePrincipaleUniteLegale == input.ActivitePrincipaleUniteLegale ||
                    (this.ActivitePrincipaleUniteLegale != null &&
                    this.ActivitePrincipaleUniteLegale.Equals(input.ActivitePrincipaleUniteLegale))
                ) && 
                (
                    this.NomenclatureActivitePrincipaleUniteLegale == input.NomenclatureActivitePrincipaleUniteLegale ||
                    this.NomenclatureActivitePrincipaleUniteLegale.Equals(input.NomenclatureActivitePrincipaleUniteLegale)
                ) && 
                (
                    this.ChangementActivitePrincipaleUniteLegale == input.ChangementActivitePrincipaleUniteLegale ||
                    this.ChangementActivitePrincipaleUniteLegale.Equals(input.ChangementActivitePrincipaleUniteLegale)
                ) && 
                (
                    this.NicSiegeUniteLegale == input.NicSiegeUniteLegale ||
                    (this.NicSiegeUniteLegale != null &&
                    this.NicSiegeUniteLegale.Equals(input.NicSiegeUniteLegale))
                ) && 
                (
                    this.ChangementNicSiegeUniteLegale == input.ChangementNicSiegeUniteLegale ||
                    this.ChangementNicSiegeUniteLegale.Equals(input.ChangementNicSiegeUniteLegale)
                ) && 
                (
                    this.EconomieSocialeSolidaireUniteLegale == input.EconomieSocialeSolidaireUniteLegale ||
                    (this.EconomieSocialeSolidaireUniteLegale != null &&
                    this.EconomieSocialeSolidaireUniteLegale.Equals(input.EconomieSocialeSolidaireUniteLegale))
                ) && 
                (
                    this.ChangementEconomieSocialeSolidaireUniteLegale == input.ChangementEconomieSocialeSolidaireUniteLegale ||
                    this.ChangementEconomieSocialeSolidaireUniteLegale.Equals(input.ChangementEconomieSocialeSolidaireUniteLegale)
                ) && 
                (
                    this.SocieteMissionUniteLegale == input.SocieteMissionUniteLegale ||
                    (this.SocieteMissionUniteLegale != null &&
                    this.SocieteMissionUniteLegale.Equals(input.SocieteMissionUniteLegale))
                ) && 
                (
                    this.ChangementSocieteMissionUniteLegale == input.ChangementSocieteMissionUniteLegale ||
                    this.ChangementSocieteMissionUniteLegale.Equals(input.ChangementSocieteMissionUniteLegale)
                ) && 
                (
                    this.CaractereEmployeurUniteLegale == input.CaractereEmployeurUniteLegale ||
                    this.CaractereEmployeurUniteLegale.Equals(input.CaractereEmployeurUniteLegale)
                ) && 
                (
                    this.ChangementCaractereEmployeurUniteLegale == input.ChangementCaractereEmployeurUniteLegale ||
                    this.ChangementCaractereEmployeurUniteLegale.Equals(input.ChangementCaractereEmployeurUniteLegale)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateFin != null)
                {
                    hashCode = (hashCode * 59) + this.DateFin.GetHashCode();
                }
                if (this.DateDebut != null)
                {
                    hashCode = (hashCode * 59) + this.DateDebut.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EtatAdministratifUniteLegale.GetHashCode();
                hashCode = (hashCode * 59) + this.ChangementEtatAdministratifUniteLegale.GetHashCode();
                if (this.NomUniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.NomUniteLegale.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChangementNomUniteLegale.GetHashCode();
                if (this.NomUsageUniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.NomUsageUniteLegale.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChangementNomUsageUniteLegale.GetHashCode();
                if (this.DenominationUniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.DenominationUniteLegale.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChangementDenominationUniteLegale.GetHashCode();
                if (this.DenominationUsuelle1UniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.DenominationUsuelle1UniteLegale.GetHashCode();
                }
                if (this.DenominationUsuelle2UniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.DenominationUsuelle2UniteLegale.GetHashCode();
                }
                if (this.DenominationUsuelle3UniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.DenominationUsuelle3UniteLegale.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChangementDenominationUsuelleUniteLegale.GetHashCode();
                if (this.CategorieJuridiqueUniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.CategorieJuridiqueUniteLegale.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChangementCategorieJuridiqueUniteLegale.GetHashCode();
                if (this.ActivitePrincipaleUniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.ActivitePrincipaleUniteLegale.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NomenclatureActivitePrincipaleUniteLegale.GetHashCode();
                hashCode = (hashCode * 59) + this.ChangementActivitePrincipaleUniteLegale.GetHashCode();
                if (this.NicSiegeUniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.NicSiegeUniteLegale.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChangementNicSiegeUniteLegale.GetHashCode();
                if (this.EconomieSocialeSolidaireUniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.EconomieSocialeSolidaireUniteLegale.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChangementEconomieSocialeSolidaireUniteLegale.GetHashCode();
                if (this.SocieteMissionUniteLegale != null)
                {
                    hashCode = (hashCode * 59) + this.SocieteMissionUniteLegale.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChangementSocieteMissionUniteLegale.GetHashCode();
                hashCode = (hashCode * 59) + this.CaractereEmployeurUniteLegale.GetHashCode();
                hashCode = (hashCode * 59) + this.ChangementCaractereEmployeurUniteLegale.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
